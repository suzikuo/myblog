<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用python实现一个SCP小工具</title>
    <url>/2024/02/26/python/%E4%BD%BF%E7%94%A8python%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AASCP%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><strong>源码地址：</strong><br><a href="https://github.com/suzikuo/ssh_scp">ssh_scp</a><br><strong>工具截图：</strong></p>
<blockquote>
<p>一个简易的scp文件上传下载小工具，用来上传或下载一些小文件。<br>目前只适用于windows，</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/a599a39ab11d418daf5cad9dabc27264.png" alt="在这里插入图片描述"></p>
<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a><strong>使用方法：</strong></h2><h3 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h3><p>工具同级目录，创建一个<code>ssh_commands.json</code>文件。用来存储配置信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Show Name &quot;</span>: &#123; <span class="comment"># 显示的名称</span></span><br><span class="line">        <span class="string">&quot;pem&quot;</span>: <span class="string">&quot;C:\\Users\\xxx\\Desktop\\pem\\VPN.pem&quot;</span>, <span class="comment"># PEM文件地址</span></span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;ubuntu@ec2-xxxxxx.ap-northeast-2.compute.amazonaws.com&quot;</span> <span class="comment"># 机器IP地址</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;Show Name2 &quot;</span>: &#123; <span class="comment"># 显示的名称</span></span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123123123&quot;</span>, <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;root@192.168.1.1&quot;</span> <span class="comment"># 机器IP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上传："><a href="#上传：" class="headerlink" title="上传："></a><strong>上传：</strong></h3><p>1、选择要上传的文件或文件夹。<br>2、在SSH连接中，选择目标机器，点击选择连接。<br>3、在远程文件中，输入目标机器的存储地址<br>4、点击上传。</p>
<h3 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h3><p>1、选择要下载到的文件夹地址，例如桌面。<br>2、在SSH连接中，选择源机器，点击选择连接。<br>3、在远程文件中，输入要下载的文件的地址。<br>4、点击下载。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>在新安装的Centos中安装python3.7 解决pip和yum问题</title>
    <url>/2021/03/29/python/%E5%9C%A8%E6%96%B0%E5%AE%89%E8%A3%85%E7%9A%84Centos%E4%B8%AD%E5%AE%89%E8%A3%85python3.7%20%E8%A7%A3%E5%86%B3pip%E5%92%8Cyum%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<div id="article_content" class="article_content clearfix">
        <link rel="stylesheet" href="https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css">
                <div id="content_views" class="htmledit_views">
                    <p>首先要先安装依赖包：</p> 
<pre class="has" name="code"><code class="hljs sql">yum <span class="hljs-keyword">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make
</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>cd到一个你想放在的地方，哪里都可以。接着找到python3.7的安装包：</p> 
<pre class="has" name="code"><code class="hljs apache"><span class="hljs-attribute">wget</span> https://www.python.org/ftp/python/<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>/Python-<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.tgz</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>现在这个.tgz文件就下载到了你现在目录中，接着解压：</p> 
<pre class="has" name="code"><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf Python-<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.tgz</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>然后此目录下就多出了一个解压后的文件Python-3.7.0，下面进入文件夹中：</p> 
<pre class="has" name="code"><code class="hljs go"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">cd&nbsp;Python<span class="hljs-number">-3.7</span><span class="hljs-number">.0</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">./configure</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">make</span>&amp;&amp;<span class="hljs-built_in">make</span> install</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>执行完make&amp;&amp;make install之后，可能会出现这种报错：</p> 
<pre class="has" name="code"><code class="hljs crystal">“ModuleNotFound：No <span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">named</span> '<span class="hljs-title">_ctypes</span>'”</span></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>这里需要执行：</p> 
<pre class="has" name="code"><code class="hljs sql">yum <span class="hljs-keyword">install</span> libffi-devel -y</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>执行完继续make&amp;&amp;make install</p> 
<p>这样，基本上python3.7我们就安装完成了，默认情况下，python3.7安装在/usr/local/bin/，这里为了使默认python变成python3，需要加一条软链接,并把之前的python命令改成python.bak：</p> 
<pre class="has" name="code"><code class="hljs groovy"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/python /</span>usr<span class="hljs-regexp">/bin/</span>python.bak</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python3 <span class="hljs-regexp">/usr/</span>bin/python</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>接着默认pip也是需要修改的，可以通过find / -name 'pip3'找到pip3的位置，同样的，加一条软链到bin里面：</p> 
<pre class="has" name="code"><code class="hljs groovy"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">mv <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/pip /</span>usr<span class="hljs-regexp">/bin/</span>pip.bak</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>pip3 <span class="hljs-regexp">/usr/</span>bin/pip</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p>既然把默认python改成了python3的版本，那么这时候yum就出问题了，因为yum貌似不支持python3，开发了这个命令的老哥也不打算继续写支持python3的版本了，所以，如果和python版本相关的文件就不要通过yum下载了，这里我们需要把yum默认的指向改为python2.7的版本，分别是两个文件，使用vi打开，输入i进行修改，修改完之后按esc键，然后输入":wq"，这就完成了修改并保存：</p> 
<pre class="has" name="code"><code class="hljs groovy">vi <span class="hljs-regexp">/usr/</span>libexec/urlgrabber-ext-down
</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p><img alt="" class="has" height="520" src="https://img-blog.csdn.net/20180809175937778?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyMTQyMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p> 
<pre class="has" name="code"><code class="hljs groovy">vi <span class="hljs-regexp">/usr/</span>bin/yum</code><div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}" onclick="hljs.copyCode(event)"></div></pre> 
<p><img alt="" class="has" height="381" src="https://img-blog.csdn.net/20180809180044293?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMyMTQyMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="488"></p> 
<p>自此，我们就完成了新安装的centos系统中的两个python版本的全部流程。</p> 
<p>在小黑框中输入python2则调起python2，输入python，则默认调起python3，pip2调起python2下的pip，pip调起python下的pip。</p>
                </div><div><div></div></div>
        </div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Superset 通过GLUE可视化s3、RDS、RedShift中的数据</title>
    <url>/2024/02/21/aws/Apache%20Superset%20%E9%80%9A%E8%BF%87GLUE%E5%8F%AF%E8%A7%86%E5%8C%96s3%E3%80%81RDS%E3%80%81RedShift%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="Superset部署"><a href="#Superset部署" class="headerlink" title="Superset部署"></a>Superset部署</h2><ul>
<li><a href="#superset%E9%83%A8%E7%BD%B2">Superset部署</a><ul>
<li><a href="#1%E5%90%AF%E5%8A%A8ec2">1、启动EC2</a><ul>
<li><a href="#12%E4%B8%8B%E8%BD%BDsuperset-docker%E6%96%87%E4%BB%B6">1.2、下载Superset Docker文件</a></li>
<li><a href="#13%E4%BF%AE%E6%94%B9dockerffile">1.3、修改Dockerffile</a></li>
<li><a href="#14%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98">1.4、配置管理员</a></li>
<li><a href="#15%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA">1.5、结果展示</a></li>
<li><a href="#16%E6%A3%80%E6%9F%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8">1.6、检查数据库驱动</a></li>
<li><a href="#17-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">1.7 、常见错误处理</a></li>
</ul>
</li>
<li><a href="#2glue%E5%8F%AF%E9%80%89%E5%8F%82%E8%80%83">2、Glue（可选参考）</a></li>
<li><a href="#3iam%E4%B8%8E%E5%AE%89%E5%85%A8%E7%BB%84">3、IAM与安全组</a><ul>
<li><a href="#31%E4%BD%BF%E7%94%A8-athena">3.1、使用 athena</a></li>
<li><a href="#32%E4%BD%BF%E7%94%A8redshift%E6%88%96rds">3.2、使用RedShift或RDS</a></li>
</ul>
</li>
<li><a href="#4superset%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%88%9B%E5%BB%BAdashboard">4、SUPERSET配置数据源并创建DASHBOARD</a><ul>
<li><a href="#41%E8%BF%9E%E6%8E%A5athena">4.1、连接Athena</a></li>
<li><a href="#42%E8%BF%9E%E6%8E%A5redshift">4.2、连接redshift</a></li>
</ul>
</li>
<li><a href="#5superset%E6%95%99%E7%A8%8B">5、Superset教程</a></li>
</ul>
</li>
</ul>
<h3 id="1、启动EC2"><a href="#1、启动EC2" class="headerlink" title="1、启动EC2"></a>1、启动EC2</h3><p>启动一台Amazon Linux EC2并安装启动docker环境，需要机型为t.xlarge及以上，EBS盘20GB以上。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo yum update <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install python3 gcc</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> python3 libpq<span class="literal">-dev</span> python3<span class="literal">-dev</span></span><br><span class="line">sudo yum install <span class="literal">-y</span> gcc gcc<span class="literal">-c</span>++</span><br><span class="line"></span><br><span class="line"><span class="comment"># add following into ~/.bashrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=/usr/local/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias python=python3&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias pip=pip3&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">python <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line">sudo yum <span class="literal">-y</span> install docker</span><br><span class="line">sudo usermod <span class="literal">-a</span> <span class="literal">-G</span> docker ec2<span class="literal">-user</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo chmod <span class="number">666</span> /var/run/docker.sock</span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker-compose</span></span><br><span class="line">sudo <span class="built_in">curl</span> <span class="literal">-L</span> <span class="string">&quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-<span class="variable">$</span>(uname -s)-<span class="variable">$</span>(uname -m)&quot;</span> <span class="literal">-o</span> /usr/local/bin/docker<span class="literal">-compose</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker<span class="literal">-compose</span></span><br><span class="line">sudo ln <span class="literal">-s</span> /usr/local/bin/docker<span class="literal">-compose</span> /usr/bin/docker<span class="literal">-compose</span></span><br><span class="line">docker<span class="literal">-compose</span> <span class="literal">--version</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2、下载Superset-Docker文件"><a href="#1-2、下载Superset-Docker文件" class="headerlink" title="1.2、下载Superset Docker文件"></a>1.2、下载Superset Docker文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo yum install <span class="literal">-y</span> git <span class="built_in">curl</span></span><br><span class="line">git clone https://github.com/apache/incubator<span class="literal">-superset</span>/</span><br></pre></td></tr></table></figure>
<h4 id="1-3、修改Dockerffile"><a href="#1-3、修改Dockerffile" class="headerlink" title="1.3、修改Dockerffile"></a>1.3、修改Dockerffile</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> incubator<span class="literal">-superset</span></span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure>
<p>在末尾添加</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">RUN pip install PyAthenaJDBC \    <span class="comment">#这个是athena连接</span></span><br><span class="line">        &amp;&amp; pip install PyAthena \ <span class="comment">#这个是athena连接</span></span><br><span class="line">        &amp;&amp; pip install psycopg2 \</span><br><span class="line">        &amp;&amp; pip install sqlalchemy<span class="literal">-redshift</span> <span class="comment"># 这个是redshift连接</span></span><br></pre></td></tr></table></figure>

<p>构建</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker<span class="literal">-compose</span> build</span><br><span class="line">docker<span class="literal">-compose</span> up</span><br></pre></td></tr></table></figure>
<h4 id="1-4、配置管理员"><a href="#1-4、配置管理员" class="headerlink" title="1.4、配置管理员"></a>1.4、配置管理员</h4><p>需要配置管理员用户权限，在docker&#x2F;docker-init.sh中默认创建用户admin（密码也是admin）但权限并没有更新，通过以下命令更新权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入docker</span></span><br><span class="line">docker<span class="literal">-compose</span> exec superset bash</span><br><span class="line">superset init</span><br></pre></td></tr></table></figure>
<h4 id="1-5、结果展示"><a href="#1-5、结果展示" class="headerlink" title="1.5、结果展示"></a>1.5、结果展示</h4><p>配置成功后，Superset默认使用8088端口，使用http:&#x2F;&#x2F;&lt;EC2 公有IP&gt;:8088访问，默认用户名和密码均为admin 可在Dockerfile、docker中命令、管理页面更改<br><img src="https://img-blog.csdnimg.cn/64463456b32a4b909c38bdf6d87a9024.png"></p>
<h4 id="1-6、检查数据库驱动"><a href="#1-6、检查数据库驱动" class="headerlink" title="1.6、检查数据库驱动"></a>1.6、检查数据库驱动</h4><p>查看数据库驱动是否安装成功<br><img src="https://img-blog.csdnimg.cn/0c77645858ab48efa8c1f37020799699.png"><br><img src="https://img-blog.csdnimg.cn/d1b4c52c3a294c1ea6ae0dcb8d1ceecd.png">若没有</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#进入docker</span></span><br><span class="line">docker<span class="literal">-compose</span> exec superset bash</span><br><span class="line"><span class="comment">#安装  athena 和redshift驱动</span></span><br><span class="line">pip install PyAthenaJDBC \</span><br><span class="line">        &amp;&amp; pip install PyAthena \</span><br><span class="line">        &amp;&amp; pip install psycopg2 \</span><br><span class="line">        &amp;&amp; pip install sqlalchemy<span class="literal">-redshift</span></span><br></pre></td></tr></table></figure>


<h4 id="1-7-、常见错误处理"><a href="#1-7-、常见错误处理" class="headerlink" title="1.7 、常见错误处理"></a>1.7 、常见错误处理</h4><p>build中如果出现error</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ERROR: Couldn<span class="string">&#x27;t connect to Docker daemon at http+docker://localunixsocket - is it running?</span></span><br></pre></td></tr></table></figure>
<p>原因：<br>1、docker 没有启动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure>
<p>2、用户不再docker用户组里面</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo gpasswd <span class="literal">-a</span> <span class="variable">$</span>&#123;USER&#125; docker</span><br></pre></td></tr></table></figure>
<p>如果是第二个，请退出shell 再次登陆</p>
<h3 id="2、Glue（可选参考）"><a href="#2、Glue（可选参考）" class="headerlink" title="2、Glue（可选参考）"></a>2、Glue（可选参考）</h3><p><a href="https://blog.csdn.net/Inplayable/article/details/126492674">一、创建Glue</a><br><a href="https://blog.csdn.net/Inplayable/article/details/126492661">二、数据清洗、转换</a></p>
<h3 id="3、IAM与安全组"><a href="#3、IAM与安全组" class="headerlink" title="3、IAM与安全组"></a>3、IAM与安全组</h3><p>部署Superset的EC2附加的IAM角色需要有 Athena查询和Glue Catalog的权限，为方便起见可以赋予AthenaFullAccess和GlueFullAccess。但实际情况请按照最小权限原则来保障安全。</p>
<h4 id="3-1、使用-athena"><a href="#3-1、使用-athena" class="headerlink" title="3.1、使用 athena"></a>3.1、使用 athena</h4><p>如果在 Amazon Athena 中运行查询时，出现 “Access Denied”（拒绝访问）错误</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Your query has the following errors:Access denied when writing output to url: s3://my<span class="literal">-athena-result-bucket</span>/Unsaved/<span class="number">2021</span>/<span class="number">05</span>/<span class="number">07</span>/example_query_ID.csv . Please ensure you are allowed to access the S3 bucket. <span class="keyword">If</span> you are encrypting query results with KMS key, please ensure you are allowed to access your KMS key</span><br></pre></td></tr></table></figure>
<p>向 IAM 用户授予所需的权限。以下 IAM 策略允许源数据存储桶和查询结果存储桶的最低权限：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:ListBucket&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::【数据源的s3名称】&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:GetObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::【数据源的s3名称】/*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;s3:GetBucketLocation&quot;,</span><br><span class="line">                &quot;s3:GetObject&quot;,</span><br><span class="line">                &quot;s3:ListBucket&quot;,</span><br><span class="line">                &quot;s3:ListBucketMultipartUploads&quot;,</span><br><span class="line">                &quot;s3:AbortMultipartUpload&quot;,</span><br><span class="line">                &quot;s3:PutObject&quot;,</span><br><span class="line">                &quot;s3:ListMultipartUploadParts&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;arn:aws:s3:::【存储Athena查询结果的s3名称】&quot;,</span><br><span class="line">                &quot;arn:aws:s3:::【存储Athena查询结果的s3名称】/*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请务必在此示例策略中替换【】中的内容</p>
<h4 id="3-2、使用RedShift或RDS"><a href="#3-2、使用RedShift或RDS" class="headerlink" title="3.2、使用RedShift或RDS"></a>3.2、使用RedShift或RDS</h4><p>此处以RedShift集群为例<br>I、查看redshift集群VPC安全组<br><img src="https://img-blog.csdnimg.cn/1883c5d93ead4a9ea7b5aabdb28aedff.png"><br>II、进入superset所在EC2实例安全组<br><img src="https://img-blog.csdnimg.cn/6f02af100d8e4436a2245840d0a45af9.png"><br><img src="https://img-blog.csdnimg.cn/139eebb147ce4c158adda2ef711dee91.png"><br>III、添加入站规则<br><img src="https://img-blog.csdnimg.cn/9b23aafa985d4eb7a2163729974c3425.png"><br><img src="https://img-blog.csdnimg.cn/b440d84fba564b2091c24a0eb1a838df.png"></p>
<h3 id="4、SUPERSET配置数据源并创建DASHBOARD"><a href="#4、SUPERSET配置数据源并创建DASHBOARD" class="headerlink" title="4、SUPERSET配置数据源并创建DASHBOARD"></a>4、SUPERSET配置数据源并创建DASHBOARD</h3><p>此处提供了Athena与RedShift的连接教程，其他JDBC语法请看官方文档</p>
<h4 id="4-1、连接Athena"><a href="#4-1、连接Athena" class="headerlink" title="4.1、连接Athena"></a>4.1、连接Athena</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">awsathena+rest://@athena.&#123;region&#125;.amazonaws.com.cn/&lt;Glue数据库表&gt;?s3_staging_dir=&lt;用来存储查询结果的S3地址&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/75fd67f37f18415885013e219cd031a8.png"><br>Test connection<br><img src="https://img-blog.csdnimg.cn/20738b25cc4e468e9ba72a4859439c4c.png"></p>
<h4 id="4-2、连接redshift"><a href="#4-2、连接redshift" class="headerlink" title="4.2、连接redshift"></a>4.2、连接redshift</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">redshift+psycopg2://&lt;userName&gt;:&lt;DBPassword&gt;<span class="selector-tag">@</span>&lt;AWS <span class="keyword">End</span> Point&gt;:&lt;port&gt;/&lt;Database Name&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2ad642e3a67c4847816acc679df7a2d7.png"><br>创建连接<br><img src="https://img-blog.csdnimg.cn/97e7912d179e4a4eb855fbd7114eb90e.png"><br><img src="https://img-blog.csdnimg.cn/df0caed9c2194c1cbd2bc8fc8bdfa104.png"><br><img src="https://img-blog.csdnimg.cn/a1bde9579fcb44f0bbf06389d48f9821.png"></p>
<h3 id="5、Superset教程"><a href="#5、Superset教程" class="headerlink" title="5、Superset教程"></a>5、Superset教程</h3><p><a href="https://blog.csdn.net/m0_37606374/article/details/120386913">简单教学</a><br><a href="https://superset.apache.org/docs/databases/installing-database-drivers">superset官方文档</a></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Glue连接RedShift的前置条件：创建终端节点</title>
    <url>/2022/08/25/aws/Glue%E8%BF%9E%E6%8E%A5RedShift%E7%9A%84%E5%89%8D%E7%BD%AE%E6%9D%A1%E4%BB%B6%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%BB%88%E7%AB%AF%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p><strong>进入vpc选择终端节点</strong><br><img src="https://img-blog.csdnimg.cn/1c5ee06c39614f90a6297d5a942039d2.png"><br><strong>创建</strong><br><img src="https://img-blog.csdnimg.cn/897f0145eabc445187756093a427e7dc.png"><br><img src="https://img-blog.csdnimg.cn/b842c93233764996b5e5559d5651e90a.png"><br><strong>选择redshift集群的vpc</strong><br>信息所在地：<br><img src="https://img-blog.csdnimg.cn/a49fa3e023e74226848d5ad0c195bdb7.png"><br><img src="https://img-blog.csdnimg.cn/5db14f5d9bc84eb29c318676d91cbbf7.png"><br><img src="https://img-blog.csdnimg.cn/d21c925c7087467a846eba31345eb331.png"><br><strong>选择redshift的子网所在路由表</strong><br><img src="https://img-blog.csdnimg.cn/6b87bb72c842458dbe67d5f2e7c3f498.png"><br><strong>创建</strong></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>使用aws Glue与kinesis 构建的流式ETL作业——一、数据实时采集</title>
    <url>/2022/09/09/aws/%E4%BD%BF%E7%94%A8aws%20Glue%E4%B8%8Ekinesis%20%E6%9E%84%E5%BB%BA%E7%9A%84%E6%B5%81%E5%BC%8FETL%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%97%B6%E9%87%87%E9%9B%86/</url>
    <content><![CDATA[<h2 id="一、数据采集准备工作"><a href="#一、数据采集准备工作" class="headerlink" title="一、数据采集准备工作"></a>一、数据采集准备工作</h2><ul>
<li><a href="#%E4%B8%80%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">一、数据采集准备工作</a><ul>
<li><a href="#11%E7%A0%94%E7%A9%B6%E7%9A%84%E8%83%8C%E6%99%AF">1.1、研究的背景</a></li>
<li><a href="#12%E4%BD%BF%E7%94%A8glue%E6%9E%84%E5%BB%BA%E6%B5%81%E5%BC%8Fetl%E7%9A%84%E5%8E%9F%E5%9B%A0">1.2、使用Glue构建流式ETL的原因</a></li>
<li><a href="#13%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E5%BC%8Fetl%E6%9E%B6%E6%9E%84">1.3、无服务器流式ETL架构</a></li>
<li><a href="#14%E7%AE%80%E6%98%93%E6%9E%B6%E6%9E%84">1.4、简易架构</a></li>
<li><a href="#15kinesis-data-stream%E5%88%9B%E5%BB%BA">1.5、Kinesis Data Stream创建</a></li>
<li><a href="#16cloudwatch%E6%95%B0%E6%8D%AE%E7%AD%9B%E9%80%89">1.6、CloudWatch数据筛选</a></li>
<li><a href="#17kds%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81">1.7、KDS中的数据验证</a></li>
<li><a href="#18%E6%80%BB%E7%BB%93">1.8、总结</a></li>
</ul>
</li>
<li><a href="#%E4%BD%9C%E8%80%85">作者</a></li>
</ul>
<h3 id="1-1、研究的背景"><a href="#1-1、研究的背景" class="headerlink" title="1.1、研究的背景"></a>1.1、研究的背景</h3><p>为了可以更高效的从项目的数据集中提取更有意义的数据，并进行统计分析。</p>
<h3 id="1-2、使用Glue构建流式ETL的原因"><a href="#1-2、使用Glue构建流式ETL的原因" class="headerlink" title="1.2、使用Glue构建流式ETL的原因"></a>1.2、使用Glue构建流式ETL的原因</h3><p>1、项目部署在AWS。<br>2、Amazon Glue中的流式ETL基于Apache Spark的结构化流引擎，该引擎提供一种高容错、可扩展且易于实现的方法，能够实现端到端的流处理。</p>
<h3 id="1-3、无服务器流式ETL架构"><a href="#1-3、无服务器流式ETL架构" class="headerlink" title="1.3、无服务器流式ETL架构"></a>1.3、无服务器流式ETL架构</h3><p>在此流式ETL架构中，将使用lambda模拟日志创建cloudwatch指标并将其以流的形式发布至Kinesis Data Streams当中。我们还将在Amazon Glue中创建一项流式ETL作业，该作业以微批次的形式获取连续生成的stream数据，对数据进行转换、聚合，并将结果传递至接收器，最终利用这部分结果显示可视化图表或在下游流程中继续使用。</p>
<h3 id="1-4、简易架构"><a href="#1-4、简易架构" class="headerlink" title="1.4、简易架构"></a>1.4、简易架构</h3><p><img src="https://img-blog.csdnimg.cn/8ac3b792ec034effb144e10c66782078.png"></p>
<h3 id="1-5、Kinesis-Data-Stream创建"><a href="#1-5、Kinesis-Data-Stream创建" class="headerlink" title="1.5、Kinesis Data Stream创建"></a>1.5、Kinesis Data Stream创建</h3><p>Kinesis Data Stream的用处？：实时捕获数据<br>从数十万个数据源提取并存储数据流:<br>&nbsp;&nbsp;&nbsp;&nbsp;日志和事件数据采集<br>&nbsp;&nbsp;&nbsp;&nbsp;IoT 设备数据捕获<br>&nbsp;&nbsp;&nbsp;&nbsp;移动数据采集<br>&nbsp;&nbsp;&nbsp;&nbsp;游戏数据源<br><font color="#ff0000">此案例中，我们将从CloudWatch中进行数据采集</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/674eba6985bf4b939c901144d071a0ec.png"></td>
</tr>
<tr>
<td><strong>2、创建（按需模式无需手动预置和扩展数据流）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/f7751d9bba43428e93593e785fbdc276.png"></td>
</tr>
</tbody></table>
<h3 id="1-6、CloudWatch数据筛选"><a href="#1-6、CloudWatch数据筛选" class="headerlink" title="1.6、CloudWatch数据筛选"></a>1.6、CloudWatch数据筛选</h3><p><font color="#ff00ff">前置条件：已准备好用来进行数据采集的CloudWatch</font><br>我们将会在某个CloudWatch日志组中创建<font color="#ff00">日志筛选条件</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/6ad849aae264404e9a1e16364fe4ddb6.png"></td>
</tr>
<tr>
<td><strong>2、选择上步中创建的KDS</strong></td>
<td><img src="https://img-blog.csdnimg.cn/666c7bfb6f584db0b7dd4c1358222870.png"></td>
</tr>
<tr>
<td><strong>3、IAM角色（需要有Kinesis Data Stream的权限）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/5f0628e9dbd145b78b5062e9e80cb98b.png">权限与实体见下方“IAM角色权限”</td>
</tr>
<tr>
<td><strong>4、配置筛选条件（可根据日志格式自定义）</strong>（<font color="#ff00ff">例如：图中配置为筛选包含”is_save_kinesis”的数据</font>）</td>
<td><img src="https://img-blog.csdnimg.cn/9a084f4a139647cb905e0d8f50d2b352.png"></td>
</tr>
<tr>
<td><strong>5、测试数据（可以选定某条日志流，或自定义数据进行测试结果显示）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/552cfc470dfb4449b9da71b2128d1b66.png"></td>
</tr>
<tr>
<td><strong>6、完成日志筛选条件创建（<font color="#f0f">每个日志组最多只能创建两条</font>）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/a84033ce693a47d48651a69a8d0cc2b0.png"></td>
</tr>
</tbody></table>
<p>IAM角色权限：<br>&nbsp;&nbsp;&nbsp;&nbsp;可信实体：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &#123;</span><br><span class="line">                &quot;Service&quot;: &quot;logs.【区域】.amazonaws.com&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Action&quot;: &quot;sts:AssumeRole&quot;,</span><br><span class="line">            &quot;Condition&quot;: &#123;</span><br><span class="line">                &quot;StringLike&quot;: &#123;</span><br><span class="line">                    &quot;aws:SourceArn&quot;: &quot;【CloudWatch的ARN】&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;策略：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;WriteOutputKinesis&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Action&quot;: [</span><br><span class="line">                &quot;kinesis:DescribeStream&quot;,</span><br><span class="line">                &quot;kinesis:PutRecord&quot;,</span><br><span class="line">                &quot;kinesis:PutRecords&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Resource&quot;: [</span><br><span class="line">                &quot;【Kinesis Data Stream的ARN】&quot;</span><br><span class="line">                </span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="1-7、KDS中的数据验证"><a href="#1-7、KDS中的数据验证" class="headerlink" title="1.7、KDS中的数据验证"></a>1.7、KDS中的数据验证</h3><p><font color="#f0f">前置条件：一个已绑定上 以Kinesis作为触发器的Lambda实例</font><br><font color="#f00">此案例也可使用Lambda来实现数据流的处理。每当Kinesis Data Stream中传入数据时，就会触发绑定了KDS的Lambda，有Lambda来清洗、转换、存储数据。</font><br>在我们向该CloudWatch中发送一条日志数据后，将会在Kinesis Data Stream控制台监控到数据的流入<br><img src="https://img-blog.csdnimg.cn/14eb4f74c1ff45a9b7e6bb204714cc90.png"><br><img src="https://img-blog.csdnimg.cn/b4e140bf32334b74846ee3a72e480e62.png"><br>接下来，我们将会验证解析一下Kinesis Data Stream中的数据与格式。<br>原始数据存储在event.Records[0].kinesis.data中（下一步的ETL工作中，我们会从此处获取数据）<br>验证代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line"></span><br><span class="line">    raw_kinesis_records = event[<span class="string">&#x27;Records&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># records = deaggregate_records(raw_kinesis_records)</span></span><br><span class="line">    records = raw_kinesis_records</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> records:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is record&quot;</span>)</span><br><span class="line">        <span class="comment">#Kinesis data is base64 encoded so decode here</span></span><br><span class="line">        payload=base64.b64decode(record[<span class="string">&quot;kinesis&quot;</span>][<span class="string">&quot;data&quot;</span>],validate=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        data = gzip.decompress(payload).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		<span class="built_in">print</span>(data)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong><br><font color="#f0f">&nbsp;&nbsp;&nbsp;&nbsp;其中的message为我们的原始数据的<font color="#f00">字符串</font></font><br><img src="https://img-blog.csdnimg.cn/806dc97c2cda4b66b501224cd680086a.png"></p>
<h3 id="1-8、总结"><a href="#1-8、总结" class="headerlink" title="1.8、总结"></a>1.8、总结</h3><p>在此案例中，我们使用了CloudWatch + Kinesis Data Stream完成了前期的数据实时采集的工作，并且，使用了Lambda来作为触发器来对数据进行了一个验证操作（也可使用Lambda来进行ETL工作）。</p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Zikuo Su</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>基于AWS Batch的量化回测系统</title>
    <url>/2024/02/21/aws/%E5%9F%BA%E4%BA%8EAWS%20Batch%E7%9A%84%E9%87%8F%E5%8C%96%E5%9B%9E%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="1-Amazon-SageMaker"><a href="#1-Amazon-SageMaker" class="headerlink" title="1 Amazon SageMaker"></a>1 Amazon SageMaker</h1><ul>
<li><a href="#1-amazon-sagemaker">1 Amazon SageMaker</a><ul>
<li><a href="#11-%E5%88%9B%E5%BB%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%9E%E4%BE%8B">1.1 创建笔记本实例</a></li>
<li><a href="#12-%E4%B8%8A%E4%BC%A0ipynb">1.2 上传ipynb</a></li>
<li><a href="#13-%E8%BF%9B%E5%85%A5%E5%AE%9E%E4%BE%8B">1.3 进入实例</a></li>
<li><a href="#14-%E9%80%89%E6%8B%A9jupyterlab%E8%A7%A3%E9%87%8A%E5%99%A8%E8%AF%AD%E8%A8%80">1.4 选择JupyterLab解释器语言</a></li>
<li><a href="#15-%E4%BF%AE%E6%94%B9iam%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90">1.5 修改IAM角色权限</a></li>
<li><a href="#16-%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">1.6 执行代码</a></li>
</ul>
</li>
<li><a href="#2-aws-batch">2 AWS Batch</a><ul>
<li><a href="#21-%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83">2.1 创建计算环境</a></li>
<li><a href="#22-%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97">2.2 创建任务队列</a></li>
<li><a href="#23-%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1%E5%AE%9A%E4%B9%89">2.3 创建任务定义</a></li>
<li><a href="#24-%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1">2.4 创建执行任务</a></li>
<li><a href="#25-%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">2.5 执行结果</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
<li><a href="#%E4%BD%9C%E8%80%85">作者</a></li>
</ul>
<h2 id="1-1-创建笔记本实例"><a href="#1-1-创建笔记本实例" class="headerlink" title="1.1 创建笔记本实例"></a>1.1 创建笔记本实例</h2><p><a href="https://ap-northeast-1.console.aws.amazon.com/sagemaker/home?region=ap-northeast-1#/notebook-instances">Amazon SageMaker Notebook</a> 实例是一个用来进行机器学习 (ML) 计算实例，用来运行Jupyter Notebook 应用程序。我们可以在其网页中交互式的编写代码和运行代码，并且可以直接返回逐段代码的运行结果。<br>接下来，我们将会创建一个笔记本实例。<br>输入笔记本实例名称。<br><img src="https://img-blog.csdnimg.cn/e668dc2773dc4d93b4909c2a5421c138.png"><br>对于<a href="https://us-east-1.console.aws.amazon.com/iamv2/home#/roles">IAM角色</a>，我们可以选择创建新角色<br><img src="https://img-blog.csdnimg.cn/ce890652a08c44758369e7053ba196cb.png"><br>最后，点击创建笔记本实例。</p>
<h2 id="1-2-上传ipynb"><a href="#1-2-上传ipynb" class="headerlink" title="1.2 上传ipynb"></a>1.2 上传ipynb</h2><p><a href="https://gitee.com/where-is-my-diao-chan/public_document_collection/blob/master/aws_files/backtest%20(1).ipynb">demo文件git地址</a><br>打开 <a href="https://ap-northeast-1.console.aws.amazon.com/sagemaker/home?region=ap-northeast-1#/notebook-instances">Jupyter</a><br><img src="https://img-blog.csdnimg.cn/1baaf54010ad434fb289c99164373307.png"><br>上传ipynb文件<br><img src="https://img-blog.csdnimg.cn/6d8dd7ba597d41bc863454fe607248ba.png"></p>
<h2 id="1-3-进入实例"><a href="#1-3-进入实例" class="headerlink" title="1.3 进入实例"></a>1.3 进入实例</h2><p><img src="https://img-blog.csdnimg.cn/1b58464e5d964a44a7f31bf8559eff71.png"></p>
<h2 id="1-4-选择JupyterLab解释器语言"><a href="#1-4-选择JupyterLab解释器语言" class="headerlink" title="1.4 选择JupyterLab解释器语言"></a>1.4 选择JupyterLab解释器语言</h2><p>选择使用”conda_python3”。<br><img src="https://img-blog.csdnimg.cn/0bb13f1c8a914a39bed6b191866cd04a.png"></p>
<h2 id="1-5-修改IAM角色权限"><a href="#1-5-修改IAM角色权限" class="headerlink" title="1.5 修改IAM角色权限"></a>1.5 修改IAM角色权限</h2><p>eg: 为了方便测试，暂时先赋予全部权限。（生产环境中要严格遵从最小权限原则。）</p>
<p>找到我们“1.1.1 创建笔记本实例”中创建的<a href="https://us-east-1.console.aws.amazon.com/iamv2/home#/roles">IAM角色</a>，为此角色赋予以下权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;ecr:GetRegistryPolicy&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:CreateRepository&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:DescribeRegistry&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:DescribePullThroughCacheRules&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:GetAuthorizationToken&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:PutRegistryScanningConfiguration&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:CreatePullThroughCacheRule&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:DeletePullThroughCacheRule&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:PutRegistryPolicy&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:GetRegistryScanningConfiguration&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:BatchImportUpstreamImage&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:DeleteRegistryPolicy&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ecr:PutReplicationConfiguration&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;ecr:*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:ecr:【aws_region】:【aws_account_id】:repository/【repository_name】&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-执行代码"><a href="#1-6-执行代码" class="headerlink" title="1.6 执行代码"></a>1.6 执行代码</h2><p>使用“Shift+Enter”组合键来执行当前选择的代码块。执行结果将会在代码块下方展示。<br><img src="https://img-blog.csdnimg.cn/a41e4564bfa149ccb9c90399dd532f1b.png"></p>
<p>当我们执行完“将容器推送到远程的ECR镜像仓库”的代码后，我们将会在<a href="https://us-west-2.console.aws.amazon.com/ecr/repositories?region=us-west-2">Amazon ECR</a>中看到我们创建的镜像仓库。<br><img src="https://img-blog.csdnimg.cn/7502bdedfa724adaba72438ffc0a54f4.png"><br><img src="https://img-blog.csdnimg.cn/df33f2d3ba0d4eb985491abf4678edc9.png"></p>
<h1 id="2-AWS-Batch"><a href="#2-AWS-Batch" class="headerlink" title="2 AWS Batch"></a>2 AWS Batch</h1><p>Batch 可以帮助我们在 AWS 云上运行批量计算工作负载。</p>
<h2 id="2-1-创建计算环境"><a href="#2-1-创建计算环境" class="headerlink" title="2.1 创建计算环境"></a>2.1 创建计算环境</h2><p>前往<a href="https://ap-northeast-1.console.aws.amazon.com/batch/home?region=ap-northeast-1#compute-environments">Batch</a> 创建计算环境。<br><img src="https://img-blog.csdnimg.cn/0246adbab07a4c3db874aaa3ba32b572.png"></p>
<p>输入计算环境名称<br><img src="https://img-blog.csdnimg.cn/7a7e3fbf660c4ae2812f24040b92aa37.png"><br>实例配置请根据实际情况进行配置。<br><img src="https://img-blog.csdnimg.cn/e8acb75dbd2c4058853ca955c2f671d5.png"><br>联网默认即可<br><img src="https://img-blog.csdnimg.cn/57b3b1761d984fe5a94c426c45b0d978.png"><br>完成创建。</p>
<h2 id="2-2-创建任务队列"><a href="#2-2-创建任务队列" class="headerlink" title="2.2 创建任务队列"></a>2.2 创建任务队列</h2><p><img src="https://img-blog.csdnimg.cn/33c1a3987f31466c9de7c59f05edc80f.png"><br>输入作业队列名称<br><img src="https://img-blog.csdnimg.cn/7c4b5afe8eb744eb887bb19d0496d6d7.png"><br>连接的计算环境，请选择上一步创建的计算环境<br><img src="https://img-blog.csdnimg.cn/c74491028725456bbcfc88ae8b3abeec.png"><br>完成创建。</p>
<h2 id="2-3-创建任务定义"><a href="#2-3-创建任务定义" class="headerlink" title="2.3 创建任务定义"></a>2.3 创建任务定义</h2><p><img src="https://img-blog.csdnimg.cn/dce04efeeb3a47aba76f5908a5a668b2.png"><br>任务类型我们选择单节点<br><img src="https://img-blog.csdnimg.cn/c41e88e1afea4157b0ada0a8d6072df1.png"><br>输入名称与超时时间<br><img src="https://img-blog.csdnimg.cn/1c42d870d24c45d58aaee1470d93cd78.png"><br>选择使用Fargate作为运行环境，并开启分配公共IP。<br><img src="https://img-blog.csdnimg.cn/ae1494cbd29f4735968be855a0faf9a0.png"><br>进入<a href="https://ap-northeast-1.console.aws.amazon.com/ecr/repositories?region=ap-northeast-1">ECR</a>，选择我们刚才创建的镜像仓库，复制其ARN。<br><img src="https://img-blog.csdnimg.cn/ab743662582c4f5dacdc87ad843011c0.png"><br>返回创建，输入映像与命令<br>命令：python backtest.py 【数据源所在S3桶名】 【要回测的源数据文件名】 【结果存储S3桶名】<br><img src="https://img-blog.csdnimg.cn/e6a6d5a60cec449dae37dc47046d4468.png"><br>输入重试次数<br><img src="https://img-blog.csdnimg.cn/265042dc8cc7469ba140cd7270203597.png"><br>完成创建。</p>
<h2 id="2-4-创建执行任务"><a href="#2-4-创建执行任务" class="headerlink" title="2.4 创建执行任务"></a>2.4 创建执行任务</h2><p><img src="https://img-blog.csdnimg.cn/9eabb2adfb464b538fe3a942ddebac12.png"><br>输入作业名称与运行的作业队列，其他保持默认即可。<br><img src="https://img-blog.csdnimg.cn/81e2a927cfb444f79568fbfe7e4940e1.png"><br>提交任务。等待作业执行。</p>
<h2 id="2-5-执行结果"><a href="#2-5-执行结果" class="headerlink" title="2.5 执行结果"></a>2.5 执行结果</h2><p><img src="https://img-blog.csdnimg.cn/9038f7c9ab1f4f5da831284a2de556a3.png"><br><img src="https://img-blog.csdnimg.cn/976b5228610c4788916fa2bcec11ea47.png"></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://aws.amazon.com/cn/blogs/china/building-a-quantitative-backtesting-system-based-on-aws-batch/?nc1=h_ls">https://aws.amazon.com/cn/blogs/china/building-a-quantitative-backtesting-system-based-on-aws-batch/?nc1=h_ls</a></p>
<h1 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h1><p>ZiKuo Su</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>量化回测</tag>
      </tags>
  </entry>
  <entry>
    <title>使用aws Glue与kinesis 构建的流式ETL作业——二、数据处理</title>
    <url>/2022/09/09/aws/%E4%BD%BF%E7%94%A8aws%20Glue%E4%B8%8Ekinesis%20%E6%9E%84%E5%BB%BA%E7%9A%84%E6%B5%81%E5%BC%8FETL%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h1><ul>
<li><a href="#%E4%BA%8C%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">二、数据处理</a><ul>
<li><a href="#21%E7%AE%80%E6%98%93%E6%9E%B6%E6%9E%84">2.1、简易架构</a></li>
<li><a href="#22glue%E8%BF%9E%E6%8E%A5%E5%88%9B%E5%BB%BA">2.2、Glue连接创建</a><ul>
<li><a href="#221-%E5%88%9B%E5%BB%BAredshift%E8%BF%9E%E6%8E%A5">2.2.1、 创建RedShift连接</a></li>
<li><a href="#222%E5%88%9B%E5%BB%BArds%E8%BF%9E%E6%8E%A5%E4%BB%A5pg%E4%B8%BA%E4%BE%8B">2.2.2、创建RDS连接（以PG为例）</a></li>
</ul>
</li>
<li><a href="#23glue-job%E5%88%9B%E5%BB%BA">2.3、Glue Job创建</a></li>
<li><a href="#24%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC">2.4、编写脚本</a><ul>
<li><a href="#241-%E4%BB%A5redshift%E4%B8%BA%E4%BE%8B">2.4.1 、以RedShift为例</a></li>
<li><a href="#242%E4%BB%A5pg%E4%B8%BA%E4%BE%8B">2.4.2、以PG为例</a></li>
</ul>
</li>
<li><a href="#25%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC">2.5、运行脚本</a></li>
</ul>
</li>
</ul>
<h2 id="2-1、简易架构"><a href="#2-1、简易架构" class="headerlink" title="2.1、简易架构"></a>2.1、简易架构</h2><p><img src="https://img-blog.csdnimg.cn/1360fcc5a85c48fba2cfef007dce92b1.png"></p>
<h2 id="2-2、Glue连接创建"><a href="#2-2、Glue连接创建" class="headerlink" title="2.2、Glue连接创建"></a>2.2、Glue连接创建</h2><p><font color="#f00">此处提供了RedShift和PG数据库的连接创建过程，请自行选择。</p>
<h3 id="2-2-1、-创建RedShift连接"><a href="#2-2-1、-创建RedShift连接" class="headerlink" title="2.2.1、 创建RedShift连接"></a>2.2.1、 创建RedShift连接</h3><p><font color="#f0f">前置条件：需要有一台RedShift实例<br>此处跳过了RedShift的创建过程，RedShift需要创建一个终端节点，请看：<a href="https://blog.csdn.net/wmjf1/article/details/126530492">Glue连接RedShift的前置条件：创建终端节点</a></font><br>由于Glue Job 在运行的时候，是在独立的服务器上，因此不能直接访问到私有子网中的服务，所以，借助Glue连接，可以使得Job在运行时连接AWS服务。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、创建连接</td>
<td><img src="https://img-blog.csdnimg.cn/43353ccf477b41d2a5e4cd10e6eea4fc.png"></td>
</tr>
<tr>
<td>2、输入连接名称，连接类型选择“Amazon Redshift”</td>
<td><img src="https://img-blog.csdnimg.cn/676b4df68dac41bcb5a2f9a184a63021.png"></td>
</tr>
<tr>
<td>3、选择RedShift集群，输入配置的用户名密码</td>
<td><img src="https://img-blog.csdnimg.cn/682c8589dedf412b97fb990fc07f39a1.png"></td>
</tr>
<tr>
<td>4、审核</td>
<td><img src="https://img-blog.csdnimg.cn/50a16f85b6444b91b6cc0c549388d20d.png"></td>
</tr>
<tr>
<td>5、测试连接</td>
<td><img src="https://img-blog.csdnimg.cn/be7eedf8d9a945b3a161e63554fc635c.png"></td>
</tr>
</tbody></table>
<h3 id="2-2-2、创建RDS连接（以PG为例）"><a href="#2-2-2、创建RDS连接（以PG为例）" class="headerlink" title="2.2.2、创建RDS连接（以PG为例）"></a>2.2.2、创建RDS连接（以PG为例）</h3><table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、入口</td>
<td><img src="https://img-blog.csdnimg.cn/43353ccf477b41d2a5e4cd10e6eea4fc.png#pic_center"></td>
</tr>
<tr>
<td>2 、输入连接名称，连接类型选择“JDBC”</td>
<td><img src="https://img-blog.csdnimg.cn/41d23a3d24e04269a3496861298a817e.png"></td>
</tr>
<tr>
<td>3、输入连接PG的JDBC，语法请看<a href="https://docs.aws.amazon.com/glue/latest/dg/console-connections.html?icmpid=docs_glue_console">使用连接</a>，输入用户名密码，VPC和子网需要选择PG的VPC和子网。并且至少一个选定的安全组必须为所有 TCP 端口指定自引用入站规则</td>
<td><img src="https://img-blog.csdnimg.cn/ad9087765a3647f9aec6a12bf4e45040.png"></td>
</tr>
<tr>
<td>4、检查无误后完成</td>
<td><img src="https://img-blog.csdnimg.cn/9095d97e2fb54fc7add4f014137e76d9.png"></td>
</tr>
</tbody></table>
<h2 id="2-3、Glue-Job创建"><a href="#2-3、Glue-Job创建" class="headerlink" title="2.3、Glue Job创建"></a>2.3、Glue Job创建</h2><table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、入口</td>
<td><img src="https://img-blog.csdnimg.cn/73f19ad73e6c4e18830167fcab22b33e.png"></td>
</tr>
<tr>
<td>2、若要在Job中引入其他python包，请在安全配置里面添加作业参数：<font color="#f00">–additional-python-modules：SQLAlchemy&#x3D;&#x3D; 1.3.16,psycopg2-binary&#x3D;&#x3D;2.8.5(值请自定义)</font></td>
<td><img src="https://img-blog.csdnimg.cn/2a25505a0afa4fbe94210c96686b533f.png"></td>
</tr>
<tr>
<td>3</td>
<td><img src="https://img-blog.csdnimg.cn/e405270af37445f2a1de655735a735d9.png"></td>
</tr>
</tbody></table>
<h2 id="2-4、编写脚本"><a href="#2-4、编写脚本" class="headerlink" title="2.4、编写脚本"></a>2.4、编写脚本</h2><h4 id="2-4-1-、以RedShift为例"><a href="#2-4-1-、以RedShift为例" class="headerlink" title="2.4.1 、以RedShift为例"></a>2.4.1 、以RedShift为例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> DataFrame, Row</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.transforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> awsglue <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">args = getResolvedOptions(sys.argv, [<span class="string">&#x27;TempDir&#x27;</span>,<span class="string">&#x27;JOB_NAME&#x27;</span>])</span><br><span class="line"></span><br><span class="line">sc = SparkContext()</span><br><span class="line">glueContext = GlueContext(sc)</span><br><span class="line">spark = glueContext.spark_session</span><br><span class="line">job = Job(glueContext)</span><br><span class="line">job.init(args[<span class="string">&#x27;JOB_NAME&#x27;</span>], args)</span><br><span class="line">sourceData = glueContext.create_data_frame.from_catalog( \</span><br><span class="line">    database = <span class="string">&quot;【你的数据库名称】&quot;</span>, \ </span><br><span class="line">    table_name = <span class="string">&quot;【表的名称】&quot;</span>, \</span><br><span class="line">    transformation_ctx = <span class="string">&quot;datasource0&quot;</span>, \</span><br><span class="line">    additional_options = &#123;<span class="string">&quot;startingPosition&quot;</span>: <span class="string">&quot;TRIM_HORIZON&quot;</span>, <span class="string">&quot;inferSchema&quot;</span>: <span class="string">&quot;true&quot;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">LINCAN_SHARE_PAGE = <span class="string">&quot;lincan_share_page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">share_page_dot = [</span><br><span class="line">    (<span class="string">&quot;url&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;url&quot;</span>,<span class="string">&quot;string&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;ip&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;ip&quot;</span>,<span class="string">&quot;string&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;country&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;country&quot;</span>,<span class="string">&quot;string&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;city&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;city&quot;</span>,<span class="string">&quot;string&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user_id&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;user_id&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;dot_type&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;dot_type&quot;</span>,<span class="string">&quot;string&quot;</span>), </span><br><span class="line">    (<span class="string">&quot;header&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;header&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;header_appname&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;header_appname&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;header_ismobile&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;header_ismobile&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;header_appversion&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;header_appversion&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;header_useragent&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;header_useragent&quot;</span>,<span class="string">&quot;string&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;content&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;content&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;content_url&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;content_url&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;content_index&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;content_index&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;content_title&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;content_title&quot;</span>,<span class="string">&quot;string&quot;</span>),  </span><br><span class="line">    (<span class="string">&quot;create_time&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;create_time&quot;</span>,<span class="string">&quot;timestamp&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_connect</span>(<span class="params">table</span>):</span><br><span class="line">    connection_options = &#123;</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;jdbc:redshift://【RedShift终端节点】:5439/dev&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: <span class="string">&quot;【RedShift用户名】&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;【数据库】&#x27;</span>, </span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;【密码】&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dbtable&quot;</span>:table,</span><br><span class="line">        <span class="string">&quot;redshiftTmpDir&quot;</span>:  args[<span class="string">&quot;TempDir&quot;</span>]</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">return</span> connection_options</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,dynamic_frame</span>):</span><br><span class="line">        self._time_now = datetime.datetime.utcnow().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        self.dynamic_frame = dynamic_frame</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SharePageDot</span>(<span class="title class_ inherited__">Handle</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start share_page dot&quot;</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">rec</span>):</span><br><span class="line">            message = <span class="built_in">eval</span>(rec[<span class="string">&quot;logEvents.val.message&quot;</span>])</span><br><span class="line">            message[<span class="string">&quot;header_appname&quot;</span>] = message[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;appName&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;header_ismobile&quot;</span>] = message[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;isMobile&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;header_appversion&quot;</span>] = message[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;appVersion&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;header_useragent&quot;</span>] = message[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;userAgent&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;header&quot;</span>] = json.dumps(message[<span class="string">&quot;header&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            message[<span class="string">&quot;content_url&quot;</span>] = message[<span class="string">&quot;content&quot;</span>][<span class="string">&quot;url&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;content_index&quot;</span>] = message[<span class="string">&quot;content&quot;</span>][<span class="string">&quot;index&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;content_title&quot;</span>] = message[<span class="string">&quot;content&quot;</span>][<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            message[<span class="string">&quot;content&quot;</span>] = json.dumps(message[<span class="string">&quot;content&quot;</span>])</span><br><span class="line">            message[<span class="string">&quot;create_time&quot;</span>] = datetime.datetime.utcnow().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">            <span class="comment"># message[&quot;create_time&quot;] = time.time()</span></span><br><span class="line">            <span class="keyword">return</span> message</span><br><span class="line">        self.dynamic_frame.printSchema()</span><br><span class="line">        mapped_dyF =  Map.apply(frame = self.dynamic_frame, f = handle)</span><br><span class="line">        mapped_dyF.printSchema()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mapped_dyF:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        applymapping0 = ApplyMapping.apply(frame = mapped_dyF, mappings = share_page_dot, transformation_ctx = <span class="string">&quot;applymapping0&quot;</span>)</span><br><span class="line">        datasink1 = glueContext.write_dynamic_frame.from_jdbc_conf(frame = applymapping0, catalog_connection = <span class="string">&quot;redshift&quot;</span>, connection_options = get_connect(<span class="string">&quot;share_page_dot&quot;</span>),redshift_tmp_dir= args[<span class="string">&quot;TempDir&quot;</span>], transformation_ctx=<span class="string">&quot;datasink1&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end share_page dot&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">processBatch</span>(<span class="params">data_frame, batchId</span>):</span><br><span class="line">    <span class="keyword">if</span> (data_frame.count() &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        logEvents = DynamicFrame.fromDF(data_frame, glueContext, <span class="string">&quot;from_data_frame&quot;</span>).select_fields(<span class="string">&quot;logEvents&quot;</span>)</span><br><span class="line">        dyf_relationize  = logEvents.relationalize(<span class="string">&quot;logEvents&quot;</span>,args[<span class="string">&quot;TempDir&quot;</span>]+<span class="string">&quot;/relationalize&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        dyf_selectFromCollection = SelectFromCollection.apply(dyf_relationize, <span class="string">&#x27;logEvents_logEvents&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 筛选</span></span><br><span class="line">        sac_or_mon_dyF = Filter.apply(frame = dyf_selectFromCollection, f = <span class="keyword">lambda</span> x: x[<span class="string">&quot;logEvents.val.id&quot;</span>]!=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># page dot</span></span><br><span class="line">        page_dot = Filter.apply(frame = sac_or_mon_dyF, f = <span class="keyword">lambda</span> x: <span class="built_in">eval</span>(x[<span class="string">&quot;logEvents.val.message&quot;</span>])[<span class="string">&quot;dot_type&quot;</span>]==LINCAN_PAGE_DOT)</span><br><span class="line">        <span class="comment"># active dot</span></span><br><span class="line">        active_dot = Filter.apply(frame = sac_or_mon_dyF, f = <span class="keyword">lambda</span> x: <span class="built_in">eval</span>(x[<span class="string">&quot;logEvents.val.message&quot;</span>])[<span class="string">&quot;dot_type&quot;</span>]==LINCAN_ACTIVE_DOT)</span><br><span class="line">        <span class="comment"># share page dot</span></span><br><span class="line">        share_page = Filter.apply(frame = sac_or_mon_dyF, f = <span class="keyword">lambda</span> x: <span class="built_in">eval</span>(x[<span class="string">&quot;logEvents.val.message&quot;</span>])[<span class="string">&quot;dot_type&quot;</span>]==LINCAN_SHARE_PAGE)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#if page_dot.count()&gt;0 :</span></span><br><span class="line">        <span class="comment">#    PageDot(page_dot).run()</span></span><br><span class="line">        <span class="comment">#if active_dot.count()&gt;0:</span></span><br><span class="line">         <span class="comment">#   ActiveDot(active_dot).run()</span></span><br><span class="line">        <span class="keyword">if</span> share_page.count()&gt;<span class="number">0</span>:</span><br><span class="line">            SharePageDot(share_page).run()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">glueContext.forEachBatch(frame = sourceData, batch_function = processBatch, options = &#123;<span class="string">&quot;windowSize&quot;</span>: <span class="string">&quot;100 seconds&quot;</span>,  <span class="string">&quot;checkpointLocation&quot;</span>: args[<span class="string">&quot;TempDir&quot;</span>] + <span class="string">&quot;/checkpoint/&quot;</span>&#125;)</span><br><span class="line">job.commit()</span><br></pre></td></tr></table></figure>
<h4 id="2-4-2、以PG为例"><a href="#2-4-2、以PG为例" class="headerlink" title="2.4.2、以PG为例"></a>2.4.2、以PG为例</h4><p>说明：在此脚本中，引入了python其他的包。写入PG使用的是sqlalchemy，是为了实现有则更新，无则写入的操作。若无特殊要求，可参考 “2.4.1”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> DataFrame, Row</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.transforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> awsglue <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.automap <span class="keyword">import</span> automap_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects.postgresql <span class="keyword">import</span> insert</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects <span class="keyword">import</span> postgresql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">args = getResolvedOptions(sys.argv, [<span class="string">&#x27;TempDir&#x27;</span>, <span class="string">&#x27;JOB_NAME&#x27;</span>])</span><br><span class="line"></span><br><span class="line">sc = SparkContext()</span><br><span class="line">glueContext = GlueContext(sc)</span><br><span class="line">spark = glueContext.spark_session</span><br><span class="line">job = Job(glueContext)</span><br><span class="line">job.init(args[<span class="string">&#x27;JOB_NAME&#x27;</span>], args)</span><br><span class="line"></span><br><span class="line">sourceData = glueContext.create_data_frame.from_catalog( \</span><br><span class="line">    database = <span class="string">&quot;【你的数据库名称】&quot;</span>, \ </span><br><span class="line">    table_name = <span class="string">&quot;【表的名称】&quot;</span>, \</span><br><span class="line">    transformation_ctx = <span class="string">&quot;datasource0&quot;</span>, \</span><br><span class="line">    additional_options = &#123;<span class="string">&quot;startingPosition&quot;</span>: <span class="string">&quot;TRIM_HORIZON&quot;</span>, <span class="string">&quot;inferSchema&quot;</span>: <span class="string">&quot;true&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DBWrite</span>:</span><br><span class="line">    url = <span class="string">&#x27;postgresql+psycopg2://【user+passsword@PG终端节点】:5432/crowd&#x27;</span></span><br><span class="line">    base = <span class="literal">None</span></span><br><span class="line">    session = <span class="literal">None</span></span><br><span class="line">    engine = <span class="literal">None</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">cls</span>):</span><br><span class="line"></span><br><span class="line">        cls.engine = sqlalchemy.create_engine(cls.url)</span><br><span class="line">        metadata = sqlalchemy.schema.MetaData(bind=cls.engine)</span><br><span class="line">        metadata.reflect(cls.engine, schema=<span class="string">&quot;public&quot;</span>)</span><br><span class="line">        cls.base = automap_base(metadata=metadata)</span><br><span class="line">        cls.base.prepare()</span><br><span class="line">        cls.session = sessionmaker(bind=cls.engine)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">DBWrite.execute()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">processBatch</span>(<span class="params">data_frame, batchId</span>):</span><br><span class="line">    <span class="keyword">if</span> (data_frame.count() &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>,<span class="built_in">str</span>(datetime.datetime.now()))</span><br><span class="line">        session = DBWrite.session()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">save_to_pg</span>(<span class="params">row</span>):</span><br><span class="line">            row = json.loads(row)</span><br><span class="line">            insert_data = &#123;</span><br><span class="line">                <span class="string">&quot;create_time&quot;</span>: row[<span class="string">&quot;create_time&quot;</span>],</span><br><span class="line">                <span class="string">&quot;update_time&quot;</span>: row[<span class="string">&quot;update_time&quot;</span>],</span><br><span class="line">                <span class="string">&quot;valid&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&quot;crowd_type&quot;</span>: row[<span class="string">&quot;crowd_type&quot;</span>],</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: row[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                <span class="string">&quot;support_num&quot;</span>: row[<span class="string">&quot;support_num&quot;</span>],</span><br><span class="line">                <span class="string">&quot;target_amount&quot;</span>: row[<span class="string">&quot;target_amount&quot;</span>],</span><br><span class="line">                <span class="string">&quot;status&quot;</span>: row[<span class="string">&quot;status&quot;</span>],</span><br><span class="line">                <span class="string">&quot;surplus_day&quot;</span>: row[<span class="string">&quot;surplus_day&quot;</span>],</span><br><span class="line">                <span class="string">&quot;crowd_category&quot;</span>: row[<span class="string">&quot;crowd_category&quot;</span>],</span><br><span class="line">                <span class="string">&quot;current_amount&quot;</span>: row[<span class="string">&quot;current_amount&quot;</span>],</span><br><span class="line">                <span class="string">&quot;address&quot;</span>: row[<span class="string">&quot;address&quot;</span>],</span><br><span class="line">                <span class="string">&quot;author&quot;</span>: row[<span class="string">&quot;author&quot;</span>],</span><br><span class="line">                <span class="string">&quot;image&quot;</span>: row[<span class="string">&quot;image&quot;</span>],</span><br><span class="line">                <span class="string">&quot;comment_num&quot;</span>: row[<span class="string">&quot;comment_num&quot;</span>],</span><br><span class="line">                <span class="string">&quot;create_data&quot;</span>: row[<span class="string">&quot;create_time&quot;</span>][:-<span class="number">9</span>],</span><br><span class="line">                <span class="string">&quot;unique_key&quot;</span>:row[<span class="string">&quot;unique_key&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            update_data = copy.deepcopy(insert_data)</span><br><span class="line">            <span class="keyword">del</span> update_data[<span class="string">&quot;create_time&quot;</span>]</span><br><span class="line">            <span class="keyword">del</span> update_data[<span class="string">&quot;create_data&quot;</span>]</span><br><span class="line">            </span><br><span class="line">            Crowd = DBWrite.base.classes.crowd_crowd</span><br><span class="line">            insert_stmt = insert(Crowd).values(**insert_data)</span><br><span class="line">            insert_stmt = insert_stmt.on_conflict_do_update(</span><br><span class="line">                index_elements=[<span class="string">&quot;unique_key&quot;</span>],</span><br><span class="line">                set_=update_data</span><br><span class="line">            )</span><br><span class="line">            session.execute(insert_stmt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">rec</span>):</span><br><span class="line">            message = rec[<span class="string">&quot;logEvents.val.message&quot;</span>]</span><br><span class="line">            index = message.find(<span class="string">&quot;|312F14DS|&quot;</span>)</span><br><span class="line">            message = message[index+<span class="number">10</span>:]</span><br><span class="line">            message = message.replace(</span><br><span class="line">                <span class="string">&quot;: true&quot;</span>, <span class="string">&quot;: True&quot;</span>).replace(<span class="string">&quot;: false&quot;</span>, <span class="string">&quot;: False&quot;</span>)</span><br><span class="line">            message = <span class="built_in">eval</span>(message)</span><br><span class="line">            <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">        logEvents = DynamicFrame.fromDF(</span><br><span class="line">            data_frame, glueContext, <span class="string">&quot;from_data_frame&quot;</span>).select_fields(<span class="string">&quot;logEvents&quot;</span>)</span><br><span class="line">        dyf_relationize = logEvents.relationalize(</span><br><span class="line">            <span class="string">&quot;logEvents&quot;</span>, args[<span class="string">&quot;TempDir&quot;</span>]+<span class="string">&quot;/relationalize&quot;</span>)</span><br><span class="line"></span><br><span class="line">        dyf_selectFromCollection = SelectFromCollection.apply(</span><br><span class="line">            dyf_relationize, <span class="string">&#x27;logEvents_logEvents&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 筛选</span></span><br><span class="line">        sac_or_mon_dyF = Filter.apply(</span><br><span class="line">            frame=dyf_selectFromCollection, f=<span class="keyword">lambda</span> x: x[<span class="string">&quot;logEvents.val.id&quot;</span>] != <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        mapped_dyF = Map.apply(frame=sac_or_mon_dyF, f=handle)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        mapped_dyF = mapped_dyF.toDF()</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> (mapped_dyF.toJSON().take(mapped_dyF.toJSON().count()+<span class="number">1</span>)):</span><br><span class="line">            save_to_pg(info)</span><br><span class="line">        session.commit()</span><br><span class="line">        session.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>,<span class="built_in">str</span>(datetime.datetime.now()))</span><br><span class="line"></span><br><span class="line">glueContext.forEachBatch(frame=sourceData, batch_function=processBatch, options=&#123;</span><br><span class="line">                         <span class="string">&quot;windowSize&quot;</span>: <span class="string">&quot;100 seconds&quot;</span>,  <span class="string">&quot;checkpointLocation&quot;</span>: args[<span class="string">&quot;TempDir&quot;</span>] + <span class="string">&quot;/checkpoint/&quot;</span>&#125;)</span><br><span class="line">job.commit()</span><br></pre></td></tr></table></figure>

<h2 id="2-5、运行脚本"><a href="#2-5、运行脚本" class="headerlink" title="2.5、运行脚本"></a>2.5、运行脚本</h2><p>我们创建的是<font color="#f00">Spark Stream</font> 类型的Job，因此Job会<font color="#f0f">一直运行</font>，定时的从Kinesis Data Stream中获取数据进行微批量处理。<br><img src="https://img-blog.csdnimg.cn/09c1487b49764afca320df30a1782662.png"><br><img src="https://img-blog.csdnimg.cn/ecc5aa4348c74894a95b727a516b577c.png"></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Glue ETL(提取、转换和加载)的serviceless 数据分析——一、Glue创建.</title>
    <url>/2024/02/21/aws/%E5%9F%BA%E4%BA%8EGlue%20ETL(%E6%8F%90%E5%8F%96%E3%80%81%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8A%A0%E8%BD%BD)%E7%9A%84serviceless%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E4%B8%80%E3%80%81Glue%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一、通过Athena查询s3中的数据"><a href="#一、通过Athena查询s3中的数据" class="headerlink" title="一、通过Athena查询s3中的数据"></a>一、通过Athena查询s3中的数据</h1><p><strong>此实验使用s3作为数据源</strong></p>
<blockquote>
<p>ETL: </p>
<p> E   &nbsp;&nbsp; extract  &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; 输入<br> T   &nbsp;&nbsp; transform &nbsp;&nbsp;&nbsp; 转换<br> L   &nbsp;&nbsp; load         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  输出</p>
</blockquote>
<br>

<ul>
<li><a href="#%E4%B8%80%E9%80%9A%E8%BF%87athena%E6%9F%A5%E8%AF%A2s3%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE">一、通过Athena查询s3中的数据</a><ul>
<li><a href="#%E7%AE%80%E6%98%93%E6%9E%B6%E6%9E%84%E5%9B%BE">简易架构图</a></li>
<li><a href="#1%E5%88%9B%E5%BB%BAglue%E6%95%B0%E6%8D%AE%E5%BA%93">1、创建Glue数据库</a></li>
<li><a href="#2%E5%88%9B%E5%BB%BA%E7%88%AC%E7%BD%91%E7%A8%8B%E5%BA%8F">2、创建爬网程序</a></li>
<li><a href="#3%E5%88%9B%E5%BB%BA%E8%A1%A8">3、创建表</a><ul>
<li><a href="#1%E7%88%AC%E7%BD%91%E7%A8%8B%E5%BA%8F%E5%88%9B%E5%BB%BA%E8%A1%A8">1、爬网程序创建表</a></li>
<li><a href="#2%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E8%A1%A8">2、手动创建表</a></li>
</ul>
</li>
<li><a href="#5athena%E6%9F%A5%E8%AF%A2">5、Athena查询</a></li>
<li><a href="#6%E6%80%BB%E7%BB%93">6、总结</a></li>
</ul>
</li>
</ul>
<h2 id="简易架构图"><a href="#简易架构图" class="headerlink" title="简易架构图"></a>简易架构图</h2><p><img src="https://img-blog.csdnimg.cn/00cecfb1050a4e9087ec188dfdef74f5.png"></p>
<h2 id="1、创建Glue数据库"><a href="#1、创建Glue数据库" class="headerlink" title="1、创建Glue数据库"></a>1、创建Glue数据库</h2><p><strong>首先我们需要创建一个数据库</strong><br><strong>我们将会使用爬网程序来填充我们的数据目录</strong></p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/a9e3526803ae4a8696b5a1a193dd98fe.png"></td>
</tr>
<tr>
<td><strong>2、创建数据库</strong>  <strong>只需输入一个数据库名称即可</strong></td>
<td><img src="https://img-blog.csdnimg.cn/ecbe4e887d8a45a6ba4ce872d918ce14.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>3、创建</td>
<td><img src="https://img-blog.csdnimg.cn/fe6f3ce584af4e8f84aad4c627cc0a17.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<br>
<br>
<br>
<br>
<br>
<br>

<h2 id="2、创建爬网程序"><a href="#2、创建爬网程序" class="headerlink" title="2、创建爬网程序"></a>2、创建爬网程序</h2><p><strong>在任务中，我们经常会使用Glue爬网程序来填充我们的数据目录。<br>爬虫可以在一次运行中爬取多个数据存储。在爬取完成后，我们会在数据目录中看到由爬虫创建的一个或多个表。<br>创建表后，我们就可以在接下来的Athena查询或ETL作业中使用表来作为源或目标了。</strong></p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/751d75f7050a4f8094d8829d1a1822b6.png"></td>
</tr>
<tr>
<td><strong>2、爬虫名称</strong></td>
<td><img src="https://img-blog.csdnimg.cn/c0b70bee915d4a76aaaac544472efb06.png"></td>
</tr>
<tr>
<td><strong>3、选择数据源类型  选择爬取类型（全部爬取，只爬取更新，特定事件）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/a1ffee7b63e74b03835adabf41bfd547.png"></td>
</tr>
<tr>
<td><strong>4、选择s3  （可对s3中的需要爬取的数据进行筛选）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/a431767944b5435396d2fa11ccbba2d1.png"></td>
</tr>
<tr>
<td><strong>5、创建或选择爬网程序IAM角色（需要有对应S3与Glue的权限）</strong></td>
<td><img src="https://img-blog.csdnimg.cn/40b749299f424b15b98e0cf6b3227587.png"></td>
</tr>
<tr>
<td><strong>6、对于不确定的实时数据或许要定时更新的数据，可按需选择频率；若只需创建表结构，可选择按需运行</strong></td>
<td><img src="https://img-blog.csdnimg.cn/bcbb1c24cac04e78961d47b080b6cd9e.png"></td>
</tr>
<tr>
<td><strong>7、确认</strong></td>
<td><img src="https://img-blog.csdnimg.cn/3bf9d288e66a4c7688f584dab361d9bc.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>此时，数据库与爬网程序已准备完毕</strong><br><strong>我们将会运行爬网程序自动分析数据结构并创建表</strong><br><br><br><br><br><br></p>
<h2 id="3、创建表"><a href="#3、创建表" class="headerlink" title="3、创建表"></a>3、创建表</h2><h3 id="1、爬网程序创建表"><a href="#1、爬网程序创建表" class="headerlink" title="1、爬网程序创建表"></a>1、爬网程序创建表</h3><table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、运行</strong>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><img src="https://img-blog.csdnimg.cn/a2c9f0f94b9a4f3688c003ee31c407ba.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2、运行中</strong></td>
<td><img src="https://img-blog.csdnimg.cn/bf045216015549758ad81c891dc76fb9.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3、运行完毕</strong></td>
<td><img src="https://img-blog.csdnimg.cn/aed299dfdeac4f158c856288a2779d71.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4、运行结果</strong></td>
<td><img src="https://img-blog.csdnimg.cn/cce8306bb518477fb02fbc2d68ffe15f.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>5、表结构</strong></td>
<td><img src="https://img-blog.csdnimg.cn/5121575df8c54bc797f7c1a7637f0260.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="2、手动创建表"><a href="#2、手动创建表" class="headerlink" title="2、手动创建表"></a>2、手动创建表</h3><table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/0b576974392c4e71bae84e162ec03f3f.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2、表名</strong></td>
<td><img src="https://img-blog.csdnimg.cn/34f5fc5883204b53b386209e3dbd8191.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3、数据源</strong></td>
<td><img src="https://img-blog.csdnimg.cn/650121ecaeca47828c85883090ec95d0.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4、选择文件类型</strong></td>
<td><img src="https://img-blog.csdnimg.cn/5f19554535684ee99842a8be4d002ee6.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>5、手动创建表需要自定义列；请根据提示创建</strong></td>
<td><img src="https://img-blog.csdnimg.cn/a3ed856de2af4fd9a66c48038d20c21c.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>6、一直下一步即可</strong></td>
<td></td>
</tr>
</tbody></table>
<br>
<br>
<br>
<br>
<br>
<br>

<h2 id="5、Athena查询"><a href="#5、Athena查询" class="headerlink" title="5、Athena查询"></a>5、Athena查询</h2><p>Athena是一种交互式查询服务（不是数据库）。并且Athena可以使用标准SQL直接查询s3中的数据，前提是需要使用Glue连接s3源。Athena还支持查询如DynamoDB、Redshift、MySQL等数据库。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1、入口</strong></td>
<td><img src="https://img-blog.csdnimg.cn/19d39af6cf864cec95c225afab042507.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2、设置查询结果存储位置：s3</strong></td>
<td><img src="https://img-blog.csdnimg.cn/11cf7c82250c4e8e9a766b0a677794a5.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><img src="https://img-blog.csdnimg.cn/a1e75f6a48ef4c3291a9fd05ff7baba5.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3、查看表，可查看数据库以及其中的表</strong></td>
<td><img src="https://img-blog.csdnimg.cn/557c5b997eab40f19e655b6e4f08c9c1.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4、查询结果：使用sql查询</strong></td>
<td><img src="https://img-blog.csdnimg.cn/d00288962db3488fa56e94182b43e60f.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p><strong>在此实验中，我们使用Glue 的爬网程序自动解析存储在s3桶中的原始数据，自动创建了表。通过Glue数据库中的表，我们可以使用Athena对表进行查询（Athena每次检索表对应的s3桶数据，按检索量收费）。接下来我们会对原始数据进行转换、清洗以及分区操作，以及使用API Gateway+lambda实现一个无服务架构，通过API查询数据。</strong></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Glue ETL(提取、转换和加载)的serviceless 数据分析——三、serverless数据分析</title>
    <url>/2024/02/21/aws/%E5%9F%BA%E4%BA%8EGlue%20ETL(%E6%8F%90%E5%8F%96%E3%80%81%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8A%A0%E8%BD%BD)%E7%9A%84serviceless%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E4%B8%89%E3%80%81serverless%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="三、serverless数据分析"><a href="#三、serverless数据分析" class="headerlink" title="三、serverless数据分析"></a>三、serverless数据分析</h1><ul>
<li><a href="#%E4%B8%89serverless%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90">三、serverless数据分析</a><ul>
<li><a href="#1%E5%88%9B%E5%BB%BAlambda">1、创建Lambda</a></li>
<li><a href="#2%E5%88%9B%E5%BB%BAapi-gateway">2、创建API Gateway</a></li>
<li><a href="#3%E7%BB%93%E6%9E%9C">3、结果</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2 id="1、创建Lambda"><a href="#1、创建Lambda" class="headerlink" title="1、创建Lambda"></a>1、创建Lambda</h2><p><font color=##00aa00>在Lambda中，我们将使用python3作为代码语言。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、入口</td>
<td><img src="https://img-blog.csdnimg.cn/b634fb87a6444d5b92edf7b4ccbcdb0a.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>2、创建（我们选择使用python3.7）</td>
<td><img src="https://img-blog.csdnimg.cn/96278d761c66480ca1172171b0daed86.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>3、IAM权限（权限可信实体需要包括lambda才能将角色绑定到Lambda上）</td>
<td><img src="https://img-blog.csdnimg.cn/55ae86c52d9b40e2946c9a6fd9093a7e.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>IAM可信实体</td>
<td>见下方</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>4、指定处理函数（处理程序要为用户程序的入口）</td>
<td><img src="https://img-blog.csdnimg.cn/7b49a0a6f409413ab95ba8a39a24216f.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>5、添加层（层为我们的代码运行时的环境，并且，兼容运行时要包含上一步中的运行时环境）</td>
<td><img src="https://img-blog.csdnimg.cn/4183f4a174db47f8a3bf9a691a6778dd.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>6、代码（在此代码中使用了boto3来连接Athena，可自定义sql，使用方法请看官方文档）</td>
<td></td>
</tr>
<tr>
<td>见下方</td>
<td></td>
</tr>
</tbody></table>
<p><strong>可信实体：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Service&quot;</span>: <span class="string">&quot;lambda.amazonaws.com&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;sts:AssumeRole&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3, os, json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyathena <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">REGION = <span class="string">&quot;us-west-2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expected request: anomaly/&#123;meter_id&#125;?data_start=&#123;&#125;&amp;data_end=&#123;&#125;&amp;outlier_only=&#123;&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    ATHENA_OUTPUT_BUCKET = <span class="string">&quot;xxx/athena&quot;</span></span><br><span class="line">    DB_SCHEMA = <span class="string">&quot;suzikuo_test_db&quot;</span></span><br><span class="line"></span><br><span class="line">    USE_WEATHER_DATA = <span class="number">0</span></span><br><span class="line">    pathParameter = event[<span class="string">&quot;pathParameters&quot;</span>]</span><br><span class="line">    queryParameter = event[<span class="string">&quot;queryStringParameters&quot;</span>]</span><br><span class="line">    METER_ID = pathParameter[<span class="string">&#x27;meter_id&#x27;</span>]</span><br><span class="line">    DATA_START = queryParameter[<span class="string">&#x27;data_start&#x27;</span>]</span><br><span class="line">    DATA_END = queryParameter[<span class="string">&#x27;data_end&#x27;</span>]</span><br><span class="line">    OUTLIER_ONLY = queryParameter[<span class="string">&#x27;outlier_only&#x27;</span>]</span><br><span class="line">    query = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    select * from &quot;&#123;&#125;&quot;.reading_type_int</span></span><br><span class="line"><span class="string">    where meter_id = &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"><span class="string">    and cast(reading_date_time as timestamp) &gt;= timestamp &#x27;&#123;&#125;&#x27; and cast(reading_date_time as timestamp) &lt; timestamp &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(DB_SCHEMA, METER_ID, DATA_START, DATA_END)</span><br><span class="line"></span><br><span class="line">    athena = boto3.client(<span class="string">&#x27;athena&#x27;</span>)</span><br><span class="line">    response = athena.start_query_execution(</span><br><span class="line">    QueryString=query,</span><br><span class="line">    QueryExecutionContext=&#123;</span><br><span class="line">        <span class="string">&#x27;Database&#x27;</span>: <span class="string">&#x27;suzikuo_test_db&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ResultConfiguration=&#123;</span><br><span class="line">        <span class="string">&#x27;OutputLocation&#x27;</span>: <span class="string">&#x27;s3://suzikuo-test-2022-8-4-s3/athena&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;EncryptionConfiguration&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;EncryptionOption&#x27;</span>: <span class="string">&#x27;SSE_S3&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query_results = athena.get_query_results(</span><br><span class="line">                QueryExecutionId=response[<span class="string">&#x27;QueryExecutionId&#x27;</span>]</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Query has not yet finished&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(err):</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span>(err)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> query_results[<span class="string">&#x27;ResultSet&#x27;</span>][<span class="string">&#x27;Rows&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br></p>
<h2 id="2、创建API-Gateway"><a href="#2、创建API-Gateway" class="headerlink" title="2、创建API Gateway"></a>2、创建API Gateway</h2><p><font color=##00aa00>API Gateway +Lambda 可轻松实现一个serverless架构</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、入口</td>
<td><img src="https://img-blog.csdnimg.cn/cd56889829294111a351648a90236c8d.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>2、API（我们使用的是Lambda，所以选HTTP API）</td>
<td><img src="https://img-blog.csdnimg.cn/500335f48be04de9b98ac1ea0ce31922.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>3、创建集成（指定要绑定的Lambda）</td>
<td><img src="https://img-blog.csdnimg.cn/f51dd20ca63f45828ba271a5230e7508.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>4、配置路由（指定路由要请求的集成（lambda））</td>
<td><img src="https://img-blog.csdnimg.cn/3badbf6467354357822dbeda2df43414.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>5、一直下一步即可</td>
<td></td>
</tr>
</tbody></table>
<br>
<br><br>

<h2 id="3、结果"><a href="#3、结果" class="headerlink" title="3、结果"></a>3、结果</h2><p><font color=##aa0000>此案例只查询了某一ID的某个时间段内的数据</font><br><font color=##00aa00><br>通过获取URI和参数，在Lambda中编写逻辑，可以实现我们对数据的任意操作。<br></font></p>
<p><img src="https://img-blog.csdnimg.cn/93bc2063514a4cd1b34b503be6c1ad3f.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>到此，我们已经完成了基于Glue ETL(提取、转换和加载)的serviceless 数据分析的全部过程了。在此案例中，我们使用到了AWS 服务中的Glue、S3、APIGateway、Lambda等服务实现了一个通过API访问的数据统计与分析接口。</strong></p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>Given transaction number 1 does not match any in-progress transactions</title>
    <url>/2021/12/28/mongodb/Given%20transaction%20number%201%20does%20not%20match%20any%20in-progress%20transactions/</url>
    <content><![CDATA[<p><strong>错误信息：</strong><br><strong>Given transaction number 1 does not match any in-progress transactions</strong><br><strong>出错代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(self._mg_db_write, PublicationCollectionInfoTable.table_name).find_one_and_update(query_dict, update_dict,upsert=<span class="literal">True</span>,session=session)</span><br></pre></td></tr></table></figure>

<p>在使用pymongo 操作mongodb时，使用了事务来进行数据插入与更新<br><img src="https://img-blog.csdnimg.cn/4897072ad2034d948d09c456aac87785.png"><br><img src="https://img-blog.csdnimg.cn/117c41cefe044909a6dba66425bb293f.png"><br>在本地测试没有问题，在线上环境使用报错：<br><code>Given transaction number 1 does not match any in-progress transactions</code><br><strong>原因</strong>：<br>主要原因：数据库中未创建表！<br>1、mongodb版本问题，线上与线下不统一。<br>线上版本低于线下版本，线上的mongodb.find_one_and_update暂不支持session共享，但insert_one 和 update_one 支持共享session。<br>2、session超时，默认事务生命周期最大值为1分钟<br><strong>目前解决方案：</strong><br>解决方案：手动新建对应表<br>1、统一mongodb版本<br>2、将find_one_and_update拆为find_one和insert_one或update_one<br>3、手动回滚：获取操作成功的数据，在某一步出错时，手动还原所有操作。如insert的delete掉。<br>4、session超时解决自己百度</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Glue ETL(提取、转换和加载)的serviceless 数据分析——二、数据清洗、转换</title>
    <url>/2024/02/21/aws/%E5%9F%BA%E4%BA%8EGlue%20ETL(%E6%8F%90%E5%8F%96%E3%80%81%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8A%A0%E8%BD%BD)%E7%9A%84serviceless%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E3%80%81%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="二、数据清洗、转换"><a href="#二、数据清洗、转换" class="headerlink" title="二、数据清洗、转换"></a>二、数据清洗、转换</h1><p><strong>此实验使用s3作为数据源</strong></p>
<blockquote>
<p>ETL: </p>
<p> E   &nbsp;&nbsp; extract  &nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp; 输入<br> T   &nbsp;&nbsp; transform &nbsp;&nbsp;&nbsp; 转换<br> L   &nbsp;&nbsp; load         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  输出</p>
</blockquote>
<ul>
<li><a href="#%E4%BA%8C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E8%BD%AC%E6%8D%A2">二、数据清洗、转换</a><ul>
<li><a href="#%E7%AE%80%E6%98%93%E6%9E%B6%E6%9E%84%E5%9B%BE">简易架构图</a></li>
<li><a href="#1%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97">1、数据清洗</a></li>
<li><a href="#2%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA">2、数据分区</a></li>
<li><a href="#3%E6%80%BB%E7%BB%93">3、总结</a></li>
</ul>
</li>
</ul>
<h2 id="简易架构图"><a href="#简易架构图" class="headerlink" title="简易架构图"></a>简易架构图</h2><p><img src="https://img-blog.csdnimg.cn/72acdbce3c594d3fac88bcd9aa553b58.png"></p>
<h2 id="1、数据清洗"><a href="#1、数据清洗" class="headerlink" title="1、数据清洗"></a>1、数据清洗</h2><p><font color=##00aa00>此步会将s3中的原始数据清洗成我们想要的自定义结构的数据。之后，我们可通过<font color="#ff0000">APIGateway+Lambda+Athena</font>来实现一个无服务器的数据分析服务。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>图例</th>
</tr>
</thead>
<tbody><tr>
<td>1、入口</td>
<td><img src="https://img-blog.csdnimg.cn/87d10ca8a11c4365af2ff9cca526eb1e.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>2、创建Job（s3作为数据源，则Type选择Spark，若为Kinesis等，选择Stream Spark）</td>
<td><img src="https://img-blog.csdnimg.cn/592eb7721a81429697b8f9464c6b9932.png"></td>
</tr>
<tr>
<td>3、IAM角色需要有s3与Glue的权限</td>
<td><img src="https://img-blog.csdnimg.cn/5d1800dab03542d3a8be59f093572360.png"></td>
</tr>
<tr>
<td>4、选择s3脚本位置,若已经完成脚本的编写工作，则可以选择第二项或第三项，若无则Glue会提供默认脚本</td>
<td><img src="https://img-blog.csdnimg.cn/7d812c8f9ef9488484de0b1cf174477c.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>5、安全配置参数</td>
<td><img src="https://img-blog.csdnimg.cn/ff3ac1ddd2764207ad665a7a2c74405a.png"><strong>建议：添加参数–enable-auto-scaling为true。每次在我们执行Job任务时，会根据运行 ETL 任务的数据处理单元（DPU）的个数来分配动态IP，在我们子网的动态IP数低于DPU数时，Job将会执行失败。此参数将会动态分配IP。</strong></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>6、数据源（）</td>
<td><img src="https://img-blog.csdnimg.cn/96ef1ffee060463a920a7ed2e8889d56.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>7、数据目标（我们会将清洗后的数据存储到新的s3桶）</td>
<td><img src="https://img-blog.csdnimg.cn/14484dc005774b07afffa19a774715d3.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>8、设计架构（在本案例中，我们会自定义脚本。所以不再在此处设计架构）<font color="#ff0000">（此处设计后，脚本会自动生成相关代码）</font ></td>
<td><img src="https://img-blog.csdnimg.cn/df3c0aff2534416f91f29402fb443d10.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>9、保存</td>
<td><img src="https://img-blog.csdnimg.cn/cdcd23fdefe9490e8e6a3ec37a9f2eab.png"></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>编辑脚本</strong><br><font color=##FFFF00>  脚本中的args参数的键值需要从Job的安全配置参数中定义  </font> </p>
<p><font color=##00aa00> 1. 连接数据源（s3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源</span></span><br><span class="line">datasource = glueContext.create_dynamic_frame.from_catalog(database = args[<span class="string">&#x27;db_name&#x27;</span>], table_name = tableName, transformation_ctx = <span class="string">&quot;datasource&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> <font color=##00aa00>2. 数据结构转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapped_readings = ApplyMapping.apply(frame = datasource, mappings = [(<span class="string">&quot;lclid&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;meter_id&quot;</span>, <span class="string">&quot;string&quot;</span>), \</span><br><span class="line">                                                                     (<span class="string">&quot;datetime&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;reading_time&quot;</span>, <span class="string">&quot;string&quot;</span>), \</span><br><span class="line">                                                                     (<span class="string">&quot;KWH/hh (per half hour)&quot;</span>, <span class="string">&quot;double&quot;</span>, <span class="string">&quot;reading_value&quot;</span>, <span class="string">&quot;double&quot;</span>)], \</span><br><span class="line">                                     transformation_ctx = <span class="string">&quot;mapped_readings&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> <font color=##00aa00>3. 数据结构拆分、定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapped_readings_df = DynamicFrame.toDF(mapped_readings)</span><br><span class="line"></span><br><span class="line">mapped_readings_df = mapped_readings_df.withColumn(<span class="string">&quot;obis_code&quot;</span>, lit(<span class="string">&quot;&quot;</span>))</span><br><span class="line">mapped_readings_df = mapped_readings_df.withColumn(<span class="string">&quot;reading_type&quot;</span>, lit(<span class="string">&quot;INT&quot;</span>))</span><br><span class="line"></span><br><span class="line">reading_time = to_timestamp(col(<span class="string">&quot;reading_time&quot;</span>), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">mapped_readings_df = mapped_readings_df \</span><br><span class="line">    .withColumn(<span class="string">&quot;week_of_year&quot;</span>, weekofyear(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;date_str&quot;</span>, regexp_replace(col(<span class="string">&quot;reading_time&quot;</span>).substr(<span class="number">1</span>,<span class="number">10</span>), <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;day_of_month&quot;</span>, dayofmonth(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;month&quot;</span>, month(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;year&quot;</span>, year(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;hour&quot;</span>, hour(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;minute&quot;</span>, minute(reading_time)) \</span><br><span class="line">    .withColumn(<span class="string">&quot;reading_date_time&quot;</span>, reading_time) \</span><br><span class="line">    .drop(<span class="string">&quot;reading_time&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><font color=##00aa00> 4. 清洗后的数据写入新s3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># write data to S3</span></span><br><span class="line">filteredMeterReads = DynamicFrame.fromDF(mapped_readings_df, glueContext, <span class="string">&quot;filteredMeterReads&quot;</span>)</span><br><span class="line"></span><br><span class="line">s3_clean_path = <span class="string">&quot;s3://&quot;</span> + args[<span class="string">&#x27;clean_data_bucket&#x27;</span>]</span><br><span class="line"></span><br><span class="line">glueContext.write_dynamic_frame.from_options(</span><br><span class="line">    frame = filteredMeterReads,</span><br><span class="line">    connection_type = <span class="string">&quot;s3&quot;</span>,</span><br><span class="line">    connection_options = &#123;<span class="string">&quot;path&quot;</span>: s3_clean_path&#125;,</span><br><span class="line">    <span class="built_in">format</span> = <span class="string">&quot;parquet&quot;</span>,</span><br><span class="line">    transformation_ctx = <span class="string">&quot;s3CleanDatasink&quot;</span>)</span><br></pre></td></tr></table></figure>
<br>

<p><strong>运行作业</strong><br><br><br><font color="#ff0000">&nbsp;&nbsp;&nbsp;&nbsp;执行成功后，状态将变为”SUCCESS”，失败将会给出失败信息，可在CloudWatch 中查看详情</p>
<p><img src="https://img-blog.csdnimg.cn/c8a534c6a2cf41fa9df2cdbbbb0553c5.png"></p>
<p><img src="https://img-blog.csdnimg.cn/7786ba66e3ac430c9d0efd540a1b2bac.png"><br><br><br><font color=##00aa00>清洗后的数据保存到了s3<br><br><br><img src="https://img-blog.csdnimg.cn/d98cac38d99d4b1b82b9368c2357c98c.png"><br><strong>数据清洗完毕后，可通过上一篇中的爬网程序步骤，将清洗后的数据的结构创建表到数据目录中，<br>此时我们可以使用Athena对清洗后的数据进行分析。</strong></p>
<h2 id="2、数据分区"><a href="#2、数据分区" class="headerlink" title="2、数据分区"></a>2、数据分区</h2><p>接下来我们对数据进行分区处理（<font color="#ff0000">此处只提供了按天分区</font>）<br>重新进行数据清洗中的创建Job操作后，重写脚本<br><strong>编辑脚本</strong><br>连接数据源。表为上一步最后重新爬取生成的新表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cleanedMeterDataSource = glueContext.create_dynamic_frame.from_catalog(database = args[<span class="string">&#x27;db_name&#x27;</span>], table_name = tableName, transformation_ctx = <span class="string">&quot;cleanedMeterDataSource&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>根据type与data_str分区</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">business_zone_bucket_path_daily = <span class="string">&quot;s3://&#123;&#125;/daily&quot;</span>.<span class="built_in">format</span>(args[<span class="string">&#x27;business_zone_bucket&#x27;</span>])</span><br><span class="line"></span><br><span class="line">businessZone = glueContext.write_dynamic_frame.from_options(frame = cleanedMeterDataSource, \</span><br><span class="line">    connection_type = <span class="string">&quot;s3&quot;</span>, \</span><br><span class="line">    connection_options = &#123;<span class="string">&quot;path&quot;</span>: business_zone_bucket_path_daily, <span class="string">&quot;partitionKeys&quot;</span>: [<span class="string">&quot;reading_type&quot;</span>, <span class="string">&quot;date_str&quot;</span>]&#125;,\</span><br><span class="line">    <span class="built_in">format</span> = <span class="string">&quot;parquet&quot;</span>, \</span><br><span class="line">    transformation_ctx = <span class="string">&quot;businessZone&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>分区后的数据结果：<br><img src="https://img-blog.csdnimg.cn/e20989d5745042c1ba4a6cfa1b67936b.png"><br>再次创建、运行爬网程序，将会在数据目录中生成新的分区表。</p>
<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;到这一步，我们已经使用Glue ETL对s3桶中的数据进行了清洗、分区操作。在进行上篇中的Athena操作后，我们已经可以通过Athena直接查询到清洗、分区后的数据集了。<br>&nbsp;&nbsp;&nbsp;&nbsp;接下来，我们会通过使用APIGateway+Lambda+Athena来构建一个无服务器的数据查询分析服务。</p>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>大数据</tag>
        <tag>ETL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 事务知识汇总</title>
    <url>/2024/01/31/mysql/mysql%20%E4%BA%8B%E5%8A%A1%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80mysql%E4%BA%8B%E5%8A%A1">一、MySQL事务</a><ul>
<li><a href="#11-%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7acid">1.1 事务的特性(ACID)</a><ul>
<li><a href="#111-%E5%8E%9F%E5%AD%90%E6%80%A7atomicity">1.1.1 原子性（Atomicity）</a></li>
<li><a href="#112-%E4%B8%80%E8%87%B4%E6%80%A7consistency">1.1.2 一致性（Consistency）</a></li>
<li><a href="#113-%E9%9A%94%E7%A6%BB%E6%80%A7isolation">1.1.3 隔离性（Isolation）</a></li>
<li><a href="#114-%E6%8C%81%E4%B9%85%E6%80%A7durability">1.1.4 持久性（Durability）</a></li>
</ul>
</li>
<li><a href="#12-%E5%B9%B6%E8%A1%8C%E4%BA%8B%E5%8A%A1%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">1.2 并行事务遇到的问题</a><ul>
<li><a href="#121-%E8%84%8F%E8%AF%BB">1.2.1 脏读</a></li>
<li><a href="#122-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB">1.2.2 不可重复读</a></li>
<li><a href="#123-%E5%B9%BB%E8%AF%BB">1.2.3 幻读</a></li>
<li><a href="#%E4%B8%A5%E9%87%8D%E6%80%A7">严重性</a></li>
</ul>
</li>
<li><a href="#13-%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">1.3 事务的隔离级别</a><ul>
<li><a href="#131-%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4">1.3.1 读未提交</a></li>
<li><a href="#132-%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4">1.3.2 读已提交</a></li>
<li><a href="#133-%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB">1.3.3 可重复读</a></li>
<li><a href="#134-%E4%B8%B2%E8%A1%8C%E5%8C%96">1.3.4 串行化</a></li>
<li><a href="#%E9%9A%94%E7%A6%BB%E6%B0%B4%E5%B9%B3">隔离水平</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F">实现方式</a></li>
</ul>
</li>
<li><a href="#14-mvcc">1.4 MVCC</a><ul>
<li><a href="#141-%E5%AE%9A%E4%B9%89">1.4.1 定义</a></li>
<li><a href="#142-read-view-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">1.4.2 Read View 是如何工作的？</a></li>
<li><a href="#143-%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E5%A6%82%E4%BD%95%E6%9C%80%E5%A4%A7%E9%99%90%E5%BA%A6%E7%9A%84%E9%81%BF%E5%85%8D%E5%B9%BB%E8%AF%BB">1.4.3 可重复读如何最大限度的避免幻读？</a><ul>
<li><a href="#%E5%BF%AB%E7%85%A7%E8%AF%BB">快照读</a></li>
<li><a href="#%E5%BD%93%E5%89%8D%E8%AF%BB">当前读</a></li>
</ul>
</li>
<li><a href="#144-%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%87%BA%E7%8E%B0%E5%B9%BB%E8%AF%BB%E7%9A%84%E5%9C%BA%E6%99%AF">1.4.4 可重复读隔离级别出现幻读的场景</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="一、MySQL事务"><a href="#一、MySQL事务" class="headerlink" title="一、MySQL事务"></a>一、MySQL事务</h1><blockquote>
<p>Mysql事务（Transaction）用于保证数据的一致性，事务是在数据库管理系统中执行的一个逻辑操作单元，它是由一组列数据库操作组成的逻辑工作单元。<br>这一组操作要么全部成功，要么全部失败，不存在部分成功部分失败的情况</p>
</blockquote>
<h2 id="1-1-事务的特性-ACID"><a href="#1-1-事务的特性-ACID" class="headerlink" title="1.1 事务的特性(ACID)"></a>1.1 事务的特性(ACID)</h2><blockquote>
<p>Innodb支持事务，Myisam不支持事务</p>
</blockquote>
<h3 id="1-1-1-原子性（Atomicity）"><a href="#1-1-1-原子性（Atomicity）" class="headerlink" title="1.1.1 原子性（Atomicity）"></a>1.1.1 原子性（Atomicity）</h3><blockquote>
<p>一个事务中的所有操作，<strong>要么全部完成，要么全部不完成</strong>，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态</p>
</blockquote>
<p>原子性是通过 undo log（回滚日志） 来保证的；</p>
<h3 id="1-1-2-一致性（Consistency）"><a href="#1-1-2-一致性（Consistency）" class="headerlink" title="1.1.2 一致性（Consistency）"></a>1.1.2 一致性（Consistency）</h3><blockquote>
<p>是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。A给B转账，用户A扣200块，用户B一定增长200块。</p>
</blockquote>
<p>一致性则是通过持久性+原子性+隔离性来保证；</p>
<h3 id="1-1-3-隔离性（Isolation）"><a href="#1-1-3-隔离性（Isolation）" class="headerlink" title="1.1.3 隔离性（Isolation）"></a>1.1.3 隔离性（Isolation）</h3><blockquote>
<p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致</p>
</blockquote>
<p>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</p>
<h3 id="1-1-4-持久性（Durability）"><a href="#1-1-4-持久性（Durability）" class="headerlink" title="1.1.4 持久性（Durability）"></a>1.1.4 持久性（Durability）</h3><blockquote>
<p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</p>
</blockquote>
<p>在Innodb中，持久性是通过 redo log （重做日志）来保证的；</p>
<h2 id="1-2-并行事务遇到的问题"><a href="#1-2-并行事务遇到的问题" class="headerlink" title="1.2 并行事务遇到的问题"></a>1.2 并行事务遇到的问题</h2><h3 id="1-2-1-脏读"><a href="#1-2-1-脏读" class="headerlink" title="1.2.1 脏读"></a>1.2.1 脏读</h3><blockquote>
<p>如果一个事务「读到」了另一个「还未提交的事务修改过的数据」，就意味着发生了「脏读」现象。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/acf00bb3774348508d00e8a8f1c96b29.png"><br>如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为<strong>脏读</strong>。</p>
<h3 id="1-2-2-不可重复读"><a href="#1-2-2-不可重复读" class="headerlink" title="1.2.2 不可重复读"></a>1.2.2 不可重复读</h3><blockquote>
<p>在一个事务内多次读取同一个数据，如果出现前后两次读到的<strong>数据不一样</strong>的情况，就意味着发生了「不可重复读」现象。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/05526cfc653f4c89a94b4a3bd5517821.png"><br>在这过程中如果事务 B 更新了这条数据，并提交了事务，那么当事务 A 再次读取该数据时，就会发现前后两次读到的数据是不一致的，这种现象就被称为<strong>不可重复读</strong>。</p>
<h3 id="1-2-3-幻读"><a href="#1-2-3-幻读" class="headerlink" title="1.2.3 幻读"></a>1.2.3 幻读</h3><blockquote>
<p>在一个事务内多次查询某个符合查询条件的「<strong>记录数量</strong>」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/52e6d17d59834248aa76495b3516548a.png"></p>
<p>发现和前一次读到的记录数量不一样了，就感觉发生了幻觉一样，这种现象就被称为幻读。</p>
<h3 id="严重性"><a href="#严重性" class="headerlink" title="严重性"></a>严重性</h3><p><img src="https://img-blog.csdnimg.cn/direct/27b2c3c0482f4023a261d0afc72e3ab8.png"></p>
<h2 id="1-3-事务的隔离级别"><a href="#1-3-事务的隔离级别" class="headerlink" title="1.3 事务的隔离级别"></a>1.3 事务的隔离级别</h2><h3 id="1-3-1-读未提交"><a href="#1-3-1-读未提交" class="headerlink" title="1.3.1 读未提交"></a>1.3.1 读未提交</h3><blockquote>
<p>一个事务还没提交时，它做的变更就能被其他事务看到；</p>
</blockquote>
<p>在「读未提交」隔离级别下，可能发生脏读、不可重复读和幻读现象；</p>
<h3 id="1-3-2-读已提交"><a href="#1-3-2-读已提交" class="headerlink" title="1.3.2 读已提交"></a>1.3.2 读已提交</h3><blockquote>
<p>一个事务提交之后，它做的变更才能被其他事务看到</p>
</blockquote>
<p>在「读提交」隔离级别下，可能发生不可重复读和幻读现象，但是不可能发生脏读现象；</p>
<h3 id="1-3-3-可重复读"><a href="#1-3-3-可重复读" class="headerlink" title="1.3.3 可重复读"></a>1.3.3 可重复读</h3><blockquote>
<p>指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，<strong>MySQL InnoDB 引擎的默认隔离级别；</strong></p>
</blockquote>
<p>在「可重复读」隔离级别下，可能发生幻读现象，但是不可能脏读和不可重复读现象；</p>
<h3 id="1-3-4-串行化"><a href="#1-3-4-串行化" class="headerlink" title="1.3.4 串行化"></a>1.3.4 串行化</h3><blockquote>
<p>会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；</p>
</blockquote>
<p>在「串行化」隔离级别下，脏读、不可重复读和幻读现象都不可能会发生。</p>
<h3 id="隔离水平"><a href="#隔离水平" class="headerlink" title="隔离水平"></a>隔离水平</h3><p><img src="https://img-blog.csdnimg.cn/direct/46f62f956182454ab1016941196e3651.png"><br>针对不同的隔离级别，并发事务时可能发生的现象也会不同。</p>
<p><img src="https://img-blog.csdnimg.cn/direct/d283fa85b0cd48d6837c1098100caafe.png"></p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>读未提交：因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；</li>
<li>串行化：通过加读写锁的方式来避免并行访问；</li>
<li>读提交、可重复读：通过 <code>Read View</code> 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个<strong>数据快照</strong>，就像相机拍照那样，定格某一时刻的风景。<strong>「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。</strong></li>
</ul>
<h2 id="1-4-MVCC"><a href="#1-4-MVCC" class="headerlink" title="1.4 MVCC"></a>1.4 MVCC</h2><h3 id="1-4-1-定义"><a href="#1-4-1-定义" class="headerlink" title="1.4.1 定义"></a>1.4.1 定义</h3><blockquote>
<p>MVCC 是 Multi-Version Concurrency Control 的缩写，意为 <strong>多版本并发控制</strong>。<br>这是一种数据库事务管理技术，主要用于处理并发读写操作，以提高数据库的并发性能和一致性。在 MySQL 中，MVCC 通过数据行的<strong>多个版本管理</strong>来实现并发控制。当一个事务在执行 SELECT 操作时，如果该行已经被另一个事务更新过，那么 InnoDB 存储引擎会提供<strong>之前版本的值</strong>给当前事务，这样在做查询的时候就不用等待另一个事务释放锁。</p>
</blockquote>
<h3 id="1-4-2-Read-View-是如何工作的？"><a href="#1-4-2-Read-View-是如何工作的？" class="headerlink" title="1.4.2 Read View 是如何工作的？"></a>1.4.2 Read View 是如何工作的？</h3><p><img src="https://img-blog.csdnimg.cn/direct/789e3589bcde46b2a8f8c62007c1d1a6.png"><br><strong>聚簇索引记录中的两个隐藏列</strong>:<br><img src="https://img-blog.csdnimg.cn/direct/1f424ffad3f148f29a0aa01c84f240c6.png"><br>对于使用 InnoDB 存储引擎的数据库表，它的聚簇索引记录中都包含下面两个隐藏列：</p>
<ol>
<li><strong>trx_id</strong>:当一个事务对某条聚簇索引记录进行改动时，就会把该事务的事务 id 记录在 trx_id 隐藏列里；</li>
<li><strong>roll_pointer</strong>:每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo日志中，然后这个隐藏列是个指针，指向每一个旧版本记录，于是就可以通过它找到修改前的记录。</li>
</ol>
<p>通过判断记录的 <code>trx_id</code>与Read View中的<code>min_trx_id</code> 和<code>max_trx_id</code> 的大小来判断该版本的记录对当前事务可见不可见。也就实现了<code>可重复读</code>和<code>读已提交</code></p>
<p><strong>这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）</strong></p>
<blockquote>
<p>具体可看：<a href="https://www.xiaolincoding.com/mysql/transaction/mvcc.html#read-view-%E5%9C%A8-mvcc-%E9%87%8C%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84">Read View 在 MVCC 里如何工作的？</a></p>
</blockquote>
<h3 id="1-4-3-可重复读如何最大限度的避免幻读？"><a href="#1-4-3-可重复读如何最大限度的避免幻读？" class="headerlink" title="1.4.3 可重复读如何最大限度的避免幻读？"></a>1.4.3 可重复读如何最大限度的避免幻读？</h3><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>也叫普通读，读取的是记录数据的可见版本，不加锁，不加锁的普通select语句都是快照读，即不加锁的非阻塞读。</p>
<p>快照读的执行方式是生成ReadView，直接利用 MVCC 机制来进行读取，并不会对记录进行加锁。</p>
<p>简单的select操作(不包括 select … lock in share mode, select … for update)</p>
<h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>(select … for update 等语句），通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select … for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。</p>
<h3 id="1-4-4-可重复读隔离级别出现幻读的场景"><a href="#1-4-4-可重复读隔离级别出现幻读的场景" class="headerlink" title="1.4.4 可重复读隔离级别出现幻读的场景"></a>1.4.4 可重复读隔离级别出现幻读的场景</h3><p>第一个发生幻读现象的场景：<br><img src="https://img-blog.csdnimg.cn/direct/39085fd3f6c14e468520ed9f75160f3b.png"><br>第二个发生幻读现象的场景：</p>
<ol>
<li>T1 时刻：事务 A 先执行「<code>快照读语句</code>」：select * from t_test where id &gt; 100 得到了 3 条记录。</li>
<li>T2 时刻：事务 B 往插入一个 id&#x3D; 200 的记录并提交；</li>
<li>T3 时刻：事务 A 再执行「<code>当前读语句</code>」 select * from t_test where id &gt; 100 for update<br>就会得到 4 条记录，此时也发生了幻读现象。<br><strong>要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select … for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。</strong></li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 执行流程知识汇总</title>
    <url>/2024/01/29/mysql/mysql%20%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80mysql">一、MySql</a><ul>
<li><a href="#11-server%E5%B1%82">1.1 Server层</a><ul>
<li><a href="#111-%E8%BF%9E%E6%8E%A5%E5%99%A8">1.1.1 连接器</a></li>
<li><a href="#112-%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98">1.1.2 查询缓存</a></li>
<li><a href="#113-%E8%A7%A3%E6%9E%90sql">1.1.3 解析SQL</a><ul>
<li><a href="#1131-%E8%A7%A3%E6%9E%90%E5%99%A8">1.1.3.1 解析器</a></li>
</ul>
</li>
<li><a href="#114-%E6%89%A7%E8%A1%8Csql">1.1.4 执行SQL</a><ul>
<li><a href="#1141-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8">1.1.4.1 预处理器</a></li>
<li><a href="#1142-%E4%BC%98%E5%8C%96%E5%99%A8">1.1.4.2 优化器</a></li>
<li><a href="#1143-%E6%89%A7%E8%A1%8C%E5%99%A8">1.1.4.3 执行器</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#12-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%B1%82">1.2 存储引擎层</a></li>
<li><a href="#13-%E5%8F%82%E8%80%83">1.3 参考</a></li>
</ul>
</li>
</ul>
<h1 id="一、MySql"><a href="#一、MySql" class="headerlink" title="一、MySql"></a>一、MySql</h1><h2 id="1-1-Server层"><a href="#1-1-Server层" class="headerlink" title="1.1 Server层"></a>1.1 Server层</h2><p><img src="https://img-blog.csdnimg.cn/direct/be072fe627684cd48eed569254957cc4.png"></p>
<h3 id="1-1-1-连接器"><a href="#1-1-1-连接器" class="headerlink" title="1.1.1 连接器"></a>1.1.1 连接器</h3><blockquote>
<p>连接的过程需要先经过 TCP 三次握手，因为 MySQL 是基于 TCP 协议进行传输的。</p>
</blockquote>
<ul>
<li>管理客户端连接。</li>
<li>权限验证。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MySQL 的连接也跟 HTTP 一样，有**短连接**和**长连接**的概念，它们的区别如下： </span><br><span class="line">// 短连接</span><br><span class="line">连接 mysql 服务（TCP 三次握手）</span><br><span class="line">执行sql</span><br><span class="line">断开 mysql 服务（TCP 四次挥手）</span><br><span class="line">// 长连接</span><br><span class="line">连接 mysql 服务（TCP 三次握手）</span><br><span class="line">执行sql</span><br><span class="line">执行sql</span><br><span class="line">执行sql</span><br><span class="line">....</span><br><span class="line">断开 mysql 服务（TCP 四次挥手）</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-查询缓存"><a href="#1-1-2-查询缓存" class="headerlink" title="1.1.2 查询缓存"></a>1.1.2 查询缓存</h3><blockquote>
<p> 如果是查询语句，先去缓存中查询，若有则直接返回给客户端。若没有，在查询后存储到缓存。</p>
</blockquote>
<ul>
<li><strong>当有更新、删除操作时，缓存会被清除。</strong> 对于更新比较频繁的表，查询缓存的命中率很低。</li>
<li>MySQL 8.0 版本已删除查询缓存。	（<strong>注意：和InnoDB的缓冲池 buffer pool不一样</strong>）</li>
<li>对于 MySQL 8.0 之前的版本，如果想关闭查询缓存，我们可以通过将参数 query_cache_type 设置成 DEMAND。</li>
</ul>
<h3 id="1-1-3-解析SQL"><a href="#1-1-3-解析SQL" class="headerlink" title="1.1.3 解析SQL"></a>1.1.3 解析SQL</h3><h4 id="1-1-3-1-解析器"><a href="#1-1-3-1-解析器" class="headerlink" title="1.1.3.1 解析器"></a>1.1.3.1 解析器</h4><blockquote>
<p>在正式执行 SQL 查询语句之前， MySQL 会先对 SQL 语句做解析，也就是在解析器中解析sql。</p>
</blockquote>
<ol>
<li>词法分析。提取关键字和非关键字，例如<strong>select</strong>、<strong>from</strong>。</li>
<li>语法分析。解析sql语句格式是否正确，例如将<strong>from写成form</strong>会报错。<strong>在此过程不会分析字段和表是否存在。</strong></li>
</ol>
<h3 id="1-1-4-执行SQL"><a href="#1-1-4-执行SQL" class="headerlink" title="1.1.4 执行SQL"></a>1.1.4 执行SQL</h3><h4 id="1-1-4-1-预处理器"><a href="#1-1-4-1-预处理器" class="headerlink" title="1.1.4.1 预处理器"></a>1.1.4.1 预处理器</h4><ul>
<li>检查 SQL 查询语句中的表或者字段是否存在；</li>
<li>将 select * 中的 * 符号，扩展为表上的所有列；</li>
</ul>
<h4 id="1-1-4-2-优化器"><a href="#1-1-4-2-优化器" class="headerlink" title="1.1.4.2 优化器"></a>1.1.4.2 优化器</h4><blockquote>
<p>经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。<br>基于查询成本的考虑， 选择查询成本最小的执行计划；</p>
</blockquote>
<p><strong>优化器主要负责将 SQL 查询语句的执行方案确定下来。</strong> 比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。<br>可以通过在查询语句之前添加<strong>explain</strong> 来查看会用到哪些索引。</p>
<h4 id="1-1-4-3-执行器"><a href="#1-1-4-3-执行器" class="headerlink" title="1.1.4.3 执行器"></a>1.1.4.3 执行器</h4><blockquote>
<p>经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，这个工作是由「执行器」完成的。<br>在执行的过程中，执行器就会和存储引擎交互了，交互是以记录为单位的</p>
</blockquote>
<ol>
<li>存储引擎每查出一条数据将结果返回给执行器，由执行器判断是否完全符合条件。</li>
<li>不符合继续向存储引擎索要下一条记录，如此往复，直到存储引擎把表中的所有记录读完。</li>
<li>如果符合，执行器会返回给客户端。（Server层每从存储引擎读到一条记录就会发送给客户端，之所以客户端显示的时候是直接显示所有记录的，是因为客户端是等查询语句查询完成后，才会显示出所有的记录）</li>
</ol>
<h2 id="1-2-存储引擎层"><a href="#1-2-存储引擎层" class="headerlink" title="1.2 存储引擎层"></a>1.2 存储引擎层</h2><p><img src="https://img-blog.csdnimg.cn/direct/2da9abbcec0344e0940bf9d79a3d6289.png"></p>
<ol>
<li>0、数据更新时执行器先找buffer pool缓存池中，如果在缓冲池中，同时返回给执行器。</li>
<li>1、如果未命中缓存，需要先从磁盘读入内存，然后再返回给执行器。</li>
<li>2、不管是否命中缓存，都需要将更新前的旧数据写入到undo中。</li>
<li>3、更新内存，此时变成脏数据，后续会调用接口将数据落盘。</li>
<li>4、5、同时将这个更新操作记录到redo log里面，此时redo log处于 prepare<br>状态。然后告知执行器执行完成了，随时可以提交事务。</li>
<li>6、7、执行器生成这个操作的binlog，并把binlog写入磁盘。</li>
<li>8、执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交(commit)状态，更新完成。</li>
</ol>
<h2 id="1-3-参考"><a href="#1-3-参考" class="headerlink" title="1.3 参考"></a>1.3 参考</h2><ul>
<li><strong><a href="https://mp.weixin.qq.com/s?__biz=MzI2NzM1OTM4OA==&mid=2247496095&idx=1&sn=f778531f1b45658bffa06b7dfda3c53b&chksm=ea82b46cddf53d7aaee7e0fb278bb833df60b47d062add6fceae25565506e6c2b56ad7bfdb0f&scene=126&&sessionid=0">图解MySQL是如何运行的</a></strong></li>
<li><strong><a href="https://www.xiaolincoding.com/mysql/base/how_select.html#mysql-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">执行一条 select 语句，期间发生了什么？</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 索引知识汇总</title>
    <url>/2024/01/30/mysql/mysql%20%E7%B4%A2%E5%BC%95%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80mysql-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">一、mysql 数据结构</a><ul>
<li><a href="#12-%E4%BB%80%E4%B9%88%E6%98%AFb-%E6%A0%91">1.2 什么是B(-)树？</a><ul>
<li><a href="#121-%E7%89%B9%E7%82%B9">1.2.1 特点</a></li>
<li><a href="#122-%E7%BC%BA%E7%82%B9">1.2.2 缺点</a></li>
</ul>
</li>
<li><a href="#13-%E4%BB%80%E4%B9%88%E6%98%AFb%E6%A0%91">1.3 什么是B+树？</a><ul>
<li><a href="#131-%E7%89%B9%E7%82%B9">1.3.1 特点</a></li>
<li><a href="#132-%E7%BC%BA%E7%82%B9">1.3.2 缺点</a></li>
</ul>
</li>
<li><a href="#14-%E4%B8%BA%E4%BB%80%E4%B9%88mysql-%E4%BD%BF%E7%94%A8%E4%BA%86b%E6%A0%91">1.4 为什么Mysql 使用了B+树?</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E7%B4%A2%E5%BC%95">二、索引</a><ul>
<li><a href="#21-%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A2%E5%BC%95">2.1 什么是索引？</a><ul>
<li><a href="#211-%E5%AE%9A%E4%B9%89">2.1.1 定义</a></li>
<li><a href="#212-%E4%B8%8D%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95">2.1.2 不手动创建索引如何？</a></li>
<li><a href="#213-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A6%86%E7%9B%96%E6%9F%A5%E8%AF%A2">2.1.3 什么是回表查询和覆盖查询？</a></li>
</ul>
</li>
<li><a href="#22-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%86%E7%B1%BB">2.2 索引的分类</a><ul>
<li><a href="#221-%E6%8C%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB">2.2.1 按数据结构分类</a></li>
<li><a href="#222-%E6%8C%89%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E5%88%86%E7%B1%BB">2.2.2 按物理存储分类</a></li>
<li><a href="#223-%E6%8C%89%E5%AD%97%E6%AE%B5%E7%89%B9%E6%80%A7%E5%88%86%E7%B1%BB">2.2.3 按字段特性分类</a></li>
<li><a href="#224-%E6%8C%89%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0%E5%88%86%E7%B1%BB">.2.2.4 按字段个数分类</a></li>
<li><a href="#225-%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95">2.2.5 联合索引：</a></li>
</ul>
</li>
<li><a href="#23-%E4%BD%95%E6%97%B6%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">2.3 何时创建索引？</a><ul>
<li><a href="#231-%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">2.3.1 索引的优缺点</a></li>
<li><a href="#232-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%80%82%E7%94%A8%E7%B4%A2%E5%BC%95">2.3.2 什么时候适用索引？</a></li>
<li><a href="#233-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%B8%8D%E9%9C%80%E8%A6%81%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">2.3.3 什么时候不需要创建索引？</a></li>
</ul>
</li>
<li><a href="#24-%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96">2.4 索引优化</a></li>
<li><a href="#26-explain-%E7%9A%84type%E6%9C%89%E5%93%AA%E4%BA%9B">2.6 explain 的type有哪些？</a></li>
<li><a href="#26-%E6%80%BB%E7%BB%93%E5%9B%BE">2.6 总结图</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考：</a></li>
</ul>
</li>
</ul>
<h1 id="一、mysql-数据结构"><a href="#一、mysql-数据结构" class="headerlink" title="一、mysql 数据结构"></a>一、mysql 数据结构</h1><h2 id="1-2-什么是B-树？"><a href="#1-2-什么是B-树？" class="headerlink" title="1.2 什么是B(-)树？"></a>1.2 什么是B(-)树？</h2><p><img src="https://img-blog.csdnimg.cn/direct/877ba9f7020547f2beca72b1d2d4b94e.png"></p>
<h3 id="1-2-1-特点"><a href="#1-2-1-特点" class="headerlink" title="1.2.1 特点"></a>1.2.1 特点</h3><ul>
<li>B 树的每一个节点最多可以包括 M 个子节点，M 称为 B 树的阶，所以 B 树就是一个多叉树。</li>
<li>B-Tree在每一个节点(叶子结点和非叶子结点)存储了索引和数据。</li>
<li>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</li>
<li>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</li>
</ul>
<h3 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h3><ul>
<li>进行搜索的时候需要把索引和数据都加载到内存中。但那些对我们没用的数据，会增多磁盘 I&#x2F;O 操作次数，也占用内存资源。</li>
<li>范围查询需要使用中序遍历，这会涉及多个节点的磁盘 I&#x2F;O 问题，从而导致整体速度下降。</li>
</ul>
<h2 id="1-3-什么是B-树？"><a href="#1-3-什么是B-树？" class="headerlink" title="1.3 什么是B+树？"></a>1.3 什么是B+树？</h2><p><img src="https://img-blog.csdnimg.cn/direct/03e1055b62a74a6e8775e4c2bc8d6557.png"></p>
<h3 id="1-3-1-特点"><a href="#1-3-1-特点" class="headerlink" title="1.3.1 特点"></a>1.3.1 特点</h3><ul>
<li>只有叶子节点（最底层的节点）才存放了数据，非叶子节点（其他上层节）仅用来存放目录项作为索引。</li>
<li>所有节点按照索引键大小排序，构成一个双向链表，便于范围查询；</li>
<li>对于范围查询，B+树只需遍历叶子节点链表即可，而B树则需要重复中序遍历。</li>
<li>B+树的随机查找、插入和删除过程与B树相似，但在插入和删除时的平均时间复杂度较低。</li>
<li>B+ 树点节点内容是<strong>数据页</strong>，数据页里存放了用户的记录以及各种信息，每个数据页默认大小是 16 KB。</li>
</ul>
<h3 id="1-3-2-缺点"><a href="#1-3-2-缺点" class="headerlink" title="1.3.2 缺点"></a>1.3.2 缺点</h3><ul>
<li>由于键会重复出现，因此会占用更多的空间。</li>
</ul>
<h2 id="1-4-为什么Mysql-使用了B-树"><a href="#1-4-为什么Mysql-使用了B-树" class="headerlink" title="1.4 为什么Mysql 使用了B+树?"></a>1.4 为什么Mysql 使用了B+树?</h2><ul>
<li>在相同数据量的情况下，B+树比B树更矮，同阶位存放的索引更多。磁盘I&#x2F;O次数更少。因为即使在数据量很大的情况，查询一个数据的磁盘 I&#x2F;O 依然维持在 3-4次。</li>
<li>B+树叶子结点使用了双向链表连接，更适合范围查询。</li>
</ul>
<h1 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h1><h2 id="2-1-什么是索引？"><a href="#2-1-什么是索引？" class="headerlink" title="2.1 什么是索引？"></a>2.1 什么是索引？</h2><h3 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h3><blockquote>
<p>官方定义：在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。<br>简单点：用户数据的目录</p>
</blockquote>
<h3 id="2-1-2-不手动创建索引如何？"><a href="#2-1-2-不手动创建索引如何？" class="headerlink" title="2.1.2 不手动创建索引如何？"></a>2.1.2 不手动创建索引如何？</h3><p>因为B+Tree必须依靠索引才能建立，所以每张表都会有且只有一个聚簇索引。<br>在创建表时：</p>
<ul>
<li>如果有主键，默认会使用主键作为聚簇索引的索引键（key）；</li>
<li>如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键（key）；</li>
<li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；</li>
</ul>
<h3 id="2-1-3-什么是回表查询和覆盖查询？"><a href="#2-1-3-什么是回表查询和覆盖查询？" class="headerlink" title="2.1.3 什么是回表查询和覆盖查询？"></a>2.1.3 什么是回表查询和覆盖查询？</h3><ul>
<li><strong>回表查询</strong>：当使用二级索引查询数据时，找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree树查询到对应的叶子节点，然后获取整行数据。这个过程叫「回表」，也就是说要查两个 B+Tree 才能查到想要的数据。例如：<code>select * from product where product_no = &#39;0002&#39;;</code></li>
<li><strong>覆盖查询</strong>：在二级索引的 B+Tree 就能查询到结果的过程就叫作「覆盖索引」，也就是只需要查一个 B+Tree 就能找到数据。例如：<code>select id from product where product_no = &#39;0002&#39;; </code></li>
</ul>
<h2 id="2-2-索引的分类"><a href="#2-2-索引的分类" class="headerlink" title="2.2 索引的分类"></a>2.2 索引的分类</h2><ul>
<li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li>
<li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li>
<li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li>
<li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li>
</ul>
<h3 id="2-2-1-按数据结构分类"><a href="#2-2-1-按数据结构分类" class="headerlink" title="2.2.1 按数据结构分类"></a>2.2.1 按数据结构分类</h3><p><img src="https://img-blog.csdnimg.cn/direct/56683d4bdb414ef88147bbd0309f9aef.png"><br>InnoDB 是在 MySQL 5.5 之后成为默认的 MySQL 存储引擎，B+Tree 索引类型也是 MySQL 存储引擎采用最多的索引类型。</p>
<h3 id="2-2-2-按物理存储分类"><a href="#2-2-2-按物理存储分类" class="headerlink" title="2.2.2 按物理存储分类"></a>2.2.2 按物理存储分类</h3><ul>
<li><strong>主键索引</strong>：叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li>
<li><strong>二级索引</strong>：叶子节点存放的是主键值，而不是实际数据。</li>
</ul>
<h3 id="2-2-3-按字段特性分类"><a href="#2-2-3-按字段特性分类" class="headerlink" title="2.2.3 按字段特性分类"></a>2.2.3 按字段特性分类</h3><ul>
<li><strong>主键索引</strong>：主键索引就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。</li>
<li><strong>唯一索引</strong>：唯一索引建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。</li>
<li><strong>普通索引</strong>：普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。</li>
<li><strong>前缀索引</strong>：前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</li>
</ul>
<h3 id="2-2-4-按字段个数分类"><a href="#2-2-4-按字段个数分类" class="headerlink" title=".2.2.4 按字段个数分类"></a>.2.2.4 按字段个数分类</h3><ul>
<li><strong>单列索引</strong>:建立在单列上的索引称为单列索引，比如主键索引；</li>
<li><strong>联合索引</strong>:建立在多列上的索引称为联合索引；</li>
</ul>
<h3 id="2-2-5-联合索引："><a href="#2-2-5-联合索引：" class="headerlink" title="2.2.5 联合索引："></a>2.2.5 联合索引：</h3><p><strong>叶子结点是双向列表</strong><br><img src="https://img-blog.csdnimg.cn/direct/628a212ca3a743a9b26c118128cdf956.png"></p>
<p>使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「<strong>最左匹配原则</strong>」，联合索引会失效，这样就无法利用到索引快速查询的特性了。</p>
<p><strong>联合索引范围查询</strong>：<br>联合索引的最左匹配原则，在遇到范围查询（如 &gt;、&lt;）的时候，就会停止匹配，也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。注意，对于 &gt;&#x3D;、&lt;&#x3D;、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配</p>
<p><strong>索引下推</strong>：<br>在联合索引遍历过程中，<strong>对联合索引中包含的字段先做判断</strong>，直接过滤掉不满足条件的记录，减少回表次数</p>
<h2 id="2-3-何时创建索引？"><a href="#2-3-何时创建索引？" class="headerlink" title="2.3 何时创建索引？"></a>2.3 何时创建索引？</h2><h3 id="2-3-1-索引的优缺点"><a href="#2-3-1-索引的优缺点" class="headerlink" title="2.3.1 索引的优缺点"></a>2.3.1 索引的优缺点</h3><p>优点：</p>
<ul>
<li>通过创建唯一性索引，可以保证数据库表中的每一行数据的唯一性。</li>
<li>可以加快数据的检索速度</li>
<li>可以加速表与表之间的连接</li>
<li>在使用分组和排序进行检索的时候，可以减少查询中分组和排序的时间</li>
</ul>
<p>缺点：</p>
<ul>
<li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li>
<li>索引需要占用物理空间，数据量越大，占用空间越大</li>
<li>会降低表的增删改的效率，因为每次增删改索引，都需要进行动态维护</li>
</ul>
<h3 id="2-3-2-什么时候适用索引？"><a href="#2-3-2-什么时候适用索引？" class="headerlink" title="2.3.2 什么时候适用索引？"></a>2.3.2 什么时候适用索引？</h3><ul>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段应该创建索引</li>
<li>查询中排序的字段(因为索引是有顺序的)</li>
<li>查询中统计或者分组的字段；</li>
<li>与其他表关联的字段(join in)</li>
</ul>
<h3 id="2-3-3-什么时候不需要创建索引？"><a href="#2-3-3-什么时候不需要创建索引？" class="headerlink" title="2.3.3 什么时候不需要创建索引？"></a>2.3.3 什么时候不需要创建索引？</h3><ul>
<li>不会被WHERE ，GROUP BY，ORDER BY 用到的字段。</li>
<li>表数据太少的时候，不需要创建索引</li>
<li>字段中数据重复率高的不要创建索引。</li>
<li>经常更新的字段不用创建索引。索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li>
</ul>
<h2 id="2-4-索引优化"><a href="#2-4-索引优化" class="headerlink" title="2.4 索引优化"></a>2.4 索引优化</h2><ul>
<li>前缀索引优化；</li>
<li>覆盖索引优化；</li>
<li>主键索引最好是自增的；</li>
<li>防止索引失效；</li>
<li>。。。。。。</li>
</ul>
<h2 id="2-6-explain-的type有哪些？"><a href="#2-6-explain-的type有哪些？" class="headerlink" title="2.6 explain 的type有哪些？"></a>2.6 explain 的type有哪些？</h2><p><img src="https://img-blog.csdnimg.cn/direct/35452a581ff34a23852bb6e3f6d4b05f.png"></p>
<p>对于执行计划，参数有：</p>
<p>possible_keys 字段表示可能用到的索引；<br>key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；<br>key_len 表示索引的长度；<br>rows 表示扫描的数据行数。<br>type 表示数据扫描类型，我们需要重点看这个。<br>type 字段就是描述了找到所需数据时使用的扫描方式是什么，<br><strong>执行效率从低到高的顺序为</strong>：</p>
<ol>
<li>All（全表扫描）；</li>
<li>index（全索引扫描）；</li>
<li>range（索引范围扫描）；<strong>从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式</strong></li>
<li>ref（非唯一索引扫描）；</li>
<li>eq_ref（唯一索引扫描）；</li>
<li>const（结果只有一条的主键或唯一索引扫描）。</li>
</ol>
<h2 id="2-6-总结图"><a href="#2-6-总结图" class="headerlink" title="2.6 总结图"></a>2.6 总结图</h2><p><img src="https://img-blog.csdnimg.cn/direct/2c1ae70313d94eec9ad1c0485a8eebe4.png"></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.xiaolincoding.com/mysql/index/index_interview.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A2%E5%BC%95">索引常见面试题</a></li>
<li><a href="https://blog.csdn.net/m0_49501453/article/details/123833272?spm=1001.2014.3001.5506">python后端面试锦集
</a></li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 锁知识汇总</title>
    <url>/2024/01/31/mysql/mysql%20%E9%94%81%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E9%94%81">一、锁</a><ul>
<li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AF%E9%94%81">1.1 什么是锁？</a></li>
<li><a href="#12-%E5%85%A8%E5%B1%80%E9%94%81">1.2 全局锁</a><ul>
<li><a href="#121-%E5%AE%9A%E4%B9%89">1.2.1 定义</a></li>
<li><a href="#122-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">1.2.2 应用场景</a></li>
<li><a href="#123-%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98">1.2.3 会出现的问题</a></li>
<li><a href="#124-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">1.2.4 解决方法</a></li>
</ul>
</li>
<li><a href="#13-%E8%A1%A8%E7%BA%A7%E9%94%81">1.3 表级锁</a><ul>
<li><a href="#131-%E8%A1%A8%E9%94%81">1.3.1 表锁</a></li>
<li><a href="#132-%E5%85%83%E6%95%B0%E6%8D%AE%E9%94%81mdl">1.3.2 元数据锁（MDL）</a></li>
<li><a href="#133-%E6%84%8F%E5%90%91%E9%94%81">1.3.3 意向锁</a></li>
<li><a href="#134-auto-inc%E9%94%81">1.3.4 AUTO-INC锁</a></li>
</ul>
</li>
<li><a href="#14-%E8%A1%8C%E7%BA%A7%E9%94%81">1.4 行级锁</a><ul>
<li><a href="#141-%E8%AE%B0%E5%BD%95%E9%94%81record-lock">1.4.1 记录锁(Record Lock)</a></li>
<li><a href="#142-%E9%97%B4%E9%9A%99%E9%94%81gap-lock">1.4.2 间隙锁(Gap Lock)</a></li>
<li><a href="#143-next-key-lock%E8%AE%B0%E5%BD%95%E9%94%81%E9%97%B4%E9%9A%99%E9%94%81">1.4.3 Next-Key Lock(记录锁+间隙锁)</a></li>
<li><a href="#144-%E6%8F%92%E5%85%A5%E6%84%8F%E5%90%91%E9%94%81">1.4.4 插入意向锁</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="一、锁"><a href="#一、锁" class="headerlink" title="一、锁"></a>一、锁</h1><h2 id="1-1-什么是锁？"><a href="#1-1-什么是锁？" class="headerlink" title="1.1 什么是锁？"></a>1.1 什么是锁？</h2><blockquote>
<p><strong>锁是用来控制对数据库中数据访问的机制。</strong>在并发环境下，多个用户可能同时访问相同的数据，这样就会产生数据的冲突和不一致的情况，为了避免这种情况发生，MySQL提供了多种锁机制。</p>
</blockquote>
<h2 id="1-2-全局锁"><a href="#1-2-全局锁" class="headerlink" title="1.2 全局锁"></a>1.2 全局锁</h2><h3 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1 定义"></a>1.2.1 定义</h3><blockquote>
<p>全局锁就是对整个数据库实例加锁。</p>
</blockquote>
<p>MySQL提供了一个加全局读锁的方法，命令是：<code>flush tables with read lock</code>，执行后，整个数据库就处于只读状态了。</p>
<h3 id="1-2-2-应用场景"><a href="#1-2-2-应用场景" class="headerlink" title="1.2.2 应用场景"></a>1.2.2 应用场景</h3><p><code>全库逻辑备份。</code>这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。</p>
<h3 id="1-2-3-会出现的问题"><a href="#1-2-3-会出现的问题" class="headerlink" title="1.2.3 会出现的问题"></a>1.2.3 会出现的问题</h3><p>加上全局锁，意味着整个数据库都是只读状态。</p>
<ul>
<li>那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。</li>
<li>若从库备份，则在备份期间无法执行主库同步的binlog，则会导致主从延迟。</li>
</ul>
<h3 id="1-2-4-解决方法"><a href="#1-2-4-解决方法" class="headerlink" title="1.2.4 解决方法"></a>1.2.4 解决方法</h3><blockquote>
<p>前提：数据库的引擎支持的事务支持可重复读的隔离级别。例如Innodb，MyiSam不支持事务，所以只能全局锁。</p>
</blockquote>
<p>mysqldump是官方的逻辑备份工具。当mysqldump使用参数-single-transaction时，将在导数据之前启动事务，由于<code>MVCC</code>的支持，数据可以在这个过程中正常更新。single-transaction仅适用于所有表使用事务引擎的库。</p>
<h2 id="1-3-表级锁"><a href="#1-3-表级锁" class="headerlink" title="1.3 表级锁"></a>1.3 表级锁</h2><h3 id="1-3-1-表锁"><a href="#1-3-1-表锁" class="headerlink" title="1.3.1 表锁"></a>1.3.1 表锁</h3><ul>
<li>表共享读锁：<code>lock tables t_student read;//表级别的共享锁，也就是读锁；</code>读锁会阻塞写。</li>
<li>表独占写锁：<code>lock tables t_stuent write;//表级别的独占锁，也就是写锁；</code>写锁会阻塞写和读 。</li>
<li>释放锁：<code>unlock tables</code>；释放当前会话的所有表锁</li>
</ul>
<h3 id="1-3-2-元数据锁（MDL）"><a href="#1-3-2-元数据锁（MDL）" class="headerlink" title="1.3.2 元数据锁（MDL）"></a>1.3.2 元数据锁（MDL）</h3><blockquote>
<p>MDL不需要显式使用，数据库自动调用</p>
</blockquote>
<p>对一张表进行 CRUD 操作时，加的是 MDL 读锁；<br>对一张表做结构变更操作的时候，加的是 MDL 写锁；<br>MDL 是为了保证当用户对表执行 CRUD 操作时，<strong>防止其他线程对这个表结构做了变更</strong>。</p>
<p>当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。</p>
<p>反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。<br><strong>注意：事务执行期间，MDL 是一直持有的</strong>。开启长事务的同时其他事务变更表字段(<strong>MDL写锁</strong>)，长事务不及时提交，会导致之后的<strong>所有操作</strong>都被阻塞。</p>
<p>MDL写锁优先级大于MDL读锁</p>
<h3 id="1-3-3-意向锁"><a href="#1-3-3-意向锁" class="headerlink" title="1.3.3 意向锁"></a>1.3.3 意向锁</h3><blockquote>
<p>在使用 <code>InnoDB 引擎</code>的表里对某些记录加上「<code>共享锁/独占锁</code>(行锁)」之前，需要先在表级别加上一个「<code>意向共享锁/意向独占锁</code>」；</p>
</blockquote>
<p><strong>为什么会有意向锁？</strong><br>表锁和行锁是满足读读共享、读写互斥、写写互斥的。<br>没有<code>意向锁</code>：加<code>「独占表锁」</code>时，就需要遍历表里所有记录，查看是否有记录存在独占行锁，这样效率会很慢。<br>有<code>意向锁</code>：加<code>「独占表锁」</code>时，直接查该表是否有意向独占锁。<br>所以，<strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong></p>
<h3 id="1-3-4-AUTO-INC锁"><a href="#1-3-4-AUTO-INC锁" class="headerlink" title="1.3.4 AUTO-INC锁"></a>1.3.4 AUTO-INC锁</h3><blockquote>
<p>主键自增使用的就是AUTO-INC锁</p>
</blockquote>
<p>在插入数据时，会加一个表级别的 <code>AUTO-INC 锁</code>，然后为被 AUTO_INCREMENT 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。<br>AUTO-INC 锁是特殊的表锁机制，锁不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放。</p>
<p>但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。<br><code>轻量级的锁</code>：在插入数据时，给该字段赋值一个自增的值后，直接释放，不再等待整条语句执行完毕。</p>
<h2 id="1-4-行级锁"><a href="#1-4-行级锁" class="headerlink" title="1.4 行级锁"></a>1.4 行级锁</h2><p><code>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</code><br>共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。<br><img src="https://img-blog.csdnimg.cn/direct/512cff98d556499ca67738953d78eb6b.png"></p>
<h3 id="1-4-1-记录锁-Record-Lock"><a href="#1-4-1-记录锁-Record-Lock" class="headerlink" title="1.4.1 记录锁(Record Lock)"></a>1.4.1 记录锁(Record Lock)</h3><blockquote>
<p>只将当前数据加锁<br>S锁与X锁不兼容，X锁与X锁不兼容</p>
</blockquote>
<h3 id="1-4-2-间隙锁-Gap-Lock"><a href="#1-4-2-间隙锁-Gap-Lock" class="headerlink" title="1.4.2 间隙锁(Gap Lock)"></a>1.4.2 间隙锁(Gap Lock)</h3><blockquote>
<p>锁定一个范围，但是不包含记录本身（左开右开区间）<br>只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p>
</blockquote>
<p>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。</p>
<h3 id="1-4-3-Next-Key-Lock-记录锁-间隙锁"><a href="#1-4-3-Next-Key-Lock-记录锁-间隙锁" class="headerlink" title="1.4.3 Next-Key Lock(记录锁+间隙锁)"></a>1.4.3 Next-Key Lock(记录锁+间隙锁)</h3><blockquote>
<p>锁定一个范围，并且锁定记录本身（左开右闭区间）</p>
</blockquote>
<p>next-key lock 是包含<code>间隙锁</code>+<code>记录锁</code>的，如果一个事务获取了 X 型的 <code>next-key lock</code>，那么另外一个事务在获取相同范围的 X 型的 <code>next-key lock</code> 时，是会被阻塞的（XX互斥）。</p>
<h3 id="1-4-4-插入意向锁"><a href="#1-4-4-插入意向锁" class="headerlink" title="1.4.4 插入意向锁"></a>1.4.4 插入意向锁</h3><blockquote>
<p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（<code>next-key lock</code> 也包含间隙锁）。<br>如果有的话，插入操作就会发生阻塞，在此期间会生成一个<code>插入意向锁</code></p>
</blockquote>
<p><strong>插入意向锁名字虽然有意向锁，但是它并不是意向锁，它是一种特殊的间隙锁，属于<code>行级别锁</code>。</strong></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI七层模型和TCP_IP四层(五层)模型知识汇总</title>
    <url>/2024/01/18/network/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP_IP%E5%9B%9B%E5%B1%82(%E4%BA%94%E5%B1%82)%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E4%BB%80%E4%B9%88%E6%98%AFosi%E6%A8%A1%E5%9E%8B">一、什么是OSI模型？</a><ul>
<li><a href="#11%E5%AE%9A%E4%B9%89">1.1定义：</a></li>
<li><a href="#12-%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84">1.2 网络结构：</a></li>
<li><a href="#13-%E6%80%BB%E8%A7%88%E5%9B%BE">1.3 总览图</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E4%BB%80%E4%B9%88%E6%98%AFtcpip%E6%A8%A1%E5%9E%8B">二、什么是TCP&#x2F;IP模型</a><ul>
<li><a href="#21-%E5%AE%9A%E4%B9%89">2.1 定义：</a></li>
<li><a href="#22-%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%9B%E5%B1%82%E4%BA%94%E5%B1%82">2.2 网络结构(四层&#x2F;五层)</a></li>
<li><a href="#23-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%895%E5%B1%82%E6%9E%B6%E6%9E%84">2.3 为什么会有5层架构？</a></li>
<li><a href="#24-%E6%80%BB%E8%A7%88%E5%9B%BE">2.4 总览图</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB">三、关系与区别</a><ul>
<li><a href="#31-%E6%80%BB%E8%A7%88%E5%9B%BE">3.1 总览图</a></li>
<li><a href="#32-%E5%85%B3%E7%B3%BB">3.2 关系</a></li>
<li><a href="#33-%E5%8C%BA%E5%88%AB">3.3 区别</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献：</a></li>
</ul>
<h3 id="一、什么是OSI模型？"><a href="#一、什么是OSI模型？" class="headerlink" title="一、什么是OSI模型？"></a>一、什么是OSI模型？</h3><h4 id="1-1定义："><a href="#1-1定义：" class="headerlink" title="1.1定义："></a><a href="https://wenku.baidu.com/view/6025b70e6c85ec3a87c2c512.html?_wkts_=1705544418111&bdQuery=%E4%BB%80%E4%B9%88%E6%98%AFOSI%E5%8D%8F%E8%AE%AE">1.1定义</a>：</h4><blockquote>
<p>OSI（Open system interconnect）,即开放式系统互联。一般叫OSI参考模型，是 <strong>ISO（国际标准化组织）</strong> 在1985年研究的网络互联模型，用于计算机或通信系统间互联的标准体系。。ISO为了使网络更为普及，推出了OSI模型。其含义就是推荐所有公司使用这个规范来控制网络。这样所有的公司就有了相同的规范，就可以进行互联。</p>
</blockquote>
<h4 id="1-2-网络结构："><a href="#1-2-网络结构：" class="headerlink" title="1.2 网络结构："></a>1.2 网络结构：</h4><p>从上(贴近用户侧)到下依次为：</p>
<ol>
<li><strong>应用层</strong>：为用户的应用程序提供网络服务。应用层是OSI参考模型的最高层，是用户与网络的接口。</li>
<li><strong>表现层</strong>：将信息表示为一定形式和格式的数据流。表示层处理流经结点的数据编码的表示方式问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出。数据格式化、数据加密</li>
<li><strong>会话层</strong>：负责通信主机之间会话的建立、管理和拆除，协调通信双方的会话。会话层主要功能是管理和协调不同主机上各种进程之间的通信（对话），即负责建立、管理和终止应用程序之间的会话建立、管理和维护会话</li>
<li><strong>传输层</strong>：负责通信主机间端到端的连接。传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。</li>
<li><strong>网络层</strong>：负责将分组从源机送到目的机，包括寻址和最优路径选择等。网络层是为传输层提供服务的，传送的协议数据单元称为数据包或分组。</li>
<li><strong>数据链路层</strong>：提供可靠的帧传递，实现差错控制、流控等等。数据链路层是为网络层提供服务的，解决两个相邻结点之间的通信问题。</li>
<li><strong>物理层</strong>：提供透明的比特流（01流）传递。物理层是OSI参考模型的最低层，它利用传输介质为数据链路层提供物理连接。</li>
</ol>
<h4 id="1-3-总览图"><a href="#1-3-总览图" class="headerlink" title="1.3 总览图"></a>1.3 总览图</h4><p><img src="https://img-blog.csdnimg.cn/direct/55f6da17f9e8424ab45e2bfb0b99ad65.png"></p>
<h3 id="二、什么是TCP-IP模型"><a href="#二、什么是TCP-IP模型" class="headerlink" title="二、什么是TCP&#x2F;IP模型"></a>二、什么是TCP&#x2F;IP模型</h3><h4 id="2-1-定义："><a href="#2-1-定义：" class="headerlink" title="2.1 定义："></a>2.1 定义：</h4><blockquote>
<p> <strong>TCP&#x2F;IP（Transmission Control Protocol&#x2F;Internet Protocol，传输控制协议&#x2F;网际协议）</strong> 是指能够在多个不同网络间实现信息传输的协议簇。TCP&#x2F;IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP&#x2F;IP协议中TCP协议和IP协议最具代表性，所以被称为TCP&#x2F;IP协议</p>
</blockquote>
<h4 id="2-2-网络结构-四层-五层"><a href="#2-2-网络结构-四层-五层" class="headerlink" title="2.2 网络结构(四层&#x2F;五层)"></a>2.2 网络结构(四层&#x2F;五层)</h4><p>从上(贴近用户侧)到下依次为：</p>
<ol>
<li><strong>应用层</strong>：应用层的任务是通过应用进程间的交互来完成特定网络应用。对于不同的网络应用需要不同的应用层协议。例如，HTTP、FTP、SMTP协议等。我们把应用层交互的数据单元称为<strong>报文</strong>。</li>
<li><strong>传输层</strong>：为两台主机进程之间的通信提供通用的<strong>数据传输服务</strong>，保证了数据包的顺序传送及数据的完整性。包含两种协议：TCP、UDP</li>
<li><strong>网络层</strong>：主要解决主机到主机的通信问题。(互联网使用的网络层协议是无连接的网际协议（Intert Protocol）和许多路由选择协议，因此互联网的网络层也叫做网际层或IP层)。 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP&#x2F;IP 体系结构中，由于<strong>网络层使用 IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称 数据报。</li>
<li><strong>网络接口层</strong>：负责监视数据在主机和网络之间的交换。</li>
</ol>
<h4 id="2-3-为什么会有5层架构？"><a href="#2-3-为什么会有5层架构？" class="headerlink" title="2.3 为什么会有5层架构？"></a>2.3 为什么会有5层架构？</h4><blockquote>
<p>还有一种是五层协议的体系结构，是 <strong>专门为介绍网络原理(为了学术学习)</strong> 而设计的，与TCP&#x2F;IP四层模型唯一不同的就是将网络接口层分为了数据链路层和物理层，在实际的<strong>应用中还是使用TCP&#x2F;IP四层模型的</strong>。</p>
</blockquote>
<h4 id="2-4-总览图"><a href="#2-4-总览图" class="headerlink" title="2.4 总览图"></a>2.4 总览图</h4><p><img src="https://img-blog.csdnimg.cn/direct/ad0542d7ff53413abbc5474f4ad86fa7.png"></p>
<h3 id="三、关系与区别"><a href="#三、关系与区别" class="headerlink" title="三、关系与区别"></a>三、关系与区别</h3><h4 id="3-1-总览图"><a href="#3-1-总览图" class="headerlink" title="3.1 总览图"></a>3.1 总览图</h4><p><img src="https://img-blog.csdnimg.cn/direct/2dfb43a49f4c4e51b0c96fb4ef5262b2.png"></p>
<h4 id="3-2-关系"><a href="#3-2-关系" class="headerlink" title="3.2 关系"></a>3.2 关系</h4><ol>
<li>TCP&#x2F;IP四层模型是OSI七层模型的简化版，但是大致的核心内容是很类似的。</li>
<li>OSI引入了服务、接口、协议、分层的概念，而TCP&#x2F;IP借鉴了OSI的概念。</li>
<li>OSI先有模型，后有协议，先有标准，后进行实践，而TCP&#x2F;IP先有协议和应用再提出了模型，且是参照的OSI模型。</li>
<li>OSI虽然是官方提出的，但是由于一些原因，在它被完善之前，由民间开发的TCP&#x2F;IP早已投入实际使用了，所以它几乎是只存在与教科书中，并没有大范围地投入使用。</li>
</ol>
<h4 id="3-3-区别"><a href="#3-3-区别" class="headerlink" title="3.3 区别"></a>3.3 区别</h4><ol>
<li>TCP&#x2F;IP他是一个<strong>协议簇</strong>；而OSI（开放系统互联）则是一个<strong>模型</strong>，且TCP&#x2F;IP的开发时间在OSI之前。</li>
<li>TCP&#x2F;IP是由一些交互性的模块做成的分层次的协议，其中每个模块提供特定的功能；OSi则指定了哪个功能是属于哪一层的。</li>
<li>TCP&#x2F;IP是<strong>四层&#x2F;五层</strong>结构，而OSI是<strong>七层结构</strong>。OSI的最高三层在TCP中用应用层表示，在TCP&#x2F;IP四层结构中将OSI最后两层表示为了网络接口层。</li>
</ol>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul>
<li><a href="https://www.php.cn/faq/494920.html">osi和tcp&#x2F;ip的区别和联系是什么</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/268196525">OSI七层模型和TCP&#x2F;IP四层模型以及五层模型</a></li>
</ul>
<p>Author：黑猫</p>
]]></content>
      <categories>
        <category>tcp</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP 重传、滑动窗口、流量控制、拥塞控制知识汇总</title>
    <url>/2024/01/19/network/TCP%20%E9%87%8D%E4%BC%A0%E3%80%81%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E3%80%81%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E3%80%81%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<blockquote>
<p>本文对此文章做出了个人的总计。<br><a href="https://www.xiaolincoding.com/network/3_tcp/tcp_feature.html#%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6"><strong>TCP 重传、滑动窗口、流量控制、拥塞控制</strong></a></p>
</blockquote>
<ul>
<li><a href="#%E4%B8%80%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6">一、重传机制</a><ul>
<li><a href="#11-%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0">1.1 超时重传</a><ul>
<li><a href="#111-rttrto%E6%98%AF%E4%BB%80%E4%B9%88">1.1.1 RTT、RTO是什么？</a></li>
<li><a href="#112-rto%E8%BE%83%E5%A4%A7%E6%88%96%E8%BE%83%E5%B0%8F%E4%BC%9A%E5%A6%82%E4%BD%95">1.1.2 RTO较大或较小会如何？</a></li>
<li><a href="#113-rto%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%A4%A7%E5%90%88%E9%80%82">1.1.3 RTO设置多大合适？</a></li>
</ul>
</li>
<li><a href="#12-%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0">1.2 快速重传</a><ul>
<li><a href="#121-%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">1.2.1 工作方式</a></li>
<li><a href="#122-%E9%9D%A2%E4%B8%B4%E7%9A%84%E9%97%AE%E9%A2%98">1.2.2 面临的问题</a></li>
</ul>
</li>
<li><a href="#13-sack">1.3 SACK</a><ul>
<li><a href="#131-%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">1.3.1 工作方式</a></li>
</ul>
</li>
<li><a href="#14-d-sack">1.4 D-SACK</a><ul>
<li><a href="#141-%E5%AE%9A%E4%B9%89">1.4.1 定义</a></li>
<li><a href="#142-%E5%BA%94%E7%AD%94%E4%B8%A2%E5%A4%B1">1.4.2 应答丢失</a></li>
<li><a href="#143-%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E5%AF%BC%E8%87%B4%E5%AF%BC%E8%87%B4%E9%87%8D%E4%BC%A0">1.4.3 网络延迟导致导致重传</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3">二、滑动窗口</a></li>
<li><a href="#21-%E5%AE%9A%E4%B9%89">2.1 定义</a></li>
</ul>
</li>
</ul>
<h1 id="一、重传机制"><a href="#一、重传机制" class="headerlink" title="一、重传机制"></a>一、重传机制</h1><h2 id="1-1-超时重传"><a href="#1-1-超时重传" class="headerlink" title="1.1 超时重传"></a>1.1 超时重传</h2><blockquote>
<p>在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 ACK 确认应答报文，就会重发该数据。</p>
</blockquote>
<h3 id="1-1-1-RTT、RTO是什么？"><a href="#1-1-1-RTT、RTO是什么？" class="headerlink" title="1.1.1 RTT、RTO是什么？"></a>1.1.1 RTT、RTO是什么？</h3><p><img src="https://img-blog.csdnimg.cn/direct/b8fed3a62b024a1aa655b1a15a36fc30.png"></p>
<ul>
<li><strong>RTT（Round-Trip Time 往返时延）</strong>:从客户端向服务端发送一个数据包开始，到接到服务端的应答结束，此段时间即为RTT(包的往返时间)。</li>
<li><strong>RTO（Retransmission Timeout 超时重传时间）</strong>: 客户端在RTO时间内没收到服务端的应答时，会触发重传机制。</li>
</ul>
<h3 id="1-1-2-RTO较大或较小会如何？"><a href="#1-1-2-RTO较大或较小会如何？" class="headerlink" title="1.1.2 RTO较大或较小会如何？"></a>1.1.2 RTO较大或较小会如何？</h3><ul>
<li><strong>若RTO较大时</strong>：重发就慢，丢了老半天才重发，没有效率，性能差。</li>
<li><strong>若RTO较小时</strong>：会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。</li>
</ul>
<h3 id="1-1-3-RTO设置多大合适？"><a href="#1-1-3-RTO设置多大合适？" class="headerlink" title="1.1.3 RTO设置多大合适？"></a>1.1.3 RTO设置多大合适？</h3><ol>
<li>超时重传时间 RTO 的值应该<strong>略大于</strong>报文往返 RTT 的值。</li>
<li>RTO需要根据来往的请求动态进行计算。</li>
<li>如果超时重发的数据，再次超时的时候，又需要重传的时候，TCP 的策略是<strong>超时间隔加倍</strong>(每次遇到超时重传，RTO都会×2)。</li>
</ol>
<h2 id="1-2-快速重传"><a href="#1-2-快速重传" class="headerlink" title="1.2 快速重传"></a>1.2 快速重传</h2><blockquote>
<p>不以时间驱动重传，而是以数据(应答)来驱动重传。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/b67b77e5a4cc4615b4156cc12058e304.png"></p>
<h3 id="1-2-1-工作方式"><a href="#1-2-1-工作方式" class="headerlink" title="1.2.1 工作方式"></a>1.2.1 工作方式</h3><blockquote>
<p>快速重传的工作方式是当收到<strong>三个相同的 ACK 报文</strong>时，会在定时器过期之前，<strong>重传丢失的报文段</strong>。</p>
</blockquote>
<h3 id="1-2-2-面临的问题"><a href="#1-2-2-面临的问题" class="headerlink" title="1.2.2 面临的问题"></a>1.2.2 面临的问题</h3><p>快速重传解决了超时时间的问题，但如果丢失多个seq，那么需要每个seq都要收到三个相同的ACK才可以进行重传。那么快速重传时，是传一个seq，还是传递之后所有的seq？</p>
<ul>
<li>传一个：每个seq都要收到三个相同的ACK才会继续重传，效率很低。</li>
<li>传多个：每次重传都重传之后的seq，因为接收端已接收到了这些seq，导致重复接收，浪费资源。</li>
</ul>
<h2 id="1-3-SACK"><a href="#1-3-SACK" class="headerlink" title="1.3 SACK"></a>1.3 SACK</h2><h3 id="1-3-1-工作方式"><a href="#1-3-1-工作方式" class="headerlink" title="1.3.1 工作方式"></a>1.3.1 工作方式</h3><blockquote>
<p>这种方式需要在 <strong>TCP 头部「选项」字段里加一个 SACK</strong> 的东西，它可以<strong>将已收到的数据的信息发送给「发送方」</strong>，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以<strong>只重传丢失的数据</strong>。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/5c31c285c8d9444bbee0de966801e38a.png"><br>200~299数据丢失，与快速重传一样，在收到三次相同的ACK后，触发重传，根据SACK，重传所有丢失的数据。</p>
<h2 id="1-4-D-SACK"><a href="#1-4-D-SACK" class="headerlink" title="1.4 D-SACK"></a>1.4 D-SACK</h2><h3 id="1-4-1-定义"><a href="#1-4-1-定义" class="headerlink" title="1.4.1 定义"></a>1.4.1 定义</h3><blockquote>
<p>告诉接收方，哪些数据被重传了。<br>告诉发送方，数据为什么被重传了。</p>
</blockquote>
<h3 id="1-4-2-应答丢失"><a href="#1-4-2-应答丢失" class="headerlink" title="1.4.2 应答丢失"></a>1.4.2 应答丢失</h3><p><img src="https://img-blog.csdnimg.cn/direct/cb455633145e4b3199df05cebf082476.png"></p>
<h3 id="1-4-3-网络延迟导致导致重传"><a href="#1-4-3-网络延迟导致导致重传" class="headerlink" title="1.4.3 网络延迟导致导致重传"></a>1.4.3 网络延迟导致导致重传</h3><p><img src="https://img-blog.csdnimg.cn/direct/b28425aa0bf543c0a08a77b7153e7934.png"></p>
<h2 id="二、滑动窗口"><a href="#二、滑动窗口" class="headerlink" title="二、滑动窗口"></a>二、滑动窗口</h2><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><blockquote>
<p>系统开辟的一定大小的缓存区间。将发送方发送的一定大小的数据存放到窗口，无需等待应答。<br>窗口的大小指无需等待应答，而且可以连续发送数据的最大值。<br>收到应答之后，将会从缓冲区删除掉该数据，则可以继续发送数据。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/direct/4886b7589e7f403cb87638e5ffc9d3ce.png"><br>发送窗口 + 可用窗口 &#x3D; 窗口的大小<br>当可用窗口为0时，无法再接收数据。</p>
<p>当ACK应答之后<br><img src="https://img-blog.csdnimg.cn/direct/187b5fee58d2491f9f087da465ba01db.png"><br>可用窗口变大，则可以继续发送。</p>
]]></content>
      <categories>
        <category>tcp</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手与四次挥手知识汇总</title>
    <url>/2024/01/18/network/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80tcp">一、TCP</a><ul>
<li><a href="#11-%E6%80%BB%E8%A7%88%E5%9B%BE">1.1 总览图</a></li>
<li><a href="#12-%E4%BB%80%E4%B9%88%E6%98%AFsynackfinackseq">1.2 什么是SYN、ACK、FIN、ack、seq？</a></li>
<li><a href="#13%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">1.3三次握手</a><ul>
<li><a href="#131-%E6%80%BB%E8%A7%88%E5%9B%BE">1.3.1 总览图</a></li>
<li><a href="#132-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">1.3.2 什么是三次握手</a></li>
<li><a href="#133-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">1.3.3 为什么需要三次握手？</a></li>
<li><a href="#134-%E4%B8%A4%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%BC%9A%E5%A6%82%E4%BD%95">1.3.4 两次握手会如何？</a></li>
<li><a href="#135-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81syn%E5%90%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E8%BF%94%E5%9B%9Esyn">1.3.5 客户端发送SYN后，服务端为什么还要返回SYN?</a></li>
<li><a href="#136-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%94%E5%9B%9Esyn%E5%90%8E%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E8%BF%94%E5%9B%9Eack">1.3.6 服务端返回SYN后，为什么还要返回ACK?</a></li>
<li><a href="#137-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E6%97%B6%E5%80%99ackseq1">1.3.7 为什么三次握手的时候ack&#x3D;seq+1?</a></li>
</ul>
</li>
<li><a href="#14%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">1.4四次挥手</a><ul>
<li><a href="#141-%E6%80%BB%E8%A7%88%E5%9B%BE">1.4.1 总览图</a></li>
<li><a href="#142-%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">1.4.2 什么是四次挥手？</a></li>
<li><a href="#143-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">1.4.3 为什么需要四次挥手？</a></li>
<li><a href="#144-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%AD%89%E5%BE%852msl%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8Dclose">1.4.4 为什么要等待2MSL的时间才close？</a></li>
</ul>
</li>
<li><a href="#15-%E5%A6%82%E6%9E%9C%E6%8F%A1%E6%89%8B%E6%8C%A5%E6%89%8B%E6%9C%9F%E9%97%B4%E5%87%BA%E7%8E%B0%E6%95%85%E9%9A%9C%E6%80%8E%E4%B9%88%E5%8A%9E">1.5 如果握手(挥手)期间出现故障怎么办？</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>这篇文档写的很详细：<a href="https://www.xiaolincoding.com/network/3_tcp/tcp_feature.html#%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6">https://www.xiaolincoding.com/network/3_tcp&#x2F;tcp_feature.html#%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6</a></p>
</blockquote>
<h2 id="一、TCP"><a href="#一、TCP" class="headerlink" title="一、TCP"></a>一、TCP</h2><h3 id="1-1-总览图"><a href="#1-1-总览图" class="headerlink" title="1.1 总览图"></a>1.1 总览图</h3><p>TCP报文数据格式：<br><img src="https://img-blog.csdnimg.cn/direct/49145a01dd3f40a08949c36f59b6b9ed.png"><br><strong>TCP报文首部</strong></p>
<ul>
<li>源端口和目的端口，各占2个字节，分别写入源端口和目的端口；</li>
<li>序号，占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301<br>，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；</li>
<li>确认号，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</li>
<li>数据偏移，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；</li>
<li>保留，占6位，保留今后使用，但目前应都位0；</li>
<li>紧急URG，当URG&#x3D;1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</li>
<li>确认ACK，仅当ACK&#x3D;1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li>
<li>推送PSH，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH&#x3D;1；</li>
<li>复位RST，当RST&#x3D;1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</li>
<li>同步SYN，在连接建立时用来同步序号。当SYN&#x3D;1，ACK&#x3D;0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN&#x3D;1，ACK&#x3D;1；</li>
<li>终止FIN，用来释放连接。当FIN&#x3D;1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li>
<li>检验和，占2字节，校验首部和数据这两部分；</li>
<li>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</li>
<li>选项，长度可变，定义一些其他的可选的参数。</li>
</ul>
<h3 id="1-2-什么是SYN、ACK、FIN、ack、seq？"><a href="#1-2-什么是SYN、ACK、FIN、ack、seq？" class="headerlink" title="1.2 什么是SYN、ACK、FIN、ack、seq？"></a>1.2 什么是SYN、ACK、FIN、ack、seq？</h3><p>这里只介绍SYN、ACK、FIN这三个标志位。一共有六个。</p>
<ul>
<li><strong>SYN</strong>:代表请求创建连接。所以在三次握手中前两次要SYN&#x3D;1，表示这两次用于建立连接。</li>
<li><strong>FIN</strong>：代表请求关闭连接。在四次分手时，我们发现FIN客户端与服务端各发了一次。这是因为TCP的连接是双向的，所以<strong>一次FIN只能关闭一个方向</strong>。</li>
<li><strong>ACK</strong>：代表确认接受。不管是三次握手还是四次分手，在回应的时候都会加上ACK&#x3D;1，表示消息接收到了，并且在建立连接以后的发送数据时，都需加上ACK&#x3D;1,来表示数据接收成功。</li>
<li><strong>seq</strong>:序列号。当发送一个数据时，数据是被拆成多个数据包来发送，序列号就是对每个数据包进行编号，这样接受方才能对数据包进行再次拼接。<br> 初始序列号是随机生成的，这样不一样的数据拆包解包就不会连接错了。</li>
<li><strong>ack</strong>:这个代表下一个数据包的编号，这也就是为什么第二请求时，ack是seq+1。<br> <strong>注意：ACK与ack含义不一样。</strong></li>
</ul>
<h3 id="1-3三次握手"><a href="#1-3三次握手" class="headerlink" title="1.3三次握手"></a>1.3三次握手</h3><h4 id="1-3-1-总览图"><a href="#1-3-1-总览图" class="headerlink" title="1.3.1 总览图"></a>1.3.1 总览图</h4><p><img src="https://img-blog.csdnimg.cn/direct/d7892d0650b843a8b812c093bdcef612.png"></p>
<h4 id="1-3-2-什么是三次握手"><a href="#1-3-2-什么是三次握手" class="headerlink" title="1.3.2 什么是三次握手"></a>1.3.2 什么是三次握手</h4><blockquote>
<p>所谓三次握手（Three-Way Handshake）即<strong>建立TCP连接</strong>，就是指建立一个TCP连接时，需要客户端和服务端总共发送<strong>3个包</strong>以确认连接的建立。<strong>三次握手必须是客户端发起。</strong></p>
</blockquote>
<h4 id="1-3-3-为什么需要三次握手？"><a href="#1-3-3-为什么需要三次握手？" class="headerlink" title="1.3.3 为什么需要三次握手？"></a>1.3.3 为什么需要三次握手？</h4><blockquote>
<p>三次握手的目的是<strong>建立可靠的通信信道</strong>，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</p>
</blockquote>
<h4 id="1-3-4-两次握手会如何？"><a href="#1-3-4-两次握手会如何？" class="headerlink" title="1.3.4 两次握手会如何？"></a>1.3.4 两次握手会如何？</h4><p>如果发送两次就可以建立连接话，那么只要客户端发送一个连接请求，服务端接收到并发送了确认，就会建立一个连接。<br><strong>那么可能会出现以下问题：</strong><br>如果一个连接请求在网络中跑的慢，超时了，这时客户端会重新发起请求，但是这个跑的慢的请求最后还是跑到了，然后服务端就接收了两个连接请求，然后全部回应就会创建两个连接，浪费资源！<br>如果加了第三次客户端确认，客户端在接受到一个服务端连接确认请求后，后面再接收到的连接确认请求就可以抛弃不管了。</p>
<h4 id="1-3-5-客户端发送SYN后，服务端为什么还要返回SYN"><a href="#1-3-5-客户端发送SYN后，服务端为什么还要返回SYN" class="headerlink" title="1.3.5 客户端发送SYN后，服务端为什么还要返回SYN?"></a>1.3.5 客户端发送SYN后，服务端为什么还要返回SYN?</h4><blockquote>
<p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</p>
</blockquote>
<h4 id="1-3-6-服务端返回SYN后，为什么还要返回ACK"><a href="#1-3-6-服务端返回SYN后，为什么还要返回ACK" class="headerlink" title="1.3.6 服务端返回SYN后，为什么还要返回ACK?"></a>1.3.6 服务端返回SYN后，为什么还要返回ACK?</h4><blockquote>
<p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</p>
</blockquote>
<h4 id="1-3-7-为什么三次握手的时候ack-seq-1"><a href="#1-3-7-为什么三次握手的时候ack-seq-1" class="headerlink" title="1.3.7 为什么三次握手的时候ack&#x3D;seq+1?"></a>1.3.7 为什么三次握手的时候ack&#x3D;seq+1?</h4><blockquote>
<p>seq是要发送的第一个字节的序号，ack等于他收到的seq序列号加上字节流数据的长度，他代表期望收到的下一个字节的序号，同时他也代表这个序号前的字节我都已经收到了。</p>
</blockquote>
<p><a href="https://blog.csdn.net/oldfish_C/article/details/105150516">为什么三次握手的时候ack&#x3D;seq+1</a></p>
<p>ack &#x3D; seq + 数据长度(SYN、FIN 长度为1bit)</p>
<h3 id="1-4四次挥手"><a href="#1-4四次挥手" class="headerlink" title="1.4四次挥手"></a>1.4四次挥手</h3><h4 id="1-4-1-总览图"><a href="#1-4-1-总览图" class="headerlink" title="1.4.1 总览图"></a>1.4.1 总览图</h4><p><img src="https://img-blog.csdnimg.cn/direct/dcf484ef8b9449289f5c0a515e694a8c.png"></p>
<h4 id="1-4-2-什么是四次挥手？"><a href="#1-4-2-什么是四次挥手？" class="headerlink" title="1.4.2 什么是四次挥手？"></a>1.4.2 什么是四次挥手？</h4><blockquote>
<p>所谓“四次挥手”就是<strong>关闭TCP连接</strong>的过程，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认<strong>双方连接</strong>的断开。</p>
</blockquote>
<h4 id="1-4-3-为什么需要四次挥手？"><a href="#1-4-3-为什么需要四次挥手？" class="headerlink" title="1.4.3 为什么需要四次挥手？"></a>1.4.3 为什么需要四次挥手？</h4><blockquote>
<p><strong>TCP是双向的</strong>，所以需要在两个方向分别关闭，每个方向的关闭又需要请求和确认，所以一共就4次。<br>服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，<strong>也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接</strong>，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
</blockquote>
<h4 id="1-4-4-为什么要等待2MSL的时间才close？"><a href="#1-4-4-为什么要等待2MSL的时间才close？" class="headerlink" title="1.4.4 为什么要等待2MSL的时间才close？"></a>1.4.4 为什么要等待2MSL的时间才close？</h4><ul>
<li><em>为了保证客户端发送的最后一个ACK报文段能够到达服务器</em>。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</li>
<li><em>等待最⼤的2msl可以让本次连接的所有的⽹络包在链路上消失，以防造成不必要的⼲扰。</em> 他还可以防止已失效的报文段。客户端在发送最后一个ACK之后，再经过经过2MSL，就可以使本链接持续时间内所产生的所有报文段都从网络中消失。从保证在关闭连接后不会有还在网络中滞留的报文段去骚扰服务器。</li>
</ul>
<h3 id="1-5-如果握手-挥手-期间出现故障怎么办？"><a href="#1-5-如果握手-挥手-期间出现故障怎么办？" class="headerlink" title="1.5 如果握手(挥手)期间出现故障怎么办？"></a>1.5 如果握手(挥手)期间出现故障怎么办？</h3><p><a href="https://zhuanlan.zhihu.com/p/641988031">TCP三次握手及四次挥手过程中的异常处理</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/qzcsu/article/details/72861891">两张动图-彻底明白TCP的三次握手与四次挥手</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1593714120815701015&wfr=spider&for=pc">对TCP三次握手四次分手还不清楚，超简单解析</a></li>
</ul>
]]></content>
      <categories>
        <category>tcp</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv打包成exe在win7运行报错</title>
    <url>/2021/03/26/python/opencv%E6%89%93%E5%8C%85%E6%88%90exe%E5%9C%A8win7%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="opencv打包成exe在win7运行报错"><a href="#opencv打包成exe在win7运行报错" class="headerlink" title="opencv打包成exe在win7运行报错"></a>opencv打包成exe在win7运行报错</h2><p><strong>1、安装过程错误警告</strong><br>opencv版本：3.4.3<br>打包环境：win10<br>运行环境：win7<br>opencv报错：</p>
<p><img src="https://img-blog.csdnimg.cn/20210326111826691.png"></p>
<p><strong>2、解决方案</strong><br><a href="https://pan.baidu.com/s/1qXt1BNClftx6fE5aAQWrsw">opencv插件打包</a><br>提取码: fp7v<br>将 api-ms-win-downlevel-shlwapi-l1-1-0.dll【System32】 放到 c:\windows\System32<br>将api-ms-win-downlevel-shlwapi-l1-1-0.dll【SysWOW64】 放到C:\Windows\SysWOW64<br>打包环境与运行环境都需要添加dll文件；重新打包、安装；<br><strong>3、注意</strong><br>opencv&gt;3.4.3将出现:<br>    CAP_IMAGES: can‘t find starting number (in the name of file)<br>    错误，提示缺少文件，或没有编号。暂无解决。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中threading开启关闭线程</title>
    <url>/2021/03/18/python/python%E4%B8%ADthreading%E5%BC%80%E5%90%AF%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python中threading开启关闭线程"><a href="#python中threading开启关闭线程" class="headerlink" title="python中threading开启关闭线程"></a>python中threading开启关闭线程</h2><blockquote>
<p><a href="https://blog.csdn.net/qq_15181569/article/details/93299164">https://blog.csdn.net/qq_15181569/article/details/93299164</a></p>
</blockquote>
<p><a href="https://blog.csdn.net/qq_15181569/article/details/93299164">python中threading开启关闭线程</a></p>
<p><strong>一、启动线程</strong><br>首先导入threading</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myThread = threading.Thread(target=serial_read)</span><br><span class="line">myThread.start()</span><br></pre></td></tr></table></figure>
<p><strong>二、停止线程</strong><br>不多说了直接上代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_async_raise</span>(<span class="params">tid, exctype</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;raises the exception, performs cleanup if needed&quot;&quot;&quot;</span></span><br><span class="line">    tid = ctypes.c_long(tid)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inspect.isclass(exctype):</span><br><span class="line">        exctype = <span class="built_in">type</span>(exctype)</span><br><span class="line">    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(exctype))</span><br><span class="line">    <span class="keyword">if</span> res == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;invalid thread id&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> res != <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># &quot;&quot;&quot;if it returns a number greater than one, you&#x27;re in trouble,</span></span><br><span class="line">        <span class="comment"># and you should call it again with exc=NULL to revert the effect&quot;&quot;&quot;</span></span><br><span class="line">        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">raise</span> SystemError(<span class="string">&quot;PyThreadState_SetAsyncExc failed&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop_thread</span>(<span class="params">thread</span>):</span><br><span class="line">    _async_raise(thread.ident, SystemExit)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stop_thread(myThread)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>unity的button按钮组件与toggle组件的点击事件的移除</title>
    <url>/2021/08/10/unity/unity%E7%9A%84button%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6%E4%B8%8Etoggle%E7%BB%84%E4%BB%B6%E7%9A%84%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%A7%BB%E9%99%A4/</url>
    <content><![CDATA[<p>button按钮添加点击事件可以使用这种形式：<br><img src="https://img-blog.csdnimg.cn/63db9678898a478599560035ef6a3009.png"><br>移除某个事件使用SonObj.GetComponent<Button>().onClick.RemoveListener（call）方法移除某个事件。<br>RemoveListener中需要传递的参数为 UnityAction类型：<br><img src="https://img-blog.csdnimg.cn/af95d67fa5644bf68d03710535017543.png"><br>因此，在创建监听事件时，可以将点击事件提取出来，<br><img src="https://img-blog.csdnimg.cn/e853bbcdfba04de1b11da2f98904e307.png"><br>在想要移除此次添加的点击事件时，将call传递给RemoveListener就行。<br><img src="https://img-blog.csdnimg.cn/a33d2fd5567f4b758d95cd98f0e2dabd.png"></p>
]]></content>
      <categories>
        <category>unity</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 全局获取request</title>
    <url>/2023/03/14/python/django/Django%20%E5%85%A8%E5%B1%80%E8%8E%B7%E5%8F%96request/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80%E8%83%BD%E5%90%A6%E7%9B%B4%E6%8E%A5pip%E5%AE%89%E8%A3%85">一、能否直接pip安装？</a></li>
<li><a href="#%E4%BA%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">二、如何使用？</a><ul>
<li><a href="#1%E5%BC%95%E5%85%A5">1.引入</a></li>
<li><a href="#2%E4%BD%BF%E7%94%A8">2.使用</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84">三、如何实现的？</a><ul>
<li><a href="#1django-middleware%E5%8E%9F%E7%90%86">1、django Middleware原理</a></li>
<li><a href="#2%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%98%AF%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB%E7%9A%84%E5%90%97">2、中间件是线程隔离的吗？</a></li>
<li><a href="#3django_middleware_global_request%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">3、django_middleware_global_request实现原理</a><ul>
<li><a href="#31-globalrequestmiddleware%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F">3.1 GlobalRequestMiddleware调用顺序</a></li>
<li><a href="#32-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB%E7%9A%84">3.2 如何实现线程隔离的？</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>
</li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Django项目中使用到了Singal来进行操作日志的记录的操作，但需要在Signal中获取reqeust中的某些数据。因此，如果有一个全局的request，将会对之后的操作带来很大的方便。</p>
<hr>
<h1 id="一、能否直接pip安装？"><a href="#一、能否直接pip安装？" class="headerlink" title="一、能否直接pip安装？"></a>一、能否直接pip安装？</h1><p>django_middleware_global_request</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-middleware-<span class="keyword">global</span>-request</span><br></pre></td></tr></table></figure>

<h1 id="二、如何使用？"><a href="#二、如何使用？" class="headerlink" title="二、如何使用？"></a>二、如何使用？</h1><h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h2><p>在项目的setting.py文件的MIDDLEWARE添加中间件。<br><img src="https://img-blog.csdnimg.cn/d9c124e640a34ac7b8183b2f684cd581.png"></p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>代码如下（示例）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message_dict[<span class="string">&quot;args&quot;</span>][<span class="string">&quot;user_id&quot;</span>] = get_request().user.<span class="built_in">id</span></span><br></pre></td></tr></table></figure>


<h1 id="三、如何实现的？"><a href="#三、如何实现的？" class="headerlink" title="三、如何实现的？"></a>三、如何实现的？</h1><h2 id="1、django-Middleware原理"><a href="#1、django-Middleware原理" class="headerlink" title="1、django Middleware原理"></a>1、django Middleware原理</h2><p>django在初始化时，会先加载middleware。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WSGIHandler</span>(base.BaseHandler):</span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line">    <span class="comment"># 子线程中调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, environ, start_response</span>):</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        response = self.get_response(request)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_middleware</span>(<span class="params">self, is_async=<span class="literal">False</span></span>):</span><br><span class="line">            get_response = self._get_response_async <span class="keyword">if</span> is_async <span class="keyword">else</span> self._get_response</span><br><span class="line">        	handler = convert_exception_to_response(get_response)</span><br><span class="line">        	<span class="comment"># 初始handler为Basehandler的_get_response方法。 </span></span><br><span class="line">            <span class="keyword">for</span> middleware_path <span class="keyword">in</span> <span class="built_in">reversed</span>(settings.MIDDLEWARE):</span><br><span class="line">            	<span class="comment"># 我们每个中间件</span></span><br><span class="line">            	middleware = import_string(middleware_path)</span><br><span class="line">            	<span class="comment"># 初始adapted_handler 为Basehandler的_get_response方法。</span></span><br><span class="line">            	adapted_handler = self.adapt_method_mode(</span><br><span class="line">                    middleware_is_async, handler, handler_is_async,</span><br><span class="line">                    debug=settings.DEBUG, name=<span class="string">&#x27;middleware %s&#x27;</span> % middleware_path,</span><br><span class="line">                )</span><br><span class="line">            	mw_instance = middleware(adapted_handler)</span><br><span class="line">            	......</span><br><span class="line">            	handler = adapted_handler</span><br><span class="line">            	......</span><br><span class="line">            	<span class="comment"># 记录每个中间件的流程方法.</span></span><br><span class="line">	            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_view&#x27;</span>):</span><br><span class="line">	                self._view_middleware.insert(...)</span><br><span class="line">	            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_template_response&#x27;</span>):</span><br><span class="line">	                self._template_response_middleware.append(...)</span><br><span class="line">	            <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw_instance, <span class="string">&#x27;process_exception&#x27;</span>):</span><br><span class="line">	                self._exception_middleware.append(...)</span><br><span class="line">	        ......</span><br><span class="line">	        self._middleware_chain = handler</span><br></pre></td></tr></table></figure>
<p>在初始化时，会实例化每个middleware类。等到for循环结束时，<code>handler = A(B(C(D(_get_response))))</code>，将每个中间件层层嵌套起来。<br>在此过程中，会将中间件的<code>process_view</code> <code>process_template_response </code> <code>process_exception</code> 存储到列表中等待调用。<br>在     <code>get_response(self, request)</code>中调用,<code>get_response(self, request)</code>在子线程中被调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">self, request</span>):</span><br><span class="line">	...</span><br><span class="line">    response = self._middleware_chain(request)</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p><code>self._middleware_chain(request)</code> 会层层调用中间件的<code>__call__</code>方法。<br>等到所有的中间件都调用完成之后，将调用<code>BaseHandler._get_response</code>方法，<code>A(B(C(D(_get_response))))</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_response</span>(<span class="params">self, request</span>):</span><br><span class="line">		<span class="comment"># 便利调用所有中间件的process_view方法</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._view_middleware:</span><br><span class="line">        	response = middleware_method(request, callback, callback_args, callback_kwargs)</span><br><span class="line">        	<span class="keyword">if</span> response:</span><br><span class="line">        	    <span class="keyword">break</span></span><br><span class="line">       	...</span><br><span class="line">       	<span class="comment"># 便利调用所有中间件的process_template_response 方法</span></span><br><span class="line">       	<span class="keyword">if</span> <span class="built_in">hasattr</span>(response, <span class="string">&#x27;render&#x27;</span>) <span class="keyword">and</span> <span class="built_in">callable</span>(response.render):</span><br><span class="line">       		<span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._template_response_middleware:</span><br><span class="line">       			response = middleware_method(request, response)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = response.render()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        	<span class="comment"># 便利调用所有中间件的process_exception方法</span></span><br><span class="line">            response = self.process_exception_by_middleware(e, request)</span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>
<p>在_get_response中，会调用中间件的<code>process_view</code> <code>process_template_response </code> <code>process_exception</code> </p>
<p>再看一下<code>MiddlewareMixin</code>的调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MiddlewareMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">		......</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;process_request&#x27;</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        response = response <span class="keyword">or</span> self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;process_response&#x27;</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p><code>MiddlewareMixin.__call__</code>在上面被调用。<br>可以看到，中间件的执行顺序为：<code>process_request</code>&gt;<code>process_view</code>&gt;<code>process_template_response (看情况)</code>&gt;<code>process_exception(有异常)</code>&gt;<code>process_response</code></p>
<h2 id="2、中间件是线程隔离的吗？"><a href="#2、中间件是线程隔离的吗？" class="headerlink" title="2、中间件是线程隔离的吗？"></a>2、中间件是线程隔离的吗？</h2><p>通过上面的代码，我们能看到，中间件只会在项目初始化时，有WSGIHandler初始化一次。并不是每个线程进来都会初始化。<br>因此需要解决线程冲突问题。</p>
<h2 id="3、django-middleware-global-request实现原理"><a href="#3、django-middleware-global-request实现原理" class="headerlink" title="3、django_middleware_global_request实现原理"></a>3、django_middleware_global_request实现原理</h2><h3 id="3-1-GlobalRequestMiddleware调用顺序"><a href="#3-1-GlobalRequestMiddleware调用顺序" class="headerlink" title="3.1 GlobalRequestMiddleware调用顺序"></a>3.1 GlobalRequestMiddleware调用顺序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalRequestMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">with</span> GlobalRequest(request=request):</span><br><span class="line">            <span class="keyword">return</span> self.get_response(request)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalRequestStorage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    storage = threading.local()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self.storage, <span class="string">&quot;request&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> self.storage.request</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">self, request=<span class="literal">None</span></span>):</span><br><span class="line">        request = request <span class="keyword">or</span> self.get()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(request, <span class="string">&quot;user&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, request</span>):</span><br><span class="line">        self.storage.request = request</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_user</span>(<span class="params">self, user, request=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> request:</span><br><span class="line">            self.storage.request = request</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self.storage, <span class="string">&quot;request&quot;</span>):</span><br><span class="line">            self.storage.request = HttpRequest()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            self.storage.request.user = user</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">self, request=<span class="literal">None</span>, user=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self.storage, <span class="string">&quot;request&quot;</span>):</span><br><span class="line">            <span class="keyword">del</span> self.storage.request</span><br><span class="line">        <span class="keyword">if</span> request:</span><br><span class="line">            self.storage.request = request</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                self.storage.request.user = user</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalRequest</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, request=<span class="literal">None</span>, user=<span class="literal">None</span></span>):</span><br><span class="line">        self.global_request_storage = GlobalRequestStorage()</span><br><span class="line">        self.new_request = request <span class="keyword">or</span> HttpRequest()</span><br><span class="line">        self.new_user = user</span><br><span class="line">        self.old_request = self.global_request_storage.get()</span><br><span class="line">        self.old_user = self.global_request_storage.get_user(self.old_request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.global_request_storage.set_user(user=self.new_user, request=self.new_request)</span><br><span class="line">        <span class="keyword">return</span> self.global_request_storage.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        self.global_request_storage.recover(request=self.old_request, user=self.old_user)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>GlobalRequest</code> 使用上下文管理request。<br>在<code>__init__</code>时，实例化<code>GlobalRequestStorage</code><br>在<code>__enter__</code> 时，将当前的request存储到<code>GlobalRequestStorage()</code>中，<br>在<code>__exit__</code>时，将<code>GlobalRequestStorage</code>中<code>del self.storage.request</code></p>
<h3 id="3-2-如何实现线程隔离的？"><a href="#3-2-如何实现线程隔离的？" class="headerlink" title="3.2 如何实现线程隔离的？"></a>3.2 如何实现线程隔离的？</h3><p>线程隔离：<code>threading.local()</code></p>
<pre><code>threading.local的作用：为每个线程开辟一块空间进行数据的存储
空间与空间之间数据是隔离的
</code></pre>
<p>类似于Flask框架的实现。Flask框架也是借用了<code>threading.local()</code>在处理线程隔离，Flask中维护了一个字典，来存储app、request、g等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_request</span>():</span><br><span class="line">    <span class="keyword">return</span> GlobalRequestStorage().get()</span><br></pre></td></tr></table></figure>
<p><code>get_request()</code>中又新实例化了一个<code>GlobalRequestStorage</code>，但<code>storage = threading.local()</code>将会从当前线程的数据块中获取数据。</p>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/weixin_42289273/article/details/116831590">threading.local</a><br><a href="https://blog.csdn.net/weixin_30823683/article/details/96553451">Django系列之中间件加载原理</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django DRF 组件解析</title>
    <url>/2022/07/06/python/django/django%20DRF%20%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E8%AE%A4%E8%AF%81">一、认证</a><br>    - <a href="#1%E5%9C%A8class%E7%B1%BB%E9%87%8C%E9%9D%A2%E7%9A%84apiview%E5%9C%A8pycharm%E6%8C%89%E4%BD%8Fctrl%E7%82%B9%E5%87%BBapiview%E7%84%B6%E5%90%8E%E5%90%91%E4%B8%8B%E7%BF%BB%E6%89%BE%E5%88%B0">1、在class类里面的(APIView)在pycharm按住ctrl点击APIView,然后向下翻找到</a></li>
<li><a href="#%E4%BA%8C%E6%9D%83%E9%99%90">二、权限</a></li>
<li><a href="#%E4%B8%89%E9%99%90%E6%B5%81">三、限流</a></li>
<li><a href="#%E5%9B%9B%E7%89%88%E6%9C%AC">四、版本</a></li>
<li><a href="#%E4%BA%94%E8%A7%A3%E6%9E%90%E5%99%A8parser">五、解析器(parser)</a></li>
<li><a href="#%E5%85%AD%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8">六、序列化器</a></li>
</ul>
<h1 id="一、认证"><a href="#一、认证" class="headerlink" title="一、认证"></a>一、认证</h1><h6 id="1、在class类里面的-APIView-在pycharm按住ctrl点击APIView-然后向下翻找到"><a href="#1、在class类里面的-APIView-在pycharm按住ctrl点击APIView-然后向下翻找到" class="headerlink" title="1、在class类里面的(APIView)在pycharm按住ctrl点击APIView,然后向下翻找到"></a>1、在class类里面的(APIView)在pycharm按住ctrl点击APIView,然后向下翻找到<img src="https://img-blog.csdnimg.cn/5403b26c0ae04508b95d196d35a9cc52.png"></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span></span><br><span class="line"><span class="string">   but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line">   self.args = args</span><br><span class="line">   self.kwargs = kwargs</span><br><span class="line">   request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">   self.request = request</span><br><span class="line">   self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       <span class="comment">#进这里 #点击这个</span></span><br><span class="line">       self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">       <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">           handler = <span class="built_in">getattr</span>(self, request.method.lower(),</span><br><span class="line">                             self.http_method_not_allowed)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">       response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">       response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">   self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">   <span class="keyword">return</span> self.response</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>找到def dispatch(self, request, *args, **kwargs):中的 self.initial并点击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="comment">#进这里 #点击这个</span></span><br><span class="line">   self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后将会看到:<br><img src="https://img-blog.csdnimg.cn/84e34c7cd6284716bacf8f0f2d8f5f16.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代表 认证组件</span></span><br><span class="line">self.perform_authentication(request)</span><br><span class="line"><span class="comment"># 代表 权限组件</span></span><br><span class="line">      self.check_permissions(request)</span><br><span class="line">      <span class="comment"># 代表 限流组件</span></span><br><span class="line">      self.check_throttles(request)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后 点击self.perform_authentication(request)这个方法<br><img src="https://img-blog.csdnimg.cn/9613fb4c0e714b4cb3011c9af6ac7699.png"><br>在这里它封装了 request.user方法 点击request.user然后选择第三个<br><img src="https://img-blog.csdnimg.cn/93f394b960de45d7a35add1d49f3af59.png"><br>在这里封装了self._authenticate() 点击self._authenticate()<br><img src="https://img-blog.csdnimg.cn/8a62770a3ce24b68892b25ddc848c276.png"><br><img src="https://img-blog.csdnimg.cn/d20aa51fec7b4aee87d6fb67e2273322.png"></p>
<h1 id="二、权限"><a href="#二、权限" class="headerlink" title="二、权限"></a>二、权限</h1><p>首先点击 self.dispatch() 找到 self.initial(request,*args,**kwargs)点击 进入<br><img src="https://img-blog.csdnimg.cn/499dd6473f124ca0bdb899bd55af156f.png"><br><img src="https://img-blog.csdnimg.cn/571886f93a3a410596e0ff2ed4c7361f.png"><br>然后点击 代表权限的组件方法<br>这里会出现 点击这个选择第三个 会出现我们冲的的方法<br><img src="https://img-blog.csdnimg.cn/a712f7b30ea34c338390d8b86f13ac90.png"><br>随后滚动鼠标 会出现这个方法<br><img src="https://img-blog.csdnimg.cn/bb51397df03648eea823fe042b0d39c2.png"><br>我们在settings.py设置全局组件配置 权限 首先我们要找到源码来写入 这个配置的功能<br>在class类里面的(APIView)在pycharm按住ctrl点击APIView,然后向下翻找到<br><img src="https://img-blog.csdnimg.cn/65143158615b42678bcaf912caf87427.png"><br>DEFAULT_PERMISSION_CLASSES 这个就代表配置 settings.py需要设置的方法 [这里写的是方法类的路径]<br><img src="https://img-blog.csdnimg.cn/45d14baa1abd4e6e9274e2b94623dd45.png"><br>然后在view.py订单视图中 写入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    订单相关业务</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    authentication_classes = []</span><br><span class="line">    permission_classes = []</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="三、限流"><a href="#三、限流" class="headerlink" title="三、限流"></a>三、限流</h1><p>限流就是限制访问频率或者次数<br>我们可以看看源码是怎样写的<br>首先点击 self.dispatch() 找到 self.initial(request,*args,**kwargs)点击 进入<br><img src="https://img-blog.csdnimg.cn/375ca3e8195949a39bd7c30ce94d3bd5.png"><br>然后点击 代表限流的组件方法<br><img src="https://img-blog.csdnimg.cn/bbce45e5fb7a4b08a897cf53058af5ec.png"><br>在这里会找到封装的allow_request 点击它 选择第三个<br><img src="https://img-blog.csdnimg.cn/087fbb0c6b624ad9a1bf297851dac5df.png"><br>这里就会出现allow_request源码的方法 和 wait源码的方法<br><img src="https://img-blog.csdnimg.cn/895ba1f17ff748908555278f0bb4aa9a.png"><br><img src="https://img-blog.csdnimg.cn/359bb67fb2f04749aca3221c34f24ff3.png"><br>我们开始在views.py设置 一个类来测试我们书写的代码逻辑是否正确</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在我的组件包导入 MyThrottle方法</span></span><br><span class="line"><span class="keyword">from</span> myapp.myutils.throttle <span class="keyword">import</span> MyThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    authentication_classes = [MyAuthtication]</span><br><span class="line">    permission_classes = [SVIPPermission]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启这个代表自己设置的限流</span></span><br><span class="line">    throttle_classes = [MyThrottle]</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    	<span class="comment"># 获取当前的ip</span></span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        <span class="comment"># 并返回当前的ip</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ip&#x27;</span>: ip&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以在settings.py全局设置组件<br><img src="https://img-blog.csdnimg.cn/fd4699b9405a4eca8a296ce554482636.png"><br>怎么找到它呢 ?<br>在class类里面的(APIView)在pycharm按住ctrl点击APIView,然后向下翻找到<br><img src="https://img-blog.csdnimg.cn/ec6a94e9a8e545c69dbbb96da3eb94a2.png"><br>settings.py全局设置<br><img src="https://img-blog.csdnimg.cn/3f614336c28d4461b3d6dfaeb384d19e.png"><br><img src="https://img-blog.csdnimg.cn/898dbb4b9345407eaf023f0ea32a4203.png"><br>找到这个 这里是相关的一些配置<br><img src="https://img-blog.csdnimg.cn/aff0e7adced549aab4e996cdf23c475d.png"><br><img src="https://img-blog.csdnimg.cn/5129927f84c047099a2fb408c324a165.png"><br>这个是使用的方法<br><img src="https://img-blog.csdnimg.cn/98543b932bcd4f4d9b55a00a30b8250c.png"></p>
<h1 id="四、版本"><a href="#四、版本" class="headerlink" title="四、版本"></a>四、版本</h1><p><img src="https://img-blog.csdnimg.cn/a7b2c04f28ce43dd8734995e3782dfd8.png"><br>一种是原生的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QueryParameterVersioning点击这个里面会有个这种方法</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>点击这个<br><img src="https://img-blog.csdnimg.cn/0fbd44d53f6a462ba712072512fb4fe4.png"><br><img src="https://img-blog.csdnimg.cn/beb4571440ff4799b079a591aa9d1804.png"><br>含义<br><img src="https://img-blog.csdnimg.cn/b29f826a623b4d7fa1077c95089b723a.png"><br><img src="https://img-blog.csdnimg.cn/64c9d5af7bb34b468e9cf99bac4ebcd0.png"><br><img src="https://img-blog.csdnimg.cn/4207f1b293454c6b82ba8a468bdaf2aa.png"><br>点击这个选择第三个<br><img src="https://img-blog.csdnimg.cn/bb831c44ff724d31b1ea575d7be2bfc8.png"><br><img src="https://img-blog.csdnimg.cn/e0849f7ffbad4f28a6ed0266417c3d80.png"><br><img src="https://img-blog.csdnimg.cn/05cfe6d2d1ff485f9c9e15498e62de3e.png"><br>复制这个到settings.py进行全局配置<br><img src="https://img-blog.csdnimg.cn/5dcef4b8c0534d29bb114587d84d3705.png"><br><img src="https://img-blog.csdnimg.cn/ece96aa6de4f40ad9da748f981e8af5b.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_VERSION&quot;</span>: <span class="string">&quot;v1&quot;</span>,<span class="comment"># 默认版本</span></span><br><span class="line">    <span class="string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="string">&quot;v1&quot;</span>, <span class="string">&quot;v2&quot;</span>],<span class="comment"># 被允许访问的版本</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>另一种方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从rest_framework.versioning 导入 URLPathVersioning</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设计一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UsersView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    versioning_class = URLPathVersioning  <span class="comment"># 调入版本这个方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    	<span class="comment"># 获取版本</span></span><br><span class="line">        v = request.version</span><br><span class="line">        u1 = request.versioning_scheme.reverse(viewname=<span class="string">&quot;user&quot;</span>,request=request)</span><br><span class="line">        <span class="built_in">print</span>(u1)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(v)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>点击这个URLPathVersioning看源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>继承的是这个方法点击<br><img src="https://img-blog.csdnimg.cn/3186f2e59f5c46fa89a1eebed780115a.png"><br>鼠标滚动找到复制这个 放到urls.py路由中<br><img src="https://img-blog.csdnimg.cn/17530b78373445519333e717515a2c39.png"></p>
<h1 id="五、解析器-parser"><a href="#五、解析器-parser" class="headerlink" title="五、解析器(parser)"></a>五、解析器(parser)</h1><p><img src="https://img-blog.csdnimg.cn/3c4ca87c6e574be98832f3c0a1c70b19.png"><br><img src="https://img-blog.csdnimg.cn/a6d8ebc87e894252ad30b5aa60068e4f.png"><br><img src="https://img-blog.csdnimg.cn/578cf07560fa46c28007c3e7381446d8.png"><br><img src="https://img-blog.csdnimg.cn/e8880570969140869140bf85a0835947.png"><br><img src="https://img-blog.csdnimg.cn/4f97d50d6c4448319f40b9c845a2f22a.png"><br><img src="https://img-blog.csdnimg.cn/33180d1749ac4c1ab0281536e83301d2.png"><br><img src="https://img-blog.csdnimg.cn/0755a098866947c2a59589cdadcd4db8.png"><br><img src="https://img-blog.csdnimg.cn/2d15592a688344df96d6d2987b4c1576.png"><br><img src="https://img-blog.csdnimg.cn/2b47b76026d74b57b932d8be04b85410.png"></p>
<h1 id="六、序列化器"><a href="#六、序列化器" class="headerlink" title="六、序列化器"></a>六、序列化器</h1><p><img src="https://img-blog.csdnimg.cn/3db1268561f44eb8b9f3de2b9be77fd7.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django</title>
    <url>/2021/12/29/python/django/django/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80django%E7%AE%80">一、django简</a></li>
<li><a href="#%E4%BA%8C%E5%85%B7%E4%BD%93%E5%86%85%E5%AE%B9">二、具体内容</a></li>
<li><a href="#3drf">3、DRF</a></li>
</ul>
<h2 id="一、django简"><a href="#一、django简" class="headerlink" title="一、django简"></a>一、django简</h2><p><strong>1、组件</strong></p>
<ol>
<li>Project：项目</li>
<li>Apps：应用。尽量减少应用与工程、应用于应用之间的依赖关系，做到功能独立。</li>
<li>Model：ORM。对象关系映射。</li>
<li>URL Route：URL分配器、路由。</li>
<li>View：视图。业务。</li>
<li>DTL：模板语言，与jinja2相同。</li>
<li>Admin：管理界面</li>
<li>Cache System：缓存系统。</li>
</ol>
<p><strong>2、目录结构</strong><br><img src="https://img-blog.csdnimg.cn/e95d7ccfa907429a95d2f0279b0ca2a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>3、常用命令</strong></p>
<ol>
<li>新建一个 django project：<code>django-admin.py startproject project_name</code></li>
<li>新建 app：<code>python manage.py startapp app_name</code></li>
<li>创建数据库表 或 更改数据库表或字段：<code>python manage.py makemigrations（生成迁移文件）</code>，<code>python manage.py migrate（执行迁移）</code></li>
<li>启动调试：<code>python manage.py runserver</code>、<code>python manage.py runserver 0.0.0.0:8000</code></li>
<li>创建超级管理员：<code>python manage.py createsuperuser</code>、<code>python manage.py changepassword username（修改密码）</code></li>
</ol>
<h2 id="二、具体内容"><a href="#二、具体内容" class="headerlink" title="二、具体内容"></a>二、具体内容</h2><p> <strong>1. setting.py</strong></p>
<p> <strong>2. 请求生命周期</strong><br><img src="https://img-blog.csdnimg.cn/bc326173c8eb43979d2782628ec0c153.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p> <strong>3. 中间件</strong></p>
<blockquote>
<p>中间件是一个用来处理Django请求和响应的框架级钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。<br> <strong>3. 中间件的五种方法</strong><br> process_request : 请求进来时,权限认证<br> process_view : 路由匹配之后,能够得到视图函数<br>process_exception : 异常时执行<br>process_template_responseprocess : 模板渲染时执行<br>process_response : 请求有响应时执行</p>
</blockquote>
<p> <strong>4. session</strong></p>
<blockquote>
<p>django的session存储可以利用中间件来实现。需要在 settings.py 文件中注册APP、设置中间件用于启动。设置存储模式（数据库&#x2F;缓存&#x2F;混合存储）和配置数据库缓存用于存储，生成django_session表单用于读写。</p>
</blockquote>
<p> <strong>5. csrf实现机制</strong></p>
<blockquote>
<p>django第1次响应来自某个客户端的请求时,服务器随机产生1个token值，把这个token保存在session中;</p>
<p>同时服务器把这个token放到cookie中交给前端页面；</p>
<p>该客户端再次发起请求时，把这个token值加入到请求数据或者头信息中,一起传给服务器；<br>服务器校验前端请求带过来的token和session里的token是否一致。</p>
</blockquote>
<p> <strong>6. 缓存</strong></p>
<blockquote>
<ol>
<li><strong>全站缓存，较少使用</strong></li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ‘django.middleware.cache.UpdateCacheMiddleware’,  <span class="comment"># 第一</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ‘django.middleware.cache.FetchFromCacheMiddleware’,  <span class="comment"># 最后</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="2">
<li><strong>视图缓存，用户视图函数或视图类中</strong></li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.cache <span class="keyword">import</span> cache_page</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@cache_page(<span class="params"><span class="number">15</span></span>) </span><span class="comment">#超时时间为15秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    t=time.time() <span class="comment">#获取当前时间</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;index.html&quot;</span>,<span class="built_in">locals</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3. 模板缓存，指缓存不经常变换的模板片段</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% load cache %&#125;</span><br><span class="line">    &lt;h3 style=<span class="string">&quot;color: green&quot;</span>&gt;不缓存:-----&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&#123;% cache <span class="number">2</span> <span class="string">&#x27;name&#x27;</span> %&#125; <span class="comment"># 存的key</span></span><br><span class="line">    &lt;h3&gt;缓存:-----:&#123;&#123; t &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&#123;% endcache %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>7. ORM操作QuerySet对象的方法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>all()</td>
<td>查询所有结果</td>
</tr>
<tr>
<td>filter()</td>
<td>过滤查询对象。获取不到返回None。</td>
</tr>
<tr>
<td>get()</td>
<td>返回与所给筛选条件相匹配的对象，返回结果有且只有1个。如果符合筛选条件的对象超过1个或者没有都会抛出错误。</td>
</tr>
<tr>
<td>exclude()</td>
<td>排除满足条件的对象</td>
</tr>
<tr>
<td>order_by()</td>
<td>对查询结果排序</td>
</tr>
<tr>
<td>reverse()</td>
<td>对查询结果反向排序</td>
</tr>
<tr>
<td>count()</td>
<td>返回数据库中匹配查询(QuerySet)的对象数量。</td>
</tr>
<tr>
<td>first()</td>
<td>返回第一条记录</td>
</tr>
<tr>
<td>last()</td>
<td>返回最后一条记录</td>
</tr>
<tr>
<td>exists()</td>
<td>如果QuerySet包含数据，就返回True，否则返回False</td>
</tr>
<tr>
<td>values()</td>
<td>返回包含对象具体值的字典的QuerySet</td>
</tr>
<tr>
<td>values_list()</td>
<td>与values()类似，只是返回的是元组而不是字典。</td>
</tr>
<tr>
<td>distinct()</td>
<td>对查询集去重</td>
</tr>
</tbody></table>
<p><strong>django filter过滤器中支持命令参数</strong><br>__exact 精确等于 like ‘aaa’<br> __iexact 精确等于 忽略大小写 ilike ‘aaa’<br> __contains 包含 like ‘%aaa%’<br> __icontains 包含 忽略大小写 ilike ‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于icontains。<br>__gt 大于<br>__gte 大于等于<br>__lt 小于<br>__lte 小于等于<br>__in 存在于一个list范围内<br>__startswith 以…开头<br>__istartswith 以…开头 忽略大小写<br>__endswith 以…结尾<br>__iendswith 以…结尾，忽略大小写<br>__range 在…范围内<br>__year 日期字段的年份<br>__month 日期字段的月份<br>__day 日期字段的日<br>__isnull&#x3D;True&#x2F;False</p>
<p> <strong>8. Q和F</strong></p>
<blockquote>
<p>Q查询：对数据的多个字段联合查询（常和且或非”&amp;|~”进行联合使用）<br>F查询：对数据的不同字段进行比较（常用于比较和更新，对数据进行加减操作）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Q案例：</span><br><span class="line">查询作者名字是猎虎或者价格大于<span class="number">5000</span>的书 -- 或</span><br><span class="line">res = models.Bbook.objects.<span class="built_in">filter</span>(Q(authors__name=<span class="string">&#x27;猎虎&#x27;</span>)|Q(price__gt=<span class="number">5000</span>))</span><br><span class="line"></span><br><span class="line">查询作者名字是猎虎并且价格大于<span class="number">5000</span>的书 -- 与 &amp;</span><br><span class="line">res = models.Bbook.objects.<span class="built_in">filter</span>(Q(authors__name=<span class="string">&#x27;猎虎&#x27;</span>,price__gt=<span class="number">5000</span>))</span><br><span class="line">查询作者名字不是猎虎的书</span><br><span class="line">res = models.Bbook.objects.<span class="built_in">filter</span>(~Q(authors__name=<span class="string">&#x27;猎虎&#x27;</span>))</span><br><span class="line"></span><br><span class="line">F案例：</span><br><span class="line">所有阅读数+<span class="number">1</span></span><br><span class="line">res = .Bbook.objects.<span class="built_in">all</span>().update(read_num=F(<span class="string">&#x27;read_num&#x27;</span>)+<span class="number">1</span>)</span><br><span class="line">查询评论数大于阅读数的书籍</span><br><span class="line">res = models.Bbook.objects.<span class="built_in">all</span>().<span class="built_in">filter</span>(commit_num__gt=F(<span class="string">&#x27;read_num&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>9. 视图响应</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> Response(&#123;content=响应体, content_type=响应体数据类型, status=状态码)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(content=响应体, content_type=响应体数据类型, status=状态码) </span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;‘city’: ‘beijing’, ‘subject’: ‘python’&#125;,status=response.status_code)</span><br><span class="line"><span class="keyword">return</span> redirect(‘/index.html’)</span><br></pre></td></tr></table></figure>

<p> <strong>10. 生命周期</strong></p>
<blockquote>
<p>请求–&gt;wsgi–&gt;中间件–&gt;路由匹配–&gt;视图–&gt;（DRF：通过self.dispatch()反射执行对应方法（在其中进行request的封装、权限的绑定和认证：认证、权限、节流）–&gt;中间件–&gt;wsgi</p>
</blockquote>
<p> <strong>11. Celery</strong></p>
<blockquote>
<p>分布式任务队列，其本质是生产者消费者模型，生产者发送任务到消息队列，消费者负责处理任务。<br><img src="https://img-blog.csdnimg.cn/3cfba3d9849a45088bdee410a0c8ed04.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_18,color_FFFFFF,t_70,g_se,x_16"></p>
</blockquote>
<p> <strong>12. CBV、FBV</strong></p>
<blockquote>
<p>FBV（function base views） 基于函数的视图，就是在视图里使用函数处理请求。<br>CBV（class base views） 基于类的视图，就是在视图里使用类处理请求。</p>
</blockquote>
<p>FBV：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.login),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;runoob&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法1&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>CBV：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.Login.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;runoob&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法 1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> <strong>13. 连接多数据库</strong><br> 在 settings.py 中配置需要连接的多个数据库连接串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;ora1&#x27;</span>: &#123;   <span class="comment"># 配置第二个数据库节点名称</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.oracle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;devdb&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;hysh&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;hysh&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;192.168.191.3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;1521&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">&#x27;Prject.database_router.DatabaseAppsRouter&#x27;</span>]</span><br><span class="line"></span><br><span class="line">设置APP对应的数据库路由表 </span><br><span class="line">DATABASE_APPS_MAPPING = &#123;</span><br><span class="line">    <span class="comment"># example:</span></span><br><span class="line">    <span class="comment"># &#x27;app_name&#x27;:&#x27;database_name&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;report&#x27;</span>: <span class="string">&#x27;ora1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>: <span class="string">&#x27;defualt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;regs&#x27;</span>:  <span class="string">&#x27;defualt&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建数据库路由规则 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"> </span><br><span class="line">DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseAppsRouter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_read</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_write</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_relation</span>(<span class="params">self, obj1, obj2, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Allow any relation between apps that use the same database.&quot;&quot;&quot;</span></span><br><span class="line">        db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)</span><br><span class="line">        db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)</span><br><span class="line">        <span class="keyword">if</span> db_obj1 <span class="keyword">and</span> db_obj2:</span><br><span class="line">            <span class="keyword">if</span> db_obj1 == db_obj2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_syncdb</span>(<span class="params">self, db, model</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Make sure that apps only appear in the related database.&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(model._meta.app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_migrate</span>(<span class="params">self, db, app_label, model=<span class="literal">None</span>, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Make sure the auth app only appears in the &#x27;auth_db&#x27;</span></span><br><span class="line"><span class="string">        database.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Users</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    passwd = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;app01 %s &quot;</span> % self.name</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        app_label = <span class="string">&quot;app01&quot;</span></span><br></pre></td></tr></table></figure>

<p>一个app使用多个数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.User.objects.using(dbname).<span class="built_in">all</span>(） </span><br></pre></td></tr></table></figure>

<h2 id="3、DRF"><a href="#3、DRF" class="headerlink" title="3、DRF"></a>3、DRF</h2><p>参考文章：<a href="https://blog.csdn.net/qq_41500222/article/details/87895643">添加链接描述</a><br><img src="https://img-blog.csdnimg.cn/6128f9a7523f4d50acc49c39fa957d51.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_10,color_FFFFFF,t_70,g_se,x_16"><br>所有的类所多继承的父类必须是APIView<br>可继承的类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class View(object):</span></span><br><span class="line"><span class="comment">#class APIView(View): 封装了view,并且重新封装了request,初始化了各种组件</span></span><br><span class="line"><span class="comment">#class GenericAPIView(views.APIView):</span></span><br><span class="line"><span class="comment">#1.增加了一些属性和方法,如get_queryset,get_serializer</span></span><br><span class="line"><span class="comment">#class GenericViewSet(ViewSetMixin, generics.GenericAPIView)</span></span><br><span class="line"><span class="comment">#父类ViewSetMixin 重写了as_view,返回return csrf_exempt(view)</span></span><br><span class="line"><span class="comment">#并重新设置请求方式与执行函数的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelViewSet</span>(mixins.CreateModelMixin,</span><br><span class="line">                   mixins.RetrieveModelMixin,</span><br><span class="line">                   mixins.UpdateModelMixin,</span><br><span class="line">                   mixins.DestroyModelMixin,</span><br><span class="line">                   mixins.ListModelMixin,</span><br><span class="line">                   GenericViewSet):<span class="keyword">pass</span></span><br><span class="line"><span class="comment">#继承了mixins下的一些类,封装了list,create,update等方法</span></span><br><span class="line"><span class="comment">#和GenericViewSet</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>在Django模型中，将CharField更改为ArrayField</title>
    <url>/2023/02/16/python/django/%E5%9C%A8Django%E6%A8%A1%E5%9E%8B%E4%B8%AD%EF%BC%8C%E5%B0%86CharField%E6%9B%B4%E6%94%B9%E4%B8%BAArrayField/</url>
    <content><![CDATA[<h2 id="在不更改原数据的情况下，将某一个字符串字段转为列表字段"><a href="#在不更改原数据的情况下，将某一个字符串字段转为列表字段" class="headerlink" title="在不更改原数据的情况下，将某一个字符串字段转为列表字段"></a>在不更改原数据的情况下，将某一个字符串字段转为列表字段</h2><p><strong>数据库：PG</strong><br>EG:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Package</span>(<span class="title class_ inherited__">AbstractModel</span>):</span><br><span class="line">    category = models.CharField(</span><br><span class="line">        choices=CONTENT_CATEGORIES, max_length=<span class="number">20</span>, verbose_name=<span class="string">&quot;产品类型&quot;</span>, help_text=<span class="string">&quot;产品类型&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1、首先添加一个新字段，用来存储原字符字段的值"><a href="#1、首先添加一个新字段，用来存储原字符字段的值" class="headerlink" title="1、首先添加一个新字段，用来存储原字符字段的值"></a>1、首先添加一个新字段，用来存储原字符字段的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Package</span>(<span class="title class_ inherited__">AbstractModel</span>):</span><br><span class="line">    category = models.CharField(</span><br><span class="line">        choices=CONTENT_CATEGORIES, max_length=<span class="number">20</span>, verbose_name=<span class="string">&quot;产品类型&quot;</span>, help_text=<span class="string">&quot;产品类型&quot;</span>)</span><br><span class="line">    category_list = ArrayField(models.CharField(</span><br><span class="line">        choices=CONTENT_CATEGORIES, max_length=<span class="number">20</span>), verbose_name=<span class="string">&quot;产品类型列表&quot;</span>, help_text=<span class="string">&quot;产品类型列表&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2、执行迁移，同步数据库字段"><a href="#2、执行迁移，同步数据库字段" class="headerlink" title="2、执行迁移，同步数据库字段"></a>2、执行迁移，同步数据库字段</h3><h3 id="3、创建一个空migrate文件，例如0049-py"><a href="#3、创建一个空migrate文件，例如0049-py" class="headerlink" title="3、创建一个空migrate文件，例如0049.py"></a>3、创建一个空migrate文件，例如0049.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by Django 3.2.11 on 2023-06-19 03:35</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django.contrib.postgres.fields</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"><span class="keyword">import</span> system_utils.defined_field</span><br><span class="line"><span class="keyword">import</span> utils.auto_bind_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_array</span>(<span class="params">apps, schema_editor</span>):</span><br><span class="line">    Campaign = apps.get_model(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;campaign&#x27;</span>)</span><br><span class="line">    db_alias = schema_editor.connection.alias</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> instance <span class="keyword">in</span> Campaign.objects.using(db_alias).<span class="built_in">all</span>():</span><br><span class="line">        <span class="comment"># 将原始字符串转换为数组</span></span><br><span class="line">        array_data = [instance.os]</span><br><span class="line">        instance.os_list = array_data</span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Migration</span>(migrations.Migration):</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;0086_auto_20230619_1135&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(convert_to_array)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="4、最后删除原字段，例如：category，将新增字段category-list更名为category"><a href="#4、最后删除原字段，例如：category，将新增字段category-list更名为category" class="headerlink" title="4、最后删除原字段，例如：category，将新增字段category_list更名为category"></a>4、最后删除原字段，例如：category，将新增字段category_list更名为category</h3><p>生成migrate文件，可更改字段后，手动创建migrate文件0050.py，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Migration</span>(migrations.Migration):</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">&#x27;dsp&#x27;</span>, <span class="string">&#x27;0049&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RemoveField(</span><br><span class="line">            model_name=<span class="string">&#x27;package&#x27;</span>,</span><br><span class="line">            name=<span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">        migrations.RenameField(</span><br><span class="line">            model_name=<span class="string">&#x27;package&#x27;</span>,</span><br><span class="line">            old_name=<span class="string">&#x27;category_list&#x27;</span>,</span><br><span class="line">            new_name=<span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行迁移，CharField更改为ArrayField</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django rest_framework认证梳理</title>
    <url>/2020/11/29/python/django/django%20rest_framework%E8%AE%A4%E8%AF%81%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<p>请主人通过self.dispatch()入口查看源码。<br>看了一大堆，源码最清楚！！！！<br>1、<br><img src="https://img-blog.csdnimg.cn/20201129165015745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtamYx,size_16,color_FFFFFF,t_70" alt="使用"><br>2、流程：<br><img src="https://img-blog.csdnimg.cn/20201129165117920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtamYx,size_16,color_FFFFFF,t_70"><br>    1、入口：self.dispatch()<br>    2、对request进行封装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br></pre></td></tr></table></figure>
<pre><code>    获取定义的认证类（全局/局部），通过列表生成式创建对象进行认证
    如果未定义认证类列表，则使用默认的两个认证类
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the initial request object.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers=self.get_parsers(),</span><br><span class="line">            authenticators=self.get_authenticators(),<span class="comment">#认证</span></span><br><span class="line">            negotiator=self.get_content_negotiator(),</span><br><span class="line">            parser_context=parser_context</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_authenticators</span>(<span class="params">self</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Instantiates and returns the list of authenticators that this view can use.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认认证列表</span></span><br><span class="line">authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br></pre></td></tr></table></figure>
<p>3、对request进行加工后，进行认证<br>#遍历认证列表。如果子类中没有，则使用父类的默认的认证类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>,认证抛异常之前设置self.user为匿名用户，最后再抛异常。<br>            self.dispatch()接受异常，返回</p>
<p>self.initial(request, *args, **kwargs)<br>    &nbsp;&nbsp;&nbsp;&nbsp; -self.perform_authentication(request)<br>    &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; -request.user(内部循环认证)<br>    #如果第一个认证没有通过，并且抛异常，直接返回。<br>        #如果第一个认证没有通过，并且返回None，则继续下一个认证<br>        #第一个认证通过，直接退出<br>        #认证未通过，或者抛异常，调用self._not_authenticated()，设置匿名用户，并且抛出异常，接着self.dispatch()捕获异常</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django bulk_update_or_create 批量创建更新</title>
    <url>/2023/03/14/python/django/django%20bulk_update_or_create%20%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E4%B8%80%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">一、代码实现</a></li>
<li><a href="#%E4%BA%8C%E4%BD%BF%E7%94%A8">二、使用</a></li>
</ul>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当前django并没有提供能够批量创建或更新的方法，只有<code>bulk_update</code> 和<code>bulk_create</code>以及<code>create_or_update</code>，在实际业务中并不能满足我们的需求。因此才会有了<code>bulk_update_or_create </code></p>
<hr>
<h1 id="一、代码实现"><a href="#一、代码实现" class="headerlink" title="一、代码实现"></a>一、代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> time_tools</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="comment"># from bulk_update_or_create import BulkUpdateOrCreateQuerySet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpandQuerySet</span>(models.QuerySet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    拓展querySet</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bulk_update_or_create</span>(<span class="params">self, common_keys, unique_key_name, unique_key_to_defaults, batch_size=<span class="number">200</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        common_keys: &#123;field_name: field_value&#125; 通用筛选条件</span></span><br><span class="line"><span class="string">        unique_key_name: field_name # 唯一字段</span></span><br><span class="line"><span class="string">        unique_key_to_defaults: &#123;field_value: &#123;field_name: field_value&#125;&#125; # 更新值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> transaction.atomic(using=self.db, savepoint=<span class="literal">False</span>):</span><br><span class="line">            filter_kwargs = <span class="built_in">dict</span>(common_keys)</span><br><span class="line">            filter_kwargs[<span class="string">f&quot;<span class="subst">&#123;unique_key_name&#125;</span>__in&quot;</span>] = unique_key_to_defaults.keys()</span><br><span class="line">            existing_objs = &#123;</span><br><span class="line">                <span class="built_in">getattr</span>(obj, unique_key_name): obj</span><br><span class="line">                <span class="keyword">for</span> obj <span class="keyword">in</span> self.<span class="built_in">filter</span>(**filter_kwargs).select_for_update()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 批量创建</span></span><br><span class="line">            create_data = &#123;</span><br><span class="line">                k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> unique_key_to_defaults.items() <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> existing_objs</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> unique_key_value, obj <span class="keyword">in</span> create_data.items():</span><br><span class="line">                obj[unique_key_name] = unique_key_value</span><br><span class="line">                obj.update(common_keys)</span><br><span class="line">            creates = [self.model(**obj_data) <span class="keyword">for</span> obj_data <span class="keyword">in</span> create_data.values()]</span><br><span class="line">            <span class="keyword">if</span> creates:</span><br><span class="line">                self.bulk_create(creates, batch_size=batch_size)</span><br><span class="line">            <span class="comment"># 如果使用了add_now来自动更新时间，update_fields必须包含此字段</span></span><br><span class="line">            <span class="comment"># 因queryset.update不会自动更新时间，只有save会</span></span><br><span class="line">            update_fields = &#123;<span class="string">&quot;update_time&quot;</span>&#125;</span><br><span class="line">            <span class="comment"># 批量更新</span></span><br><span class="line">            updates = []</span><br><span class="line">            <span class="keyword">for</span> key, obj <span class="keyword">in</span> existing_objs.items():</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> unique_key_to_defaults[key].items():</span><br><span class="line">                    <span class="built_in">setattr</span>(obj, i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br><span class="line">                <span class="comment"># 将所有要更新的字段都统计出来</span></span><br><span class="line">                update_fields.update(unique_key_to_defaults[key].keys())</span><br><span class="line">                updates.append(obj)</span><br><span class="line">            <span class="keyword">if</span> existing_objs:</span><br><span class="line">                self.bulk_update(updates, update_fields, batch_size=batch_size)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(creates), <span class="built_in">len</span>(updates)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(self.model, <span class="string">&quot;update_time&quot;</span>, <span class="literal">None</span>):</span><br><span class="line">            kwargs.update(&#123;<span class="string">&quot;update_time&quot;</span>: time_tools.now()&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().update(**kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractModel</span>(models.Model):</span><br><span class="line">    objects: ExpandQuerySet = ExpandQuerySet.as_manager()</span><br></pre></td></tr></table></figure>
<p>我们需要在我们的模型基类中重定义objects为我们的扩展类。<br>bulk_update_or_create共分为三步：1、查询数据库中包含当前数据的数据。2、调用父类批量创建<code>bulk_create</code>方法，批量创建数据库中不存在的。3、调用父类批量更新<code>bulk_update</code>方法，批量更新数据库中存在的。<br>ps:我们会在批量更新中定义一个<code>update_fields = &#123;&quot;update_time&quot;&#125;</code>字段，<br>因为如果使用了add_now来自动更新时间，query.update 不会更新此此段，只有save中会，在save中对包含add_now的字段做了处理.</p>
<h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bulk_create_or_update_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> self._contents:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;url&quot;</span> <span class="keyword">in</span> _:</span><br><span class="line">        unique = _[<span class="string">&quot;unique&quot;</span>]</span><br><span class="line">        permission_dict = &#123;</span><br><span class="line">            Permission.name.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.valid.field.attname: <span class="literal">True</span>,</span><br><span class="line">            Permission.desc.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.level.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.uri.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.lambda_name.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.action_name.field.attname: <span class="number">1</span>,</span><br><span class="line">            Permission.permission.field.attname: unique</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bulk_create_or_update_dict[unique] = permission_dict</span><br><span class="line">common_keys = &#123;&#125;  <span class="comment"># 通用筛选项</span></span><br><span class="line">unique_key_name = Permission.permission.field.attname  <span class="comment"># 唯一值</span></span><br><span class="line">unique_key_to_defaults = bulk_create_or_update_dict  <span class="comment"># 默认值</span></span><br><span class="line">Permission.objects.using(PG_WRITE).bulk_update_or_create(common_keys, unique_key_name, unique_key_to_defaults)</span><br></pre></td></tr></table></figure>
<p><code>common_keys :</code>字典，通用的筛选项，会传递到orm的filter中<br><code>unique_key_name :</code>字符串，唯一的字段的名称<br><code>unique_key_to_defaults :</code>字典，key为唯一的值，value为更新的数据</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi源码流程图</title>
    <url>/2023/08/23/python/fastapi/fastapi%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    <content><![CDATA[<p>fastapi源码过程调用大致流程图<br><a href="https://www.processon.com/v/64e5810d8ae8db1df6dc590e">processon地址</a><br><img src="https://img-blog.csdnimg.cn/fb81773459e4496db24e7f643a8282d4.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>Starlette 源码分析</title>
    <url>/2023/08/23/python/fastapi/Starlette%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul>
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#1-%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">1. 服务的执行流程</a><ul>
<li><a href="#11-%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">1.1. 执行流程的源码分析</a><ul>
<li><a href="#111-starlette">1.1.1. Starlette</a></li>
<li><a href="#112-servererrormiddleware">1.1.2. ServerErrorMiddleware</a></li>
<li><a href="#113-exceptionmiddleware">1.1.3. ExceptionMiddleware</a></li>
<li><a href="#114-router">1.1.4. Router</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="1-服务的执行流程"><a href="#1-服务的执行流程" class="headerlink" title="1. 服务的执行流程"></a>1. 服务的执行流程</h1><p>Starlette 的执行包含 3 个流程</p>
<ul>
<li>服务启动时, 也就是 asgi 的 startup 事件</li>
<li>处理用户请求时, 也就是 asgi 的 http, websocket 事件</li>
<li>服务停止时, 也就是 asgi 的 shutdown 事件</li>
</ul>
<p>3 个执行流程入口都是 starlette.application.Starlette.<strong>call</strong>(scope, receive, send)</p>
<blockquote>
<p>starlette.application.Starlette.<strong>call</strong>(scope, receive, send)<br>–&gt; ServerErrorMiddleware<br>—-&gt; ExceptionMiddleware<br>——&gt; 自定义中间件<br>——–&gt; Router<br>———-&gt; 业务接口函数</p>
</blockquote>
<p>每一个中间件都是一个可调用对象, 并且接受 3 个参数,也就是 asgi 协议的三个参数: scope, receive, send.</p>
<h2 id="1-1-执行流程的源码分析"><a href="#1-1-执行流程的源码分析" class="headerlink" title="1.1. 执行流程的源码分析"></a>1.1. 执行流程的源码分析</h2><h3 id="1-1-1-Starlette"><a href="#1-1-1-Starlette" class="headerlink" title="1.1.1. Starlette"></a>1.1.1. Starlette</h3><ul>
<li>这一层是服务的入口, 包含三个作用, 服务启动时, asgi startup 事件的执行, 以及服务停止时 asgi shutdown<br>事件的执行, 客户端请求的处理.</li>
<li>上面的执行流程的构建也是在这里构建的, 也就是中间件的加载</li>
<li>服务的路由的,嵌套路由也是在这里构建</li>
<li>服务的异常处理配置也是在这里定义的</li>
<li>服务的 <code>startup</code> 和 <code>shutdown</code> 事件的绑定也是在这里,但是是绑定到 <code>router</code> 对象中的</li>
</ul>
<p>1、流程的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scope: Scope, receive: Receive, send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        scope[<span class="string">&quot;app&quot;</span>] = self</span><br><span class="line">        <span class="keyword">await</span> self.middleware_stack(scope, receive, send)</span><br></pre></td></tr></table></figure>
<p>这里可以看出他就是往 <code>scope</code> 中添加了 <code>app</code> 属性作为对象本身, 也就是说后续的调用链路中都可以通过 <code>scope</code> 拿到 <code>starlette</code> 对象.</p>
<p>2、<strong>middleware_stack</strong><br>这里的 <code>middleware_stack</code> 是就是包含了最上面的执行流程, 有点类似于常见的多层次装饰器</p>
<p><code>Starlette.middleware_stack</code> 属性是在 <code>Starlette</code> 对象创建时就构建了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Starlette</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="comment"># ...</span></span></span><br><span class="line"><span class="params">        middleware: typing.<span class="type">Optional</span>[typing.<span class="type">Sequence</span>[Middleware]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        exception_handlers: typing.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            typing.Mapping[</span></span><br><span class="line"><span class="params">                typing.<span class="type">Any</span>,</span></span><br><span class="line"><span class="params">                typing.<span class="type">Callable</span>[</span></span><br><span class="line"><span class="params">                    [Request, Exception],</span></span><br><span class="line"><span class="params">                    typing.<span class="type">Union</span>[Response, typing.Awaitable[Response]],</span></span><br><span class="line"><span class="params">                ],</span></span><br><span class="line"><span class="params">            ]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># ...</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        self.exception_handlers = (</span><br><span class="line">            &#123;&#125; <span class="keyword">if</span> exception_handlers <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">dict</span>(exception_handlers)</span><br><span class="line">        )</span><br><span class="line">        self.user_middleware = [] <span class="keyword">if</span> middleware <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">list</span>(middleware)</span><br><span class="line">        self.middleware_stack = self.build_middleware_stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_middleware_stack</span>(<span class="params">self</span>) -&gt; ASGIApp:</span><br><span class="line">        debug = self.debug</span><br><span class="line">        error_handler = <span class="literal">None</span></span><br><span class="line">        exception_handlers: typing.<span class="type">Dict</span>[</span><br><span class="line">            typing.<span class="type">Any</span>, typing.<span class="type">Callable</span>[[Request, Exception], Response]</span><br><span class="line">        ] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.exception_handlers.items():</span><br><span class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="number">500</span>, Exception):</span><br><span class="line">                error_handler = value</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exception_handlers[key] = value</span><br><span class="line"></span><br><span class="line">        middleware = (</span><br><span class="line">            [Middleware(ServerErrorMiddleware, handler=error_handler, debug=debug)]</span><br><span class="line">            + self.user_middleware</span><br><span class="line">            + [</span><br><span class="line">                Middleware(</span><br><span class="line">                    ExceptionMiddleware, handlers=exception_handlers, debug=debug</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        app = self.router</span><br><span class="line">        <span class="keyword">for</span> cls, options <span class="keyword">in</span> <span class="built_in">reversed</span>(middleware):</span><br><span class="line">            app = cls(app=app, **options)</span><br><span class="line">        <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">middleware = (</span><br><span class="line">              [Middleware(ServerErrorMiddleware, handler=error_handler, debug=debug)]</span><br><span class="line">              + self.user_middleware</span><br><span class="line">              + [</span><br><span class="line">                  Middleware(</span><br><span class="line">                      ExceptionMiddleware, handlers=exception_handlers, debug=debug</span><br><span class="line">                  )</span><br><span class="line">              ]</span><br><span class="line">          )</span><br><span class="line">app = self.router</span><br><span class="line"><span class="keyword">for</span> cls, options <span class="keyword">in</span> <span class="built_in">reversed</span>(middleware):</span><br><span class="line">    app = cls(app=app, **options)</span><br><span class="line"><span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<p>从这里可以看出 <code>ServerErrorMiddleware</code> 是最外层的调用, 并且有个 error_handler 参数, 这个参数从上面可以看出, 如果 <code>exception_handlers</code> 字典中包含了 500 这个错误码对应的异常处理器的话, <code>ServerMiddleware</code> 在执行过程中发生错误时就会使用该函数进行处理.</p>
<p>中间是用户自定义的中间件<br><code>ExceptionMiddleware</code> 是最内第二层, 且接受了 <code>exception_handlers</code> 参数作为其调用发生异常时的各种异常情况的处理器调用</p>
<p><code>app = self.router</code> 才是真正的最内一层, <code>router</code> 就是一个 <code>Router</code> 对象, 包含了所有的 Route 列表(Route 就是定义的路由)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Starlette</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        debug: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        routes: typing.<span class="type">Optional</span>[typing.<span class="type">Sequence</span>[BaseRoute]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># ...</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        self.router = Router(</span><br><span class="line">            routes, on_startup=on_startup, on_shutdown=on_shutdown, lifespan=lifespan</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p><strong>Tips:</strong></p>
<blockquote>
<p>1、如果希望在服务启动和停止的执行过程中加入自定义的内容, 那么久可以通过中间件结合判断 <code>scope[&#39;type&#39;]==&#39;lifespan&#39;</code> 来实现; 如果是想在http 或者websocket 请求处理过程中加入自定义的内容,就可以使用中间件,并且结合<code>scope[&#39;type&#39;]==&#39;http&#39;</code> 或者 <code>&#39;websocket&#39;</code> 来实现<br>        2、如果是想在服务请求过程中抛出特定异常并且能够全局补货处理, 那么可以自定义异常类, 并且在配置该异常类对应的处理函数<br>    &#x2F;3、如果不希望使用Startlett 默认的中间件,那么可以继承子类, 并修改 <code>middlware_stack</code>, 实际上完全可以自己按照 <code>asgi</code> 协议开发一个完全自定义的框架, 只是无法使用现成的代码了</p>
</blockquote>
<h3 id="1-1-2-ServerErrorMiddleware"><a href="#1-1-2-ServerErrorMiddleware" class="headerlink" title="1.1.2. ServerErrorMiddleware"></a>1.1.2. ServerErrorMiddleware</h3><p>他对全局的执行流程进行异常捕获, 并且对异常进行处理.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ServerErrorMiddleware</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Handles returning 500 responses when a server error occurs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If &#x27;debug&#x27; is set, then traceback responses will be returned,</span></span><br><span class="line"><span class="string">    otherwise the designated &#x27;handler&#x27; will be called.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This middleware class should generally be used to wrap *everything*</span></span><br><span class="line"><span class="string">    else up, so that unhandled exceptions anywhere in the stack</span></span><br><span class="line"><span class="string">    always result in an appropriate 500 response.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        app: ASGIApp,</span></span><br><span class="line"><span class="params">        handler: typing.<span class="type">Optional</span>[typing.<span class="type">Callable</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        debug: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.app = app</span><br><span class="line">        self.handler = handler</span><br><span class="line">        self.debug = debug</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scope: Scope, receive: Receive, send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] != <span class="string">&quot;http&quot;</span>:</span><br><span class="line">            <span class="keyword">await</span> self.app(scope, receive, send)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        response_started = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_send</span>(<span class="params">message: Message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">nonlocal</span> response_started, send</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;http.response.start&quot;</span>:</span><br><span class="line">                response_started = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">await</span> send(message)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">await</span> self.app(scope, receive, _send)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            request = Request(scope)</span><br><span class="line">            <span class="keyword">if</span> self.debug:</span><br><span class="line">                <span class="comment"># In debug mode, return traceback responses.</span></span><br><span class="line">                response = self.debug_response(request, exc)</span><br><span class="line">            <span class="keyword">elif</span> self.handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># Use our default 500 error handler.</span></span><br><span class="line">                response = self.error_response(request, exc)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Use an installed 500 error handler.</span></span><br><span class="line">                <span class="keyword">if</span> is_async_callable(self.handler):</span><br><span class="line">                    response = <span class="keyword">await</span> self.handler(request, exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    response = <span class="keyword">await</span> run_in_threadpool(self.handler, request, exc)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> response_started:</span><br><span class="line">                <span class="keyword">await</span> response(scope, receive, send)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># We always continue to raise the exception.</span></span><br><span class="line">            <span class="comment"># This allows servers to log the error, or allows test clients</span></span><br><span class="line">            <span class="comment"># to optionally raise the error within the test case.</span></span><br><span class="line">            <span class="keyword">raise</span> exc</span><br></pre></td></tr></table></figure>
<p>异常捕获在 try except 处</p>
<p>如果有异常发生时</p>
<ul>
<li>且当前的 <code>debug</code> 模式, 那么就会将异常的调用栈构建成网页返回给客户端 </li>
<li>如果不是 <code>debug</code> 模式<ul>
<li>并且 <code>handler</code> 配置了(这个 handler 是实例化 starlette 对象时传递的 <code>exception_handlers</code> 中 500 状态码对应的 handler), 那么就用这个 handler 进行处理. 这里要注意, handler 可以是协程对象也可以是普通函数, 他们都接受两个参数(request,exc) 且需要返回一个可调用对象, 该对象接受 (scope, receive, send) 三个参数 并且需要对客户端进行响应</li>
<li>如果没有 handler 就直接使用 <code>PlainTextResponse(&quot;Internal Server Error&quot;, status_code=500)(scope, receive, send)</code> 返回给客户端, 也就是返回一个 500 的错误, 且响应体是 “Internal Server Error”</li>
</ul>
</li>
</ul>
<p> <strong>Tips:</strong> </p>
<blockquote>
<p>如果想要更改默认的服务器异常处理, 那么配置异常处理函数时,指定 500 状态码即可</p>
</blockquote>
<h3 id="1-1-3-ExceptionMiddleware"><a href="#1-1-3-ExceptionMiddleware" class="headerlink" title="1.1.3. ExceptionMiddleware"></a>1.1.3. ExceptionMiddleware</h3><p>这个异常处理事在 Router 的上一层进行的, 主要是对 Router 下层的异常进行捕获, 并且在发生异常时对特定异常进行处理了:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        app: ASGIApp,</span></span><br><span class="line"><span class="params">        handlers: typing.<span class="type">Optional</span>[</span></span><br><span class="line"><span class="params">            typing.Mapping[typing.<span class="type">Any</span>, typing.<span class="type">Callable</span>[[Request, Exception], Response]]</span></span><br><span class="line"><span class="params">        ] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        debug: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.app = app</span><br><span class="line">        self.debug = debug  <span class="comment"># <span class="doctag">TODO:</span> We ought to handle 404 cases if debug is set.</span></span><br><span class="line">        self._status_handlers: typing.<span class="type">Dict</span>[<span class="built_in">int</span>, typing.<span class="type">Callable</span>] = &#123;&#125;</span><br><span class="line">        self._exception_handlers: typing.<span class="type">Dict</span>[</span><br><span class="line">            typing.<span class="type">Type</span>[Exception], typing.<span class="type">Callable</span></span><br><span class="line">        ] = &#123;</span><br><span class="line">            HTTPException: self.http_exception,</span><br><span class="line">            WebSocketException: self.websocket_exception,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> handlers <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> handlers.items():</span><br><span class="line">                self.add_exception_handler(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scope: Scope, receive: Receive, send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&quot;http&quot;</span>, <span class="string">&quot;websocket&quot;</span>):</span><br><span class="line">            <span class="keyword">await</span> self.app(scope, receive, send)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        response_started = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">sender</span>(<span class="params">message: Message</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">nonlocal</span> response_started</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;http.response.start&quot;</span>:</span><br><span class="line">                response_started = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">await</span> send(message)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">await</span> self.app(scope, receive, sender)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            handler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, HTTPException):</span><br><span class="line">                handler = self._status_handlers.get(exc.status_code)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                handler = self._lookup_exception_handler(exc)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> response_started:</span><br><span class="line">                msg = <span class="string">&quot;Caught handled exception, but response already started.&quot;</span></span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(msg) <span class="keyword">from</span> exc</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;http&quot;</span>:</span><br><span class="line">                request = Request(scope, receive=receive)</span><br><span class="line">                <span class="keyword">if</span> is_async_callable(handler):</span><br><span class="line">                    response = <span class="keyword">await</span> handler(request, exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    response = <span class="keyword">await</span> run_in_threadpool(handler, request, exc)</span><br><span class="line">                <span class="keyword">await</span> response(scope, receive, sender)</span><br><span class="line">            <span class="keyword">elif</span> scope[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;websocket&quot;</span>:</span><br><span class="line">                websocket = WebSocket(scope, receive=receive, send=send)</span><br><span class="line">                <span class="keyword">if</span> is_async_callable(handler):</span><br><span class="line">                    <span class="keyword">await</span> handler(websocket, exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">await</span> run_in_threadpool(handler, websocket, exc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p>他本身是包含两个预置的异常处理函数的</p>
<ul>
<li><strong>HTTPException 对应的处理函数</strong><br>如果状态码是 204 或 304 返回 <code>Response(status_code=exc.status_code, headers=exc.headers)</code> 否则返回 <code>PlainTextResponse(exc.detail, status_code=exc.status_code, headers=exc.headers)</code></li>
<li><strong>WebSocketException 对应的处理函数</strong><br>直接关闭 socket 连接</li>
</ul>
<p><strong>异常处理的过程</strong></p>
<ul>
<li>如果异常类型是 <code>HTTPException</code>, 那么会检查该异常对应状态码是否有对应的处理函数</li>
<li>如果没有 Http 异常对应的处理函数, 就根据 异常类型 再次检查该异常类型是否有对应的处理函数.</li>
<li>如果都没有找到异常处理函数就会抛出异常. 该异常会由上一层的 <code>ServerErrorMiddleware</code> 捕获处理<br><strong>Tips:</strong></li>
</ul>
<blockquote>
<p>请求处理过程中,如果想要直接返回HTTP 错误, 可以在代码中抛出HTTPExcption 异常, 但是要注意,一般HTTPException 的状态码应该是 400 以上</p>
</blockquote>
<h3 id="1-1-4-Router"><a href="#1-1-4-Router" class="headerlink" title="1.1.4. Router"></a>1.1.4. Router</h3><p>Router 有两个作用</p>
<ul>
<li>匹配客户端请求的路径找对对应的业务处理函数</li>
<li>asgi <code>startup</code> 和 <code>shutdown</code> 的执行</li>
</ul>
<p><strong>1、startup 和 shutdown 部分</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scope: Scope, receive: Receive,</span></span><br><span class="line"><span class="params">                   send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The main entry point to the Router class.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> scope[<span class="string">&quot;type&quot;</span>] <span class="keyword">in</span> (<span class="string">&quot;http&quot;</span>, <span class="string">&quot;websocket&quot;</span>, <span class="string">&quot;lifespan&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;router&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> scope:</span><br><span class="line">        scope[<span class="string">&quot;router&quot;</span>] = self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;lifespan&quot;</span>:</span><br><span class="line">        <span class="keyword">await</span> self.lifespan(scope, receive, send)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">lifespan</span>(<span class="params">self, scope: Scope, receive: Receive,</span></span><br><span class="line"><span class="params">                   send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Handle ASGI lifespan messages, which allows us to manage application</span></span><br><span class="line"><span class="string">    startup and shutdown events.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    started = <span class="literal">False</span></span><br><span class="line">    app = scope.get(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> receive()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> self.lifespan_context(app):</span><br><span class="line">            <span class="keyword">await</span> send(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;lifespan.startup.complete&quot;</span>&#125;)</span><br><span class="line">            started = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">await</span> receive()</span><br><span class="line">    <span class="keyword">except</span> BaseException:</span><br><span class="line">        exc_text = traceback.format_exc()</span><br><span class="line">        <span class="keyword">if</span> started:</span><br><span class="line">            <span class="keyword">await</span> send(&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;lifespan.shutdown.failed&quot;</span>,</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: exc_text</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">await</span> send(&#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;lifespan.startup.failed&quot;</span>,</span><br><span class="line">                <span class="string">&quot;message&quot;</span>: exc_text</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">await</span> send(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;lifespan.shutdown.complete&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>如果实例化 Starlette 时传递的没有传递 lifespan ,那么会使用默认的 <code>lifespan</code>, 也就是使用调用 Router 对象的 startup 和 shutdown 执行存储的 <code>on_startup</code> 列表中的函数 和 <code>on_shutdown</code> 列表中的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Run any `.on_startup` event handlers.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> handler <span class="keyword">in</span> self.on_startup:</span><br><span class="line">            <span class="keyword">if</span> is_async_callable(handler):</span><br><span class="line">                <span class="keyword">await</span> handler()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">shutdown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Run any `.on_shutdown` event handlers.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> handler <span class="keyword">in</span> self.on_shutdown:</span><br><span class="line">            <span class="keyword">if</span> is_async_callable(handler):</span><br><span class="line">                <span class="keyword">await</span> handler()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler()</span><br></pre></td></tr></table></figure>
<p><strong>2、路由匹配和执行</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scope: Scope, receive: Receive,</span></span><br><span class="line"><span class="params">                    send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">     <span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line">     partial = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> route <span class="keyword">in</span> self.routes:</span><br><span class="line">         <span class="comment"># Determine if any route matches the incoming scope,</span></span><br><span class="line">         <span class="comment"># and hand over to the matching route if found.</span></span><br><span class="line">         <span class="keyword">match</span>, child_scope = route.matches(scope)</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">match</span> == Match.FULL:</span><br><span class="line">             scope.update(child_scope)</span><br><span class="line">             <span class="keyword">await</span> route.handle(scope, receive, send)</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         <span class="keyword">elif</span> <span class="keyword">match</span> == Match.PARTIAL <span class="keyword">and</span> partial <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">             partial = route</span><br><span class="line">             partial_scope = child_scope</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> partial <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="comment">#  Handle partial matches. These are cases where an endpoint is</span></span><br><span class="line">         <span class="comment"># able to handle the request, but is not a preferred option.</span></span><br><span class="line">         <span class="comment"># We use this in particular to deal with &quot;405 Method Not Allowed&quot;.</span></span><br><span class="line">         scope.update(partial_scope)</span><br><span class="line">         <span class="keyword">await</span> partial.handle(scope, receive, send)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;http&quot;</span> <span class="keyword">and</span> self.redirect_slashes <span class="keyword">and</span> scope[</span><br><span class="line">             <span class="string">&quot;path&quot;</span>] != <span class="string">&quot;/&quot;</span>:</span><br><span class="line">         redirect_scope = <span class="built_in">dict</span>(scope)</span><br><span class="line">         <span class="keyword">if</span> scope[<span class="string">&quot;path&quot;</span>].endswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">             redirect_scope[<span class="string">&quot;path&quot;</span>] = redirect_scope[<span class="string">&quot;path&quot;</span>].rstrip(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             redirect_scope[<span class="string">&quot;path&quot;</span>] = redirect_scope[<span class="string">&quot;path&quot;</span>] + <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> route <span class="keyword">in</span> self.routes:</span><br><span class="line">             <span class="keyword">match</span>, child_scope = route.matches(redirect_scope)</span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">match</span> != Match.NONE:</span><br><span class="line">                 redirect_url = URL(scope=redirect_scope)</span><br><span class="line">                 response = RedirectResponse(url=<span class="built_in">str</span>(redirect_url))</span><br><span class="line">                 <span class="keyword">await</span> response(scope, receive, send)</span><br><span class="line">                 <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">await</span> self.default(scope, receive, send)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">partial = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> route <span class="keyword">in</span> self.routes:</span><br><span class="line">    <span class="comment"># Determine if any route matches the incoming scope,</span></span><br><span class="line">    <span class="comment"># and hand over to the matching route if found.</span></span><br><span class="line">    <span class="keyword">match</span>, child_scope = route.matches(scope)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span> == Match.FULL:</span><br><span class="line">        scope.update(child_scope)</span><br><span class="line">        <span class="keyword">await</span> route.handle(scope, receive, send)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">match</span> == Match.PARTIAL <span class="keyword">and</span> partial <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        partial = route</span><br><span class="line">        partial_scope = child_scope</span><br></pre></td></tr></table></figure>
<p>这里就是路由匹配的核心代码了, 遍历 Router 中的元素, 调用其 <code>matches</code> 方法进行匹配, 如果完全匹配了就调用该元素的 <code>handle</code> 方法, 传递(scope, receive, send) 给他, 然后就结束调用流程了<br><strong>Tips:</strong> </p>
<p>这里可以看出, 只要定义的 Route 对象具有 matches 方法 和 handle 方法就可以完成最基本路由匹配与执行, 所以完全可以自定义 Route 类型, 比如自定义一些嵌套的路由, 实际上 starlette 的 Mount 就是 <code>Route 的变体</code></p>
<p>接下来看一下 Route 对象的<code>mathces</code> 和 <code>handle</code> 方法<br><strong>1、matches</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">matches</span>(<span class="params">self, scope: Scope</span>) -&gt; typing.<span class="type">Tuple</span>[Match, Scope]:</span><br><span class="line">    <span class="keyword">if</span> scope[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;http&quot;</span>:</span><br><span class="line">        <span class="keyword">match</span> = self.path_regex.<span class="keyword">match</span>(scope[<span class="string">&quot;path&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            matched_params = <span class="keyword">match</span>.groupdict()</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> matched_params.items():</span><br><span class="line">                matched_params[key] = self.param_convertors[key].convert(</span><br><span class="line">                    value)</span><br><span class="line">            path_params = <span class="built_in">dict</span>(scope.get(<span class="string">&quot;path_params&quot;</span>, &#123;&#125;))</span><br><span class="line">            path_params.update(matched_params)</span><br><span class="line">            child_scope = &#123;</span><br><span class="line">                <span class="string">&quot;endpoint&quot;</span>: self.endpoint,</span><br><span class="line">                <span class="string">&quot;path_params&quot;</span>: path_params</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> self.methods <span class="keyword">and</span> scope[<span class="string">&quot;method&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> self.methods:</span><br><span class="line">                <span class="keyword">return</span> Match.PARTIAL, child_scope</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Match.FULL, child_scope</span><br><span class="line">    <span class="keyword">return</span> Match.NONE, &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>self.path_regex.match(scope[&quot;path&quot;])</code> 这一行是通过正则表达去匹配当前请求的路径, 这个正则表达式是在Route对象创建时构建的, 代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CONVERTOR_TYPES = &#123;</span><br><span class="line">    <span class="string">&quot;str&quot;</span>: StringConvertor(),</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: PathConvertor(),</span><br><span class="line">    <span class="string">&quot;int&quot;</span>: IntegerConvertor(),</span><br><span class="line">    <span class="string">&quot;float&quot;</span>: FloatConvertor(),</span><br><span class="line">    <span class="string">&quot;uuid&quot;</span>: UUIDConvertor(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">PARAM_REGEX = re.<span class="built_in">compile</span>(<span class="string">&quot;&#123;([a-zA-Z_][a-zA-Z0-9_]*)(:[a-zA-Z_][a-zA-Z0-9_]*)?&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> PARAM_REGEX.finditer(path):</span><br><span class="line">        param_name, convertor_type = <span class="keyword">match</span>.groups(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">        convertor_type = convertor_type.lstrip(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">            convertor_type</span><br><span class="line">            <span class="keyword">in</span> CONVERTOR_TYPES), <span class="string">f&quot;Unknown path convertor &#x27;<span class="subst">&#123;convertor_type&#125;</span>&#x27;&quot;</span></span><br><span class="line">        convertor = CONVERTOR_TYPES[convertor_type]</span><br><span class="line">        path_regex += re.escape(path[idx:<span class="keyword">match</span>.start()])</span><br><span class="line">        path_regex += <span class="string">f&quot;(?P&lt;<span class="subst">&#123;param_name&#125;</span>&gt;<span class="subst">&#123;convertor.regex&#125;</span>)&quot;</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p>如果匹配到了, 那么检查是否有路径参数, 如果有路径参数, 那么提取出路径参数, 并且对路径参数进行格式转换 <code>self.param_convertors[key].convert(value)</code><br><strong>Tips:</strong><br>路由参数进行格式转换是可以自定义的, 只要参考 <code>starlette.converters</code> 下的 <code>Converter</code> 类, 并且将其添加到 <code>CONVERTOR_TYPES</code> 中既可以</p>
<p><strong>2、handle</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self, scope: Scope, receive: Receive, send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> self.methods <span class="keyword">and</span> scope[<span class="string">&quot;method&quot;</span>] <span class="keyword">not</span> <span class="keyword">in</span> self.methods:</span><br><span class="line">        headers = &#123;<span class="string">&quot;Allow&quot;</span>: <span class="string">&quot;, &quot;</span>.join(self.methods)&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;app&quot;</span> <span class="keyword">in</span> scope:</span><br><span class="line">            <span class="keyword">raise</span> HTTPException(status_code=<span class="number">405</span>, headers=headers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = PlainTextResponse(<span class="string">&quot;Method Not Allowed&quot;</span>,</span><br><span class="line">                                         status_code=<span class="number">405</span>,</span><br><span class="line">                                         headers=headers)</span><br><span class="line">        <span class="keyword">await</span> response(scope, receive, send)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">await</span> self.app(scope, receive, send)</span><br></pre></td></tr></table></figure>
<p>这里先判断请求方法是否在方法列表中, 如果不再直接抛出 <strong>405 Http</strong> 异常</p>
<p>否则调用 <code>Route.app(scope,receive,send)</code> 那么这里关键的代码就是 app 这个属性中了, 看一下属性的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">request_response</span>(<span class="params">func: typing.<span class="type">Callable</span></span>) -&gt; ASGIApp:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Takes a function or coroutine `func(request) -&gt; response`,</span></span><br><span class="line"><span class="string">    and returns an ASGI application.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    is_coroutine = is_async_callable(func)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">scope: Scope, receive: Receive, send: Send</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        request = Request(scope, receive=receive, send=send)</span><br><span class="line">        <span class="keyword">if</span> is_coroutine:</span><br><span class="line">            response = <span class="keyword">await</span> func(request)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = <span class="keyword">await</span> run_in_threadpool(func, request)</span><br><span class="line">        <span class="keyword">await</span> response(scope, receive, send)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="comment"># ...</span></span></span><br><span class="line"><span class="params">    endpoint: typing.<span class="type">Callable</span>,</span></span><br><span class="line"><span class="params">    <span class="comment"># ...</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    self.endpoint = endpoint</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">if</span> inspect.isfunction(endpoint_handler) <span class="keyword">or</span> inspect.ismethod(</span><br><span class="line">            endpoint_handler):</span><br><span class="line">        <span class="comment"># Endpoint is function or method. Treat it as `func(request) -&gt; response`.</span></span><br><span class="line">        self.app = request_response(endpoint)</span><br><span class="line">        <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            methods = [<span class="string">&quot;GET&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Endpoint is a class. Treat it as ASGI.</span></span><br><span class="line">        self.app = endpoint</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
<p>如果 <code>endpoint(也就是我们的视图函数)</code> 是函数对着方法, 那么就通过 <code>request_response</code> 包装一层, 执行的时候就是:</p>
<ul>
<li>如果是携程对象, 就直接 await</li>
<li>如果是普通函数, 就再线程池中执行</li>
</ul>
<p><strong>Tips:</strong> 如果不是函数或者方法, 就把它当做一个普通类, 从代码中看出, 这个<code>endpoint</code> 类的实例化时应当接受(scope,receive,send)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Endp</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, scope, receive, send, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Endpx</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, scope, receive, send</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__await__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> 可等待对象</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>fastapi</tag>
      </tags>
  </entry>
  <entry>
    <title>flask migrate创建迁移脚本无效</title>
    <url>/2020/04/07/python/flask/flask%20migrate%E5%88%9B%E5%BB%BA%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>前面的步骤就先不说了，也就是初始化migrate、绑定Manage。<br>1、首先使用init初始化</p>
<p><img src="https://img-blog.csdnimg.cn/20200407172128417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtamYx,size_16,color_FFFFFF,t_70"><br>2、生成迁移文件</p>
<p><img src="https://img-blog.csdnimg.cn/20200407172335172.png"><br>此时可能会出现如图问题，前提是已经创建model。<br>问题所在：创建的model对象系统不知道，没有告诉系统，也就是没有实例化对象。因此需要在views中导入要迁移的model，系统才知道要迁移哪个模板。</p>
<p>views中导入相应模块<br><img src="https://img-blog.csdnimg.cn/20200407181334290.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask框架中自定义模型类的表名、父类相关问题分析</title>
    <url>/2020/04/09/python/flask/Flask%E6%A1%86%E6%9E%B6%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E7%B1%BB%E7%9A%84%E8%A1%A8%E5%90%8D%E3%80%81%E7%88%B6%E7%B1%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="关于继承父类model，为子model自定义表名的设置"><a href="#关于继承父类model，为子model自定义表名的设置" class="headerlink" title="关于继承父类model，为子model自定义表名的设置"></a>关于继承父类model，为子model自定义表名的设置</h2><h2 id="1、单张表设置表名"><a href="#1、单张表设置表名" class="headerlink" title="1、单张表设置表名"></a>1、单张表设置表名</h2><p>_<em>tablename</em>_ &#x3D; ‘model name’<br>此字段必须是继承自models.Model才可设置。<br><img src="https://img-blog.csdnimg.cn/20200409155726755.png"></p>
<h2 id="2、有继承关系的表设置表名"><a href="#2、有继承关系的表设置表名" class="headerlink" title="2、有继承关系的表设置表名"></a>2、有继承关系的表设置表名</h2><p>如果其他model继承自BaseModel，那么__tablename__将失效，默认表名为父类表名。<br>要想自定义子类表名，需要在父类model中添加<strong>_<em>abstract</em>_ &#x3D; True</strong>字段。<br><img src="https://img-blog.csdnimg.cn/20200409160213276.png"><br><img src="https://img-blog.csdnimg.cn/20200409160229896.png"><br>这样就可以自定义表名啦。</p>
<h2 id="3、喜欢的拿走"><a href="#3、喜欢的拿走" class="headerlink" title="3、喜欢的拿走"></a>3、喜欢的拿走</h2><p><img src="https://img-blog.csdnimg.cn/20200409160438194.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtamYx,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>app hook</title>
    <url>/2021/12/27/python/spider/app%20hook/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E4%BD%BF%E7%94%A8jadx%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81">一、使用jadx查看代码</a></li>
<li><a href="#%E4%BA%8Capktool">二、apktool</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li>
</ul>
<p>案例：<br>案例apk：<a href="https://pan.baidu.com/s/1chb-sFbrXo8h0hwMIxd3cw">下载地址，提取码4274</a></p>
<h2 id="一、使用jadx查看代码"><a href="#一、使用jadx查看代码" class="headerlink" title="一、使用jadx查看代码"></a>一、使用jadx查看代码</h2><p>app界面(猜拳小游戏)：<br><img src="https://img-blog.csdnimg.cn/99af538b520146c48fadbe523166d2c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>打开 androidmanifest.xml<br><img src="https://img-blog.csdnimg.cn/baff00dc607c4802b45e5a362228b3ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>查找activity，此为实例与组件的对应。因为案例只有一个界面，所以目前只有一个activity。<br>根据android:name 找到对应类<br><img src="https://img-blog.csdnimg.cn/497b76d763134c4582e2fedb5edfbe7f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/8d64a51abf194ee2bff2726a954ea6ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>在代码中可以看到showMessageTask 为一个类的实例，因此想要hook此类，需要使用apktool反编译</p>
<h2 id="二、apktool"><a href="#二、apktool" class="headerlink" title="二、apktool"></a>二、apktool</h2><p>下载apktool后，打开cmd，进入此下载目录。<br>输入命令<code>apktool.bat d F:\Desktop\books爬虫\lesson2-rps-frida-test.apk</code><br><img src="https://img-blog.csdnimg.cn/77c6c67c56c543fab2aca27a07f7eea1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>此时，会在当前目录下生成和apk名字相同的文件夹，进入<code>lesson2-rps-frida-test\smali\com\example\seccon2015\rock_paper_scissors</code><br>可以看到smail文件<br><img src="https://img-blog.csdnimg.cn/ab3eea8deb854f2db1982be2bbe36a56.png"><br><strong>MainActivity.smali</strong>文件为我们之前找到的类<br><strong>MainActivity$1.smali</strong>就是我们需要hook的属性为类类型的类了。<br>hook时，使用<strong>包名+类名</strong>即可hook</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Java.perform(</span></span><br><span class="line"><span class="string">    function () &#123;</span></span><br><span class="line"><span class="string">        console.log(&#x27;[*] Running CTF&#x27;)</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity&#x27;)</span></span><br><span class="line"><span class="string">        MainActivity.onClick.implementation = function(v)&#123;</span></span><br><span class="line"><span class="string">            // m 是默认值</span></span><br><span class="line"><span class="string">            //console.log(&#x27;m is :&#x27;+this.m.value)</span></span><br><span class="line"><span class="string">            //console.log(&#x27;n is :&#x27;+this.n.value)</span></span><br><span class="line"><span class="string">            this.onClick(v)</span></span><br><span class="line"><span class="string">            console.log(&#x27;m is :&#x27;+this.m.value)</span></span><br><span class="line"><span class="string">            console.log(&#x27;n is :&#x27;+this.n.value)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        var TT = Java.use(&#x27;com.example.seccon2015.rock_paper_scissors.MainActivity$1&#x27;) // 从 Smali 文件找</span></span><br><span class="line"><span class="string">        TT.run.implementation = function()&#123;</span></span><br><span class="line"><span class="string">            // 内部类访问外部类的成员变量</span></span><br><span class="line"><span class="string">            // this.this$0.value.外部类属性名.value </span></span><br><span class="line"><span class="string">            // this.m.value = 1    // TypeError: cannot write property &#x27;value&#x27; of undefined</span></span><br><span class="line"><span class="string">            // this.n.value = 2</span></span><br><span class="line"><span class="string">            this.this$0.value.m.value = 1</span></span><br><span class="line"><span class="string">            this.this$0.value.n.value = 2</span></span><br><span class="line"><span class="string">            this.run()</span></span><br><span class="line"><span class="string">        &#125;  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&#x27;payload&#x27;</span>])</span><br><span class="line">    <span class="keyword">elif</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&#x27;stack&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hook 已经启动的app</span></span><br><span class="line">process = frida.get_usb_device(timeout=<span class="number">1000</span>).attach(<span class="string">&#x27;com.example.seccon2015.rock_paper_scissors&#x27;</span>)</span><br><span class="line">script = process.create_script(hook_code)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()  <span class="comment"># 防止程序退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spawn 重启app 可以hook app的启动阶段 (可能会使app闪崩)</span></span><br><span class="line"><span class="comment"># device = frida.get_usb_device(timeout=1000)</span></span><br><span class="line"><span class="comment"># pid = device.spawn([&#x27;com.example.seccon2015.rock_paper_scissors&#x27;])</span></span><br><span class="line"><span class="comment"># process = device.attach(pid)</span></span><br><span class="line"><span class="comment"># script = process.create_script(hook_code)</span></span><br><span class="line"><span class="comment"># script.on(&#x27;message&#x27;, on_message)</span></span><br><span class="line"><span class="comment"># script.load()</span></span><br><span class="line"><span class="comment"># sys.stdin.read()  # 防止程序退出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>app抓包</title>
    <url>/2021/12/24/python/spider/app%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80fiddler%E9%85%8D%E7%BD%AE">一、fiddler配置</a></li>
<li><a href="#%E4%BA%8C%E6%89%8B%E6%9C%BA%E9%85%8D%E7%BD%AE">二、手机配置</a></li>
<li><a href="#%E4%B8%89tunnel-to">三、Tunnel to</a></li>
</ul>
<h2 id="一、fiddler配置"><a href="#一、fiddler配置" class="headerlink" title="一、fiddler配置"></a>一、fiddler配置</h2><p><img src="https://img-blog.csdnimg.cn/8bcf34a0b32040948b42104eb8f4e430.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/6c59e2dabf1645468a1afe4d77aade9f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/042f1c9026b44d0db9cc5c65b7e1865f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/da9a0fffb60d4748a29315e80bc50687.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="二、手机配置"><a href="#二、手机配置" class="headerlink" title="二、手机配置"></a>二、手机配置</h2><p>1、设置wifi，<br><img src="https://img-blog.csdnimg.cn/f47d29b4fba04debba0a5560886ec33d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>2、浏览器访问 ip:port  (172.168.3.243:8888)<br>    下载证书<br><img src="https://img-blog.csdnimg.cn/a9361df74a904e7ead4e292c7d40b364.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>3、点击证书安装</p>
<h2 id="三、Tunnel-to"><a href="#三、Tunnel-to" class="headerlink" title="三、Tunnel to"></a>三、Tunnel to</h2><p>安装 xposed + justtrustme,当然安装这个的前提需要你的手机有 root 才行，如果没有话，推荐你使用 virtualXposed + justtrustme，这两个也行。</p>
<p>这里见到那说下 virtualXposed 的用法。</p>
<p>下载地址：<a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a></p>
<p>插件下载：<a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a><br><img src="https://img-blog.csdnimg.cn/1186af7886a14453995fb80a66c54dad.png"><br><img src="https://img-blog.csdnimg.cn/9009516da13f4976a923217f7c8a730e.png"><br><img src="https://img-blog.csdnimg.cn/0dff397b9b00455685fbd101658d39ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_14,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/afab1c24779e43048b6601b3a3b73372.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_17,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/6b3f53571523407a902d6840a36bff7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_17,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/82f693c5ac2a4c319ba321671618d757.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/60605679d4bd452c84a0c97d6914036e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_18,color_FFFFFF,t_70,g_se,x_16"><br>再在 virtualXposed 上面打开小红书软件，再看 fiddler，包都有了。</p>
<p>ps: 不支持32位应用时，使用0.18.2版本<br><a href="https://pan.baidu.com/s/1uQpIffFTFmqfsaq1knEqnA">下载链接，密码vvgd</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-爬虫-woff静态字体-映射方法之一（大众点评字形与编码的对应关系）</title>
    <url>/2020/05/12/python/spider/python-%E7%88%AC%E8%99%AB-woff%E9%9D%99%E6%80%81%E5%AD%97%E4%BD%93-%E6%98%A0%E5%B0%84%E6%96%B9%E6%B3%95%E4%B9%8B%E4%B8%80%EF%BC%88%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%E5%AD%97%E5%BD%A2%E4%B8%8E%E7%BC%96%E7%A0%81%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%EF%BC%89/</url>
    <content><![CDATA[<p>woff字体可在<a href="http://fontstore.baidu.com/static/editor/index.html">font editor</a>查看映射关系</p>
<blockquote>
<p>直接看这位大佬写的吧；woff文件解析<a href="https://blog.csdn.net/weixin_43752839/article/details/98314821#commentBox">https://blog.csdn.net/weixin_43752839/article/details/98314821#commentBox</a></p>
</blockquote>
<p>思路：</p>
<pre><code>1、通过selenium截取整个页面

2、使用Image截取每个字体，

3、使用图片识别技术（推荐百度云文字识别）
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome(<span class="string">&#x27;D:\chromedriver_win32\chromedriver.exe&#x27;</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://fontstore.baidu.com/static/editor/index.html&#x27;</span>)</span><br><span class="line"><span class="comment">#!!!!需手动上传文件！！</span></span><br><span class="line">sleep(<span class="number">10</span>)<span class="comment">#上传文件没有写，留10秒时间上传文件，并设置网页格式，保证整个页面能够显示完整当前页面的字体</span></span><br><span class="line"></span><br><span class="line">t = <span class="literal">True</span>		<span class="comment">#退出关键词</span></span><br><span class="line"><span class="keyword">while</span> t:</span><br><span class="line">	sleep(<span class="number">5</span>)</span><br><span class="line">	<span class="comment">#1级文件夹</span></span><br><span class="line">    path = <span class="string">&#x27;woff/&#x27;</span></span><br><span class="line">    <span class="comment">#获取当前页码，保证正常存储</span></span><br><span class="line">    page = driver.find_element_by_xpath(<span class="string">&#x27;//input[@data-pager=&quot;text&quot;]&#x27;</span>).get_attribute(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(page)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path+page):</span><br><span class="line">    	<span class="comment">#2级文件夹</span></span><br><span class="line">        os.mkdir(path+page)</span><br><span class="line">        </span><br><span class="line">	<span class="comment">#适当的调整节点大小，使文字能够完全显示出来。</span></span><br><span class="line">    driver.execute_script(<span class="string">&#x27;var l = document.getElementsByClassName(&quot;glyf&quot;);for(var i=0;i&lt;l.length;i++)&#123;l[i].style.height =&quot;100px&quot;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#屏幕截图</span></span><br><span class="line">	driver.get_screenshot_as_file(path+page+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">	<span class="comment">#获取字体父元素节点列表</span></span><br><span class="line">	font_list = driver.find_elements_by_class_name(<span class="string">&#x27;glyf-item&#x27;</span>)</span><br><span class="line">	<span class="comment">#调整上一步截取的图片像素，保证图片像素与网页大小差不多</span></span><br><span class="line">	pic = Image.<span class="built_in">open</span>(path+page+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    pic = pic.resize((<span class="number">1536</span>,<span class="number">749</span>))</span><br><span class="line">    pic.save(path+page+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    pic = Image.<span class="built_in">open</span>(path+page+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#一般woff字体中前两个为垃圾字符，可以去除</span></span><br><span class="line">    <span class="keyword">if</span> page ==<span class="number">1</span>:</span><br><span class="line">        font_list = font_list[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="comment">#遍历字体父元素节点列表</span></span><br><span class="line">	 <span class="keyword">for</span> font <span class="keyword">in</span> font_list:</span><br><span class="line">		<span class="comment">#获取字体所在节点</span></span><br><span class="line">        svg = font.find_element_by_class_name(<span class="string">&#x27;glyf&#x27;</span>)</span><br><span class="line">        <span class="comment">#获取字体所对应的unicode编码</span></span><br><span class="line">        uni = font.find_element_by_class_name(<span class="string">&#x27;name&#x27;</span>).text <span class="keyword">or</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(uni)</span><br><span class="line">        <span class="comment">#字体截图</span></span><br><span class="line">        pic1 = pic.crop((svg.rect[<span class="string">&#x27;x&#x27;</span>], svg.rect[<span class="string">&#x27;y&#x27;</span>], svg.rect[<span class="string">&#x27;x&#x27;</span>] + svg.rect[<span class="string">&#x27;width&#x27;</span>], svg.rect[<span class="string">&#x27;y&#x27;</span>] + svg.rect[<span class="string">&#x27;height&#x27;</span>]))</span><br><span class="line">        <span class="built_in">print</span>(path + page + <span class="string">&#x27;/&#x27;</span> + uni + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        <span class="comment">#保存图片</span></span><br><span class="line">        pic1.save(path+page+<span class="string">&#x27;/&#x27;</span>+uni + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#下一页节点</span></span><br><span class="line">	next_button = driver.find_element_by_xpath(<span class="string">&#x27;//button[@data-pager=&quot;next&quot;]&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    	<span class="comment">#判断是否为最后一页，如果不是，则pass</span></span><br><span class="line">        d = driver.find_element_by_xpath(<span class="string">&#x27;//button[@data-pager=&quot;next&quot;]/@data-disabled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        t = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    next_button.click()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<pre><code>到此，全部的字体已经截图完成。接下来将进行文字识别。
使用到的是调用百度文职识别api接口，
</code></pre>
<p><a href="https://ai.baidu.com/">https://ai.baidu.com</a><br>    登录百度账号，进去控制台，选择文字识别，创建应用，并复制三个参数<br>    <img src="https://img-blog.csdnimg.cn/20200512190136521.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#picfile:图片路径</span></span><br><span class="line"><span class="comment">#name：图片名字</span></span><br><span class="line"><span class="comment">#n：用来保证容错率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baiduOCR</span>(<span class="params">picfile,name,n</span>):</span><br><span class="line">    <span class="comment"># filename = path.basename(picfile)</span></span><br><span class="line">    APP_ID = <span class="string">&#x27;19845704&#x27;</span></span><br><span class="line">    API_KEY = <span class="string">&#x27;u9fCGvIPf4P1FbtLOQDWebRS&#x27;</span></span><br><span class="line">    SECRECT_KEY = <span class="string">&#x27;kNo3Hrz0ucoaqFrtBYNT2PjHDrHbcK3u&#x27;</span></span><br><span class="line">    client = AipOcr(APP_ID, API_KEY, SECRECT_KEY)</span><br><span class="line">    i = <span class="built_in">open</span>(picfile, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    img = i.read()</span><br><span class="line"></span><br><span class="line">    message = client.basicGeneral(img) <span class="comment">#普通识别</span></span><br><span class="line">    <span class="comment">#message = client.basicAccurate(img)#高级识别</span></span><br><span class="line">    i.close()</span><br><span class="line">   </span><br><span class="line">	n+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> text <span class="keyword">in</span> message.get(<span class="string">&#x27;words_result&#x27;</span>):</span><br><span class="line">        	<span class="comment">#确认是否识别出文字内容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(text.get(<span class="string">&#x27;words&#x27;</span>)) &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> n &lt; <span class="number">3</span>:</span><br><span class="line">                    baiduOCR(picfile, name, n)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> text.get(<span class="string">&#x27;words&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        baiduOCR(picfile, name, n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab</span>(<span class="params">picfile,name,n</span>):</span><br><span class="line">	<span class="comment">#failure.txt:用于存放普通识别失败的图片地址</span></span><br><span class="line">	<span class="comment">#success.txt：用于存放识别成功的数据</span></span><br><span class="line">    s = baiduOCR(picfile, name, n)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    d = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">False</span> <span class="keyword">or</span> s == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;识别失败：&#x27;</span> + picfile)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;failure.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(picfile+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        d = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">    	<span class="comment">#此处是我为了方便写的，</span></span><br><span class="line">        t = <span class="string">&#x27;&quot;&#x27;</span> + name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;&quot;&#x27;</span> + <span class="string">&#x27;:&#x27;</span> + <span class="string">&#x27;&quot;&#x27;</span> + s + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;succcess.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(t+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	</span><br><span class="line">    path = os.listdir(<span class="string">&#x27;woff&#x27;</span>)</span><br><span class="line">    dir_list = []</span><br><span class="line">    a = &#123;&#125;</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(<span class="string">&#x27;woff/&#x27;</span>+p):</span><br><span class="line">            dir_list.append(<span class="string">&#x27;woff/&#x27;</span>+p)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> dir_list:</span><br><span class="line">        <span class="built_in">print</span>(l)</span><br><span class="line">        png = os.listdir(l)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> png:</span><br><span class="line">            ab(l+<span class="string">&#x27;/&#x27;</span>+p,p,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>最后，再使用高级识别接口（client.basicAccurate(img），进行第二次识别，解决上一步识别失败的图片，剩余的再手动映射吧。</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python firda hook配置</title>
    <url>/2021/12/24/python/spider/python%20firda%20hook%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80firda-%E5%AE%89%E8%A3%85">一、firda 安装</a></li>
<li><a href="#%E4%BA%8C%E5%AE%89%E8%A3%85%E6%9C%A8%E6%9C%A8%E6%A8%A1%E6%8B%9F%E5%99%A8">二、安装木木模拟器</a></li>
<li><a href="#%E4%B8%8B%E8%BD%BDfrida%E6%9C%8D%E5%8A%A1%E7%AB%AF-android">下载frida服务端-Android</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8adb%E8%BF%9E%E6%8E%A5mumu%E6%A8%A1%E6%8B%9F%E5%99%A8">使用adb连接mumu模拟器</a></li>
<li><a href="#python%E8%B0%83%E8%AF%95">python调试</a></li>
<li><a href="#%E8%84%B1%E5%A3%B3">脱壳</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B">查看</a></li>
</ul>
<h2 id="一、firda-安装"><a href="#一、firda-安装" class="headerlink" title="一、firda 安装"></a>一、firda 安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install firda -i http://pypi.douban.com/simple/ </span><br><span class="line">pip install frida-tools -i http://pypi.douban.com/simple/ </span><br></pre></td></tr></table></figure>

<h2 id="二、安装木木模拟器"><a href="#二、安装木木模拟器" class="headerlink" title="二、安装木木模拟器"></a>二、安装木木模拟器</h2><p><a href="http://mumu.163.com/">官网： http://mumu.163.com/</a><br><strong>开启root</strong><br><img src="https://img-blog.csdnimg.cn/965faa30d7654b16b16084cbc4b9322d.png"><br><img src="https://img-blog.csdnimg.cn/1a557606f2d547db8ad8cd11ae18f9c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>打开模拟器USB调试<br>在开发者选项中。</strong><br><img src="https://img-blog.csdnimg.cn/19503c773a9e4452a7d7b5e6551f1c7f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>安装RE文件管理器<br>直接搜索进行下载,下载后打开给予root权限</strong><br><img src="https://img-blog.csdnimg.cn/6d104811791a40f1ba18bdde5ec19aea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="下载frida服务端-Android"><a href="#下载frida服务端-Android" class="headerlink" title="下载frida服务端-Android"></a>下载frida服务端-Android</h2><p><strong>下载frida-server文件</strong><br><a href="https://github.com/frida/frida/releases">到 https://github.com/frida/frida/releases 下载相应的版本（版本一定对应firda版本）</a><br><strong>移动文件到tmp下</strong><br>下载完成之后,如果你使用的本地下载,则把这个文件放入木木共享文件夹中解压,重命名为 frida-server</p>
<p>**<img src="https://img-blog.csdnimg.cn/0e068243f7dc4b94aa483c11223cebfd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>**<br>然后打开 RE文件管理器,使用全局搜索,找到这个文件的位置.<br><img src="https://img-blog.csdnimg.cn/7078fa0d8c034015b578ede0bf8de7b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>接着把 frida-server文件复制到 &#x2F;data&#x2F;local&#x2F;tmp 目录下.<br><img src="https://img-blog.csdnimg.cn/acc533f0aa5a4afca3f34fb083a6fe3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="使用adb连接mumu模拟器"><a href="#使用adb连接mumu模拟器" class="headerlink" title="使用adb连接mumu模拟器"></a>使用adb连接mumu模拟器</h2><p>先找到模拟器的安装目录,然后进入 emulator\nemu\vmonitor\bin目录<br><img src="https://img-blog.csdnimg.cn/dbba4d33a4b447c28971571a0ac861c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>配置adb<br>将adb_server.exe 重命名为adb.exe<br>配置全局变量<br><img src="https://img-blog.csdnimg.cn/996389ad4b8a47adbe8a6fd220ccfdb8.png"><br>1、打开cmd，输入 adb connect 127.0.0.1:7555<br>2、adb shell 进入交互环境<br>3、cd  &#x2F;data&#x2F;local&#x2F;tmp<br>4、chmod 777 frida-server  设置权限<br>5、.&#x2F;frida-server   启动服务<br>6、adb forward tcp:27042 tcp:27042    开放访问端口<br>7、打开新cmd，输入frida-ps -U，有信息则服务启动成功</p>
<h2 id="python调试"><a href="#python调试" class="headerlink" title="python调试"></a>python调试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取设备信息</span></span><br><span class="line">rdev = frida.get_remote_device()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取在前台运行的APP</span></span><br><span class="line">front_app = rdev.get_frontmost_application()</span><br><span class="line"><span class="built_in">print</span> (front_app)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>案例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">rdev = frida.get_remote_device()</span><br><span class="line"><span class="comment">#获取在前台运行的APP</span></span><br><span class="line">front_app = rdev.get_frontmost_application()</span><br><span class="line"><span class="built_in">print</span> (front_app)</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">res = re.findall(<span class="string">r&quot;pid=(.*?),&quot;</span>,<span class="built_in">str</span>(front_app))</span><br><span class="line"><span class="comment"># 枚举进程中加载指定模块中的导出函数</span></span><br><span class="line">session = rdev.attach(<span class="built_in">int</span>(res[<span class="number">0</span>]))   <span class="comment"># 也可以使用attach(pid)的方式</span></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    var temp = Java.use(&#x27;com.xunyou.libservice.server.impl.ServerApi&#x27;);</span></span><br><span class="line"><span class="string">    var ServerParams = Java.use(&#x27;com.xunyou.libservice.server.impl.ServerParams&#x27;);</span></span><br><span class="line"><span class="string">        temp.e.overload(&#x27;org.json.JSONObject&#x27;).implementation = function(a)&#123;</span></span><br><span class="line"><span class="string">            var result = this.e(a);  </span></span><br><span class="line"><span class="string">            send(hasmap_parse(result));</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function hasmap_parse(result)&#123;</span></span><br><span class="line"><span class="string">     var test = result.toString();</span></span><br><span class="line"><span class="string">            var keyset = result.keySet();</span></span><br><span class="line"><span class="string">            var it = keyset.iterator();</span></span><br><span class="line"><span class="string">            while(it.hasNext())&#123;</span></span><br><span class="line"><span class="string">                var keystr = it.next().toString();</span></span><br><span class="line"><span class="string">                var valuestr = result.get(keystr).toString();</span></span><br><span class="line"><span class="string">                test +=keystr+&quot;:&quot;+ valuestr+&quot;;&quot;;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        return test;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">script = session.create_script(jscode)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure>

<h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>使用frida_dexdump 强制脱壳，可脱壳已加固<br><a href="https://github.com/hluwa/FRIDA-DEXDump">下载地址</a></p>
<p><strong>使用</strong><br>在模拟器上运行app后，执行 python main.py<br>脱壳后的文件将保存到当前目录<br><img src="https://img-blog.csdnimg.cn/0b72dbbf35f946ac87c728e2ec754900.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_14,color_FFFFFF,t_70,g_se,x_16"></p>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>使用jadx-gui查看源代码（拖进去即可）<br><img src="https://img-blog.csdnimg.cn/f0e7f3b82ecf471c881ea461e28c4265.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6buR54yr4LmR,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
</search>
